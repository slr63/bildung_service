/* soapC.cpp
   Generated by gSOAP 2.8.104 for bildung.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.104 2020-07-01 11:12:06 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__SearchType:
		return soap_in_ns1__SearchType(soap, tag, NULL, "ns1:SearchType");
	case SOAP_TYPE_ns1__KeyValue:
		return soap_in_ns1__KeyValue(soap, tag, NULL, "ns1:KeyValue");
	case SOAP_TYPE_ns1__EventRegistrationWarning:
		return soap_in_ns1__EventRegistrationWarning(soap, tag, NULL, "ns1:EventRegistrationWarning");
	case SOAP_TYPE_ns1__EventRegistrationEvent:
		return soap_in_ns1__EventRegistrationEvent(soap, tag, NULL, "ns1:EventRegistrationEvent");
	case SOAP_TYPE_ns1__EventRegistration:
		return soap_in_ns1__EventRegistration(soap, tag, NULL, "ns1:EventRegistration");
	case SOAP_TYPE_ns1__Workshop:
		return soap_in_ns1__Workshop(soap, tag, NULL, "ns1:Workshop");
	case SOAP_TYPE_ns1__WorkshopTimeslot:
		return soap_in_ns1__WorkshopTimeslot(soap, tag, NULL, "ns1:WorkshopTimeslot");
	case SOAP_TYPE_ns1__Address:
		return soap_in_ns1__Address(soap, tag, NULL, "ns1:Address");
	case SOAP_TYPE_ns1__EventFee:
		return soap_in_ns1__EventFee(soap, tag, NULL, "ns1:EventFee");
	case SOAP_TYPE_ns1__Event:
		return soap_in_ns1__Event(soap, tag, NULL, "ns1:Event");
	case SOAP_TYPE_ns1__EventBase:
		return soap_in_ns1__EventBase(soap, tag, NULL, "ns1:EventBase");
	case SOAP_TYPE_ns1__EventMini:
		return soap_in_ns1__EventMini(soap, tag, NULL, "ns1:EventMini");
	case SOAP_TYPE_ns1__EventFilter:
		return soap_in_ns1__EventFilter(soap, tag, NULL, "ns1:EventFilter");
	case SOAP_TYPE_xsd__decimal:
		return soap_in_xsd__decimal(soap, tag, NULL, "xsd:decimal");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__register:
		return soap_in_PointerTo_ns1__register(soap, tag, NULL, "ns1:register");
	case SOAP_TYPE_PointerTo_ns1__getSingleEvent:
		return soap_in_PointerTo_ns1__getSingleEvent(soap, tag, NULL, "ns1:getSingleEvent");
	case SOAP_TYPE_PointerTo_ns1__getAllEvents:
		return soap_in_PointerTo_ns1__getAllEvents(soap, tag, NULL, "ns1:getAllEvents");
	case SOAP_TYPE_PointerTo_ns1__dumpTableFields:
		return soap_in_PointerTo_ns1__dumpTableFields(soap, tag, NULL, "ns1:dumpTableFields");
	case SOAP_TYPE_PointerTons1__WorkshopTimeslot:
		return soap_in_PointerTons1__WorkshopTimeslot(soap, tag, NULL, "ns1:WorkshopTimeslot");
	case SOAP_TYPE_PointerTons1__Address:
		return soap_in_PointerTons1__Address(soap, tag, NULL, "ns1:Address");
	case SOAP_TYPE_PointerTons1__EventFee:
		return soap_in_PointerTons1__EventFee(soap, tag, NULL, "ns1:EventFee");
	case SOAP_TYPE_PointerTons1__EventBase:
		return soap_in_PointerTons1__EventBase(soap, tag, NULL, "ns1:EventBase");
	case SOAP_TYPE_PointerTons1__EventRegistrationWarning:
		return soap_in_PointerTons1__EventRegistrationWarning(soap, tag, NULL, "ns1:EventRegistrationWarning");
	case SOAP_TYPE_PointerTons1__EventRegistration:
		return soap_in_PointerTons1__EventRegistration(soap, tag, NULL, "ns1:EventRegistration");
	case SOAP_TYPE_PointerTons1__Event:
		return soap_in_PointerTons1__Event(soap, tag, NULL, "ns1:Event");
	case SOAP_TYPE_PointerTons1__EventMini:
		return soap_in_PointerTons1__EventMini(soap, tag, NULL, "ns1:EventMini");
	case SOAP_TYPE_PointerTons1__EventFilter:
		return soap_in_PointerTons1__EventFilter(soap, tag, NULL, "ns1:EventFilter");
	case SOAP_TYPE_PointerTons1__KeyValue:
		return soap_in_PointerTons1__KeyValue(soap, tag, NULL, "ns1:KeyValue");
	case SOAP_TYPE_PointerTons1__EventRegistrationEvent:
		return soap_in_PointerTons1__EventRegistrationEvent(soap, tag, NULL, "ns1:EventRegistrationEvent");
	case SOAP_TYPE_PointerTons1__Workshop:
		return soap_in_PointerTons1__Workshop(soap, tag, NULL, "ns1:Workshop");
	case SOAP_TYPE_PointerTons1__SearchType:
		return soap_in_PointerTons1__SearchType(soap, tag, NULL, "ns1:SearchType");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_in_PointerTounsignedInt(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:KeyValue"))
		{	*type = SOAP_TYPE_ns1__KeyValue;
			return soap_in_ns1__KeyValue(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EventRegistrationWarning"))
		{	*type = SOAP_TYPE_ns1__EventRegistrationWarning;
			return soap_in_ns1__EventRegistrationWarning(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EventRegistrationEvent"))
		{	*type = SOAP_TYPE_ns1__EventRegistrationEvent;
			return soap_in_ns1__EventRegistrationEvent(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EventRegistration"))
		{	*type = SOAP_TYPE_ns1__EventRegistration;
			return soap_in_ns1__EventRegistration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Workshop"))
		{	*type = SOAP_TYPE_ns1__Workshop;
			return soap_in_ns1__Workshop(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:WorkshopTimeslot"))
		{	*type = SOAP_TYPE_ns1__WorkshopTimeslot;
			return soap_in_ns1__WorkshopTimeslot(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Address"))
		{	*type = SOAP_TYPE_ns1__Address;
			return soap_in_ns1__Address(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EventFee"))
		{	*type = SOAP_TYPE_ns1__EventFee;
			return soap_in_ns1__EventFee(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Event"))
		{	*type = SOAP_TYPE_ns1__Event;
			return soap_in_ns1__Event(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EventBase"))
		{	*type = SOAP_TYPE_ns1__EventBase;
			return soap_in_ns1__EventBase(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EventMini"))
		{	*type = SOAP_TYPE_ns1__EventMini;
			return soap_in_ns1__EventMini(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EventFilter"))
		{	*type = SOAP_TYPE_ns1__EventFilter;
			return soap_in_ns1__EventFilter(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal;
			return soap_in_xsd__decimal(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SearchType"))
		{	*type = SOAP_TYPE_ns1__SearchType;
			return soap_in_ns1__SearchType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:registerResponse"))
		{	*type = SOAP_TYPE__ns1__registerResponse;
			return soap_in__ns1__registerResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:register"))
		{	*type = SOAP_TYPE__ns1__register;
			return soap_in__ns1__register(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSingleEventResponse"))
		{	*type = SOAP_TYPE__ns1__getSingleEventResponse;
			return soap_in__ns1__getSingleEventResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSingleEvent"))
		{	*type = SOAP_TYPE__ns1__getSingleEvent;
			return soap_in__ns1__getSingleEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getAllEventsResponse"))
		{	*type = SOAP_TYPE__ns1__getAllEventsResponse;
			return soap_in__ns1__getAllEventsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getAllEvents"))
		{	*type = SOAP_TYPE__ns1__getAllEvents;
			return soap_in__ns1__getAllEvents(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:dumpTableFieldsResponse"))
		{	*type = SOAP_TYPE__ns1__dumpTableFieldsResponse;
			return soap_in__ns1__dumpTableFieldsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:dumpTableFields"))
		{	*type = SOAP_TYPE__ns1__dumpTableFields;
			return soap_in__ns1__dumpTableFields(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns1__SearchType:
		return soap_out_ns1__SearchType(soap, tag, id, (const enum ns1__SearchType *)ptr, "ns1:SearchType");
	case SOAP_TYPE__ns1__registerResponse:
		return ((_ns1__registerResponse *)ptr)->soap_out(soap, "ns1:registerResponse", id, "");
	case SOAP_TYPE__ns1__register:
		return ((_ns1__register *)ptr)->soap_out(soap, "ns1:register", id, "");
	case SOAP_TYPE__ns1__getSingleEventResponse:
		return ((_ns1__getSingleEventResponse *)ptr)->soap_out(soap, "ns1:getSingleEventResponse", id, "");
	case SOAP_TYPE__ns1__getSingleEvent:
		return ((_ns1__getSingleEvent *)ptr)->soap_out(soap, "ns1:getSingleEvent", id, "");
	case SOAP_TYPE__ns1__getAllEventsResponse:
		return ((_ns1__getAllEventsResponse *)ptr)->soap_out(soap, "ns1:getAllEventsResponse", id, "");
	case SOAP_TYPE__ns1__getAllEvents:
		return ((_ns1__getAllEvents *)ptr)->soap_out(soap, "ns1:getAllEvents", id, "");
	case SOAP_TYPE__ns1__dumpTableFieldsResponse:
		return ((_ns1__dumpTableFieldsResponse *)ptr)->soap_out(soap, "ns1:dumpTableFieldsResponse", id, "");
	case SOAP_TYPE__ns1__dumpTableFields:
		return ((_ns1__dumpTableFields *)ptr)->soap_out(soap, "ns1:dumpTableFields", id, "");
	case SOAP_TYPE_ns1__KeyValue:
		return ((ns1__KeyValue *)ptr)->soap_out(soap, tag, id, "ns1:KeyValue");
	case SOAP_TYPE_ns1__EventRegistrationWarning:
		return ((ns1__EventRegistrationWarning *)ptr)->soap_out(soap, tag, id, "ns1:EventRegistrationWarning");
	case SOAP_TYPE_ns1__EventRegistrationEvent:
		return ((ns1__EventRegistrationEvent *)ptr)->soap_out(soap, tag, id, "ns1:EventRegistrationEvent");
	case SOAP_TYPE_ns1__EventRegistration:
		return ((ns1__EventRegistration *)ptr)->soap_out(soap, tag, id, "ns1:EventRegistration");
	case SOAP_TYPE_ns1__Workshop:
		return ((ns1__Workshop *)ptr)->soap_out(soap, tag, id, "ns1:Workshop");
	case SOAP_TYPE_ns1__WorkshopTimeslot:
		return ((ns1__WorkshopTimeslot *)ptr)->soap_out(soap, tag, id, "ns1:WorkshopTimeslot");
	case SOAP_TYPE_ns1__Address:
		return ((ns1__Address *)ptr)->soap_out(soap, tag, id, "ns1:Address");
	case SOAP_TYPE_ns1__EventFee:
		return ((ns1__EventFee *)ptr)->soap_out(soap, tag, id, "ns1:EventFee");
	case SOAP_TYPE_ns1__Event:
		return ((ns1__Event *)ptr)->soap_out(soap, tag, id, "ns1:Event");
	case SOAP_TYPE_ns1__EventBase:
		return ((ns1__EventBase *)ptr)->soap_out(soap, tag, id, "ns1:EventBase");
	case SOAP_TYPE_ns1__EventMini:
		return ((ns1__EventMini *)ptr)->soap_out(soap, tag, id, "ns1:EventMini");
	case SOAP_TYPE_ns1__EventFilter:
		return ((ns1__EventFilter *)ptr)->soap_out(soap, tag, id, "ns1:EventFilter");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__register:
		return soap_out_PointerTo_ns1__register(soap, tag, id, (_ns1__register *const*)ptr, "ns1:register");
	case SOAP_TYPE_PointerTo_ns1__getSingleEvent:
		return soap_out_PointerTo_ns1__getSingleEvent(soap, tag, id, (_ns1__getSingleEvent *const*)ptr, "ns1:getSingleEvent");
	case SOAP_TYPE_PointerTo_ns1__getAllEvents:
		return soap_out_PointerTo_ns1__getAllEvents(soap, tag, id, (_ns1__getAllEvents *const*)ptr, "ns1:getAllEvents");
	case SOAP_TYPE_PointerTo_ns1__dumpTableFields:
		return soap_out_PointerTo_ns1__dumpTableFields(soap, tag, id, (_ns1__dumpTableFields *const*)ptr, "ns1:dumpTableFields");
	case SOAP_TYPE_PointerTons1__WorkshopTimeslot:
		return soap_out_PointerTons1__WorkshopTimeslot(soap, tag, id, (ns1__WorkshopTimeslot *const*)ptr, "ns1:WorkshopTimeslot");
	case SOAP_TYPE_PointerTons1__Address:
		return soap_out_PointerTons1__Address(soap, tag, id, (ns1__Address *const*)ptr, "ns1:Address");
	case SOAP_TYPE_PointerTons1__EventFee:
		return soap_out_PointerTons1__EventFee(soap, tag, id, (ns1__EventFee *const*)ptr, "ns1:EventFee");
	case SOAP_TYPE_PointerTons1__EventBase:
		return soap_out_PointerTons1__EventBase(soap, tag, id, (ns1__EventBase *const*)ptr, "ns1:EventBase");
	case SOAP_TYPE_PointerTons1__EventRegistrationWarning:
		return soap_out_PointerTons1__EventRegistrationWarning(soap, tag, id, (ns1__EventRegistrationWarning *const*)ptr, "ns1:EventRegistrationWarning");
	case SOAP_TYPE_PointerTons1__EventRegistration:
		return soap_out_PointerTons1__EventRegistration(soap, tag, id, (ns1__EventRegistration *const*)ptr, "ns1:EventRegistration");
	case SOAP_TYPE_PointerTons1__Event:
		return soap_out_PointerTons1__Event(soap, tag, id, (ns1__Event *const*)ptr, "ns1:Event");
	case SOAP_TYPE_PointerTons1__EventMini:
		return soap_out_PointerTons1__EventMini(soap, tag, id, (ns1__EventMini *const*)ptr, "ns1:EventMini");
	case SOAP_TYPE_PointerTons1__EventFilter:
		return soap_out_PointerTons1__EventFilter(soap, tag, id, (ns1__EventFilter *const*)ptr, "ns1:EventFilter");
	case SOAP_TYPE_PointerTons1__KeyValue:
		return soap_out_PointerTons1__KeyValue(soap, tag, id, (ns1__KeyValue *const*)ptr, "ns1:KeyValue");
	case SOAP_TYPE_PointerTons1__EventRegistrationEvent:
		return soap_out_PointerTons1__EventRegistrationEvent(soap, tag, id, (ns1__EventRegistrationEvent *const*)ptr, "ns1:EventRegistrationEvent");
	case SOAP_TYPE_PointerTons1__Workshop:
		return soap_out_PointerTons1__Workshop(soap, tag, id, (ns1__Workshop *const*)ptr, "ns1:Workshop");
	case SOAP_TYPE_PointerTons1__SearchType:
		return soap_out_PointerTons1__SearchType(soap, tag, id, (enum ns1__SearchType *const*)ptr, "ns1:SearchType");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_out_PointerTounsignedInt(soap, tag, id, (unsigned int *const*)ptr, "xsd:unsignedInt");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__registerResponse:
		((_ns1__registerResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__register:
		((_ns1__register *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSingleEventResponse:
		((_ns1__getSingleEventResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSingleEvent:
		((_ns1__getSingleEvent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getAllEventsResponse:
		((_ns1__getAllEventsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getAllEvents:
		((_ns1__getAllEvents *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__dumpTableFieldsResponse:
		((_ns1__dumpTableFieldsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__dumpTableFields:
		((_ns1__dumpTableFields *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__KeyValue:
		((ns1__KeyValue *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__EventRegistrationWarning:
		((ns1__EventRegistrationWarning *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__EventRegistrationEvent:
		((ns1__EventRegistrationEvent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__EventRegistration:
		((ns1__EventRegistration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Workshop:
		((ns1__Workshop *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__WorkshopTimeslot:
		((ns1__WorkshopTimeslot *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Address:
		((ns1__Address *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__EventFee:
		((ns1__EventFee *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Event:
		((ns1__Event *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__EventBase:
		((ns1__EventBase *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__EventMini:
		((ns1__EventMini *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__EventFilter:
		((ns1__EventFilter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns1__register_:
		soap_serialize___ns1__register_(soap, (const struct __ns1__register_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getSingleEvent_:
		soap_serialize___ns1__getSingleEvent_(soap, (const struct __ns1__getSingleEvent_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getAllEvents_:
		soap_serialize___ns1__getAllEvents_(soap, (const struct __ns1__getAllEvents_ *)ptr);
		break;
	case SOAP_TYPE___ns1__dumpTableFields_:
		soap_serialize___ns1__dumpTableFields_(soap, (const struct __ns1__dumpTableFields_ *)ptr);
		break;
	case SOAP_TYPE___ns1__register:
		soap_serialize___ns1__register(soap, (const struct __ns1__register *)ptr);
		break;
	case SOAP_TYPE___ns1__getSingleEvent:
		soap_serialize___ns1__getSingleEvent(soap, (const struct __ns1__getSingleEvent *)ptr);
		break;
	case SOAP_TYPE___ns1__getAllEvents:
		soap_serialize___ns1__getAllEvents(soap, (const struct __ns1__getAllEvents *)ptr);
		break;
	case SOAP_TYPE___ns1__dumpTableFields:
		soap_serialize___ns1__dumpTableFields(soap, (const struct __ns1__dumpTableFields *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__register:
		soap_serialize_PointerTo_ns1__register(soap, (_ns1__register *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getSingleEvent:
		soap_serialize_PointerTo_ns1__getSingleEvent(soap, (_ns1__getSingleEvent *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getAllEvents:
		soap_serialize_PointerTo_ns1__getAllEvents(soap, (_ns1__getAllEvents *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__dumpTableFields:
		soap_serialize_PointerTo_ns1__dumpTableFields(soap, (_ns1__dumpTableFields *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__WorkshopTimeslot:
		soap_serialize_PointerTons1__WorkshopTimeslot(soap, (ns1__WorkshopTimeslot *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Address:
		soap_serialize_PointerTons1__Address(soap, (ns1__Address *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__EventFee:
		soap_serialize_PointerTons1__EventFee(soap, (ns1__EventFee *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__EventBase:
		soap_serialize_PointerTons1__EventBase(soap, (ns1__EventBase *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__EventRegistrationWarning:
		soap_serialize_PointerTons1__EventRegistrationWarning(soap, (ns1__EventRegistrationWarning *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__EventRegistration:
		soap_serialize_PointerTons1__EventRegistration(soap, (ns1__EventRegistration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Event:
		soap_serialize_PointerTons1__Event(soap, (ns1__Event *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__EventMini:
		soap_serialize_PointerTons1__EventMini(soap, (ns1__EventMini *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__EventFilter:
		soap_serialize_PointerTons1__EventFilter(soap, (ns1__EventFilter *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__KeyValue:
		soap_serialize_PointerTons1__KeyValue(soap, (ns1__KeyValue *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__EventRegistrationEvent:
		soap_serialize_PointerTons1__EventRegistrationEvent(soap, (ns1__EventRegistrationEvent *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Workshop:
		soap_serialize_PointerTons1__Workshop(soap, (ns1__Workshop *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__SearchType:
		soap_serialize_PointerTons1__SearchType(soap, (enum ns1__SearchType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedInt:
		soap_serialize_PointerTounsignedInt(soap, (unsigned int *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__EventFilter:
		return (void*)soap_instantiate_ns1__EventFilter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__EventBase:
		return (void*)soap_instantiate_ns1__EventBase(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__EventFee:
		return (void*)soap_instantiate_ns1__EventFee(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Address:
		return (void*)soap_instantiate_ns1__Address(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__WorkshopTimeslot:
		return (void*)soap_instantiate_ns1__WorkshopTimeslot(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Workshop:
		return (void*)soap_instantiate_ns1__Workshop(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__EventRegistration:
		return (void*)soap_instantiate_ns1__EventRegistration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__EventRegistrationEvent:
		return (void*)soap_instantiate_ns1__EventRegistrationEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__EventRegistrationWarning:
		return (void*)soap_instantiate_ns1__EventRegistrationWarning(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__KeyValue:
		return (void*)soap_instantiate_ns1__KeyValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__dumpTableFields:
		return (void*)soap_instantiate__ns1__dumpTableFields(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__dumpTableFieldsResponse:
		return (void*)soap_instantiate__ns1__dumpTableFieldsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getAllEvents:
		return (void*)soap_instantiate__ns1__getAllEvents(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getAllEventsResponse:
		return (void*)soap_instantiate__ns1__getAllEventsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSingleEvent:
		return (void*)soap_instantiate__ns1__getSingleEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSingleEventResponse:
		return (void*)soap_instantiate__ns1__getSingleEventResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__register:
		return (void*)soap_instantiate__ns1__register(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__registerResponse:
		return (void*)soap_instantiate__ns1__registerResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__EventMini:
		return (void*)soap_instantiate_ns1__EventMini(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Event:
		return (void*)soap_instantiate_ns1__Event(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__dumpTableFields:
		return (void*)soap_instantiate___ns1__dumpTableFields(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getAllEvents:
		return (void*)soap_instantiate___ns1__getAllEvents(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSingleEvent:
		return (void*)soap_instantiate___ns1__getSingleEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__register:
		return (void*)soap_instantiate___ns1__register(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__dumpTableFields_:
		return (void*)soap_instantiate___ns1__dumpTableFields_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getAllEvents_:
		return (void*)soap_instantiate___ns1__getAllEvents_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSingleEvent_:
		return (void*)soap_instantiate___ns1__getSingleEvent_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__register_:
		return (void*)soap_instantiate___ns1__register_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkshopTimeslot:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventFee:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__EventFee(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventBase:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__EventBase(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationWarning:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventMini:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__EventMini(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__KeyValue:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__KeyValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfunsignedInt:
		return (void*)soap_instantiate_std__vectorTemplateOfunsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationEvent:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__Workshop:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__Workshop(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns1__EventFilter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__EventFilter*>(p->ptr), ns1__EventFilter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__EventFilter*>(p->ptr), ns1__EventFilter);
		break;
	case SOAP_TYPE_ns1__EventBase:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__EventBase*>(p->ptr), ns1__EventBase);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__EventBase*>(p->ptr), ns1__EventBase);
		break;
	case SOAP_TYPE_ns1__EventFee:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__EventFee*>(p->ptr), ns1__EventFee);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__EventFee*>(p->ptr), ns1__EventFee);
		break;
	case SOAP_TYPE_ns1__Address:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__Address*>(p->ptr), ns1__Address);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__Address*>(p->ptr), ns1__Address);
		break;
	case SOAP_TYPE_ns1__WorkshopTimeslot:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__WorkshopTimeslot*>(p->ptr), ns1__WorkshopTimeslot);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__WorkshopTimeslot*>(p->ptr), ns1__WorkshopTimeslot);
		break;
	case SOAP_TYPE_ns1__Workshop:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__Workshop*>(p->ptr), ns1__Workshop);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__Workshop*>(p->ptr), ns1__Workshop);
		break;
	case SOAP_TYPE_ns1__EventRegistration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__EventRegistration*>(p->ptr), ns1__EventRegistration);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__EventRegistration*>(p->ptr), ns1__EventRegistration);
		break;
	case SOAP_TYPE_ns1__EventRegistrationEvent:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__EventRegistrationEvent*>(p->ptr), ns1__EventRegistrationEvent);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__EventRegistrationEvent*>(p->ptr), ns1__EventRegistrationEvent);
		break;
	case SOAP_TYPE_ns1__EventRegistrationWarning:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__EventRegistrationWarning*>(p->ptr), ns1__EventRegistrationWarning);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__EventRegistrationWarning*>(p->ptr), ns1__EventRegistrationWarning);
		break;
	case SOAP_TYPE_ns1__KeyValue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__KeyValue*>(p->ptr), ns1__KeyValue);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__KeyValue*>(p->ptr), ns1__KeyValue);
		break;
	case SOAP_TYPE__ns1__dumpTableFields:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__dumpTableFields*>(p->ptr), _ns1__dumpTableFields);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__dumpTableFields*>(p->ptr), _ns1__dumpTableFields);
		break;
	case SOAP_TYPE__ns1__dumpTableFieldsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__dumpTableFieldsResponse*>(p->ptr), _ns1__dumpTableFieldsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__dumpTableFieldsResponse*>(p->ptr), _ns1__dumpTableFieldsResponse);
		break;
	case SOAP_TYPE__ns1__getAllEvents:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getAllEvents*>(p->ptr), _ns1__getAllEvents);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getAllEvents*>(p->ptr), _ns1__getAllEvents);
		break;
	case SOAP_TYPE__ns1__getAllEventsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getAllEventsResponse*>(p->ptr), _ns1__getAllEventsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getAllEventsResponse*>(p->ptr), _ns1__getAllEventsResponse);
		break;
	case SOAP_TYPE__ns1__getSingleEvent:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getSingleEvent*>(p->ptr), _ns1__getSingleEvent);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getSingleEvent*>(p->ptr), _ns1__getSingleEvent);
		break;
	case SOAP_TYPE__ns1__getSingleEventResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getSingleEventResponse*>(p->ptr), _ns1__getSingleEventResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getSingleEventResponse*>(p->ptr), _ns1__getSingleEventResponse);
		break;
	case SOAP_TYPE__ns1__register:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__register*>(p->ptr), _ns1__register);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__register*>(p->ptr), _ns1__register);
		break;
	case SOAP_TYPE__ns1__registerResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__registerResponse*>(p->ptr), _ns1__registerResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__registerResponse*>(p->ptr), _ns1__registerResponse);
		break;
	case SOAP_TYPE_ns1__EventMini:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__EventMini*>(p->ptr), ns1__EventMini);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__EventMini*>(p->ptr), ns1__EventMini);
		break;
	case SOAP_TYPE_ns1__Event:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__Event*>(p->ptr), ns1__Event);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__Event*>(p->ptr), ns1__Event);
		break;
	case SOAP_TYPE___ns1__dumpTableFields:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__dumpTableFields*>(p->ptr), struct __ns1__dumpTableFields);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__dumpTableFields*>(p->ptr), struct __ns1__dumpTableFields);
		break;
	case SOAP_TYPE___ns1__getAllEvents:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getAllEvents*>(p->ptr), struct __ns1__getAllEvents);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getAllEvents*>(p->ptr), struct __ns1__getAllEvents);
		break;
	case SOAP_TYPE___ns1__getSingleEvent:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getSingleEvent*>(p->ptr), struct __ns1__getSingleEvent);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getSingleEvent*>(p->ptr), struct __ns1__getSingleEvent);
		break;
	case SOAP_TYPE___ns1__register:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__register*>(p->ptr), struct __ns1__register);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__register*>(p->ptr), struct __ns1__register);
		break;
	case SOAP_TYPE___ns1__dumpTableFields_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__dumpTableFields_*>(p->ptr), struct __ns1__dumpTableFields_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__dumpTableFields_*>(p->ptr), struct __ns1__dumpTableFields_);
		break;
	case SOAP_TYPE___ns1__getAllEvents_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getAllEvents_*>(p->ptr), struct __ns1__getAllEvents_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getAllEvents_*>(p->ptr), struct __ns1__getAllEvents_);
		break;
	case SOAP_TYPE___ns1__getSingleEvent_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getSingleEvent_*>(p->ptr), struct __ns1__getSingleEvent_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getSingleEvent_*>(p->ptr), struct __ns1__getSingleEvent_);
		break;
	case SOAP_TYPE___ns1__register_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__register_*>(p->ptr), struct __ns1__register_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__register_*>(p->ptr), struct __ns1__register_);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkshopTimeslot:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__WorkshopTimeslot *> *>(p->ptr), std::vector<ns1__WorkshopTimeslot *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__WorkshopTimeslot *> *>(p->ptr), std::vector<ns1__WorkshopTimeslot *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventFee:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__EventFee *> *>(p->ptr), std::vector<ns1__EventFee *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__EventFee *> *>(p->ptr), std::vector<ns1__EventFee *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventBase:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__EventBase *> *>(p->ptr), std::vector<ns1__EventBase *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__EventBase *> *>(p->ptr), std::vector<ns1__EventBase *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationWarning:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__EventRegistrationWarning *> *>(p->ptr), std::vector<ns1__EventRegistrationWarning *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__EventRegistrationWarning *> *>(p->ptr), std::vector<ns1__EventRegistrationWarning *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventMini:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__EventMini *> *>(p->ptr), std::vector<ns1__EventMini *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__EventMini *> *>(p->ptr), std::vector<ns1__EventMini *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__KeyValue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__KeyValue *> *>(p->ptr), std::vector<ns1__KeyValue *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__KeyValue *> *>(p->ptr), std::vector<ns1__KeyValue *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfunsignedInt:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<unsigned int> *>(p->ptr), std::vector<unsigned int> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<unsigned int> *>(p->ptr), std::vector<unsigned int> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationEvent:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__EventRegistrationEvent *> *>(p->ptr), std::vector<ns1__EventRegistrationEvent *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__EventRegistrationEvent *> *>(p->ptr), std::vector<ns1__EventRegistrationEvent *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__Workshop:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__Workshop *> *>(p->ptr), std::vector<ns1__Workshop *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__Workshop *> *>(p->ptr), std::vector<ns1__Workshop *> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{

		case SOAP_TYPE_ns1__EventMini: t = SOAP_TYPE_ns1__EventBase; break;
		case SOAP_TYPE_ns1__Event: t = SOAP_TYPE_ns1__EventMini; break;
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkshopTimeslot:
		if (t == SOAP_TYPE_ns1__WorkshopTimeslot || soap_fbase(t, SOAP_TYPE_ns1__WorkshopTimeslot))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__WorkshopTimeslot *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__WorkshopTimeslot *> *)p)[index] = *(ns1__WorkshopTimeslot **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventFee:
		if (t == SOAP_TYPE_ns1__EventFee || soap_fbase(t, SOAP_TYPE_ns1__EventFee))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__EventFee *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__EventFee *> *)p)[index] = *(ns1__EventFee **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventBase:
		if (t == SOAP_TYPE_ns1__EventBase || soap_fbase(t, SOAP_TYPE_ns1__EventBase))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__EventBase *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__EventBase *> *)p)[index] = *(ns1__EventBase **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationWarning:
		if (t == SOAP_TYPE_ns1__EventRegistrationWarning || soap_fbase(t, SOAP_TYPE_ns1__EventRegistrationWarning))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__EventRegistrationWarning *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__EventRegistrationWarning *> *)p)[index] = *(ns1__EventRegistrationWarning **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventMini:
		if (t == SOAP_TYPE_ns1__EventMini || soap_fbase(t, SOAP_TYPE_ns1__EventMini))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__EventMini *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__EventMini *> *)p)[index] = *(ns1__EventMini **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__KeyValue:
		if (t == SOAP_TYPE_ns1__KeyValue || soap_fbase(t, SOAP_TYPE_ns1__KeyValue))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__KeyValue *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__KeyValue *> *)p)[index] = *(ns1__KeyValue **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfunsignedInt:
		if (t == SOAP_TYPE_unsignedInt)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<unsigned int>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<unsigned int> *)p)[index] = *(unsigned int *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationEvent:
		if (t == SOAP_TYPE_ns1__EventRegistrationEvent || soap_fbase(t, SOAP_TYPE_ns1__EventRegistrationEvent))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__EventRegistrationEvent *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__EventRegistrationEvent *> *)p)[index] = *(ns1__EventRegistrationEvent **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__Workshop:
		if (t == SOAP_TYPE_ns1__Workshop || soap_fbase(t, SOAP_TYPE_ns1__Workshop))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__Workshop *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__Workshop *> *)p)[index] = *(ns1__Workshop **)q;
		}
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__EventFilter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__EventFilter type=%d location=%p object=%p\n", t, p, q));
		*(ns1__EventFilter*)p = *(ns1__EventFilter*)q;
		break;
	case SOAP_TYPE_ns1__EventBase:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__EventBase type=%d location=%p object=%p\n", t, p, q));
		*(ns1__EventBase*)p = *(ns1__EventBase*)q;
		break;
	case SOAP_TYPE_ns1__EventFee:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__EventFee type=%d location=%p object=%p\n", t, p, q));
		*(ns1__EventFee*)p = *(ns1__EventFee*)q;
		break;
	case SOAP_TYPE_ns1__Address:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__Address type=%d location=%p object=%p\n", t, p, q));
		*(ns1__Address*)p = *(ns1__Address*)q;
		break;
	case SOAP_TYPE_ns1__WorkshopTimeslot:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__WorkshopTimeslot type=%d location=%p object=%p\n", t, p, q));
		*(ns1__WorkshopTimeslot*)p = *(ns1__WorkshopTimeslot*)q;
		break;
	case SOAP_TYPE_ns1__Workshop:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__Workshop type=%d location=%p object=%p\n", t, p, q));
		*(ns1__Workshop*)p = *(ns1__Workshop*)q;
		break;
	case SOAP_TYPE_ns1__EventRegistration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__EventRegistration type=%d location=%p object=%p\n", t, p, q));
		*(ns1__EventRegistration*)p = *(ns1__EventRegistration*)q;
		break;
	case SOAP_TYPE_ns1__EventRegistrationEvent:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__EventRegistrationEvent type=%d location=%p object=%p\n", t, p, q));
		*(ns1__EventRegistrationEvent*)p = *(ns1__EventRegistrationEvent*)q;
		break;
	case SOAP_TYPE_ns1__EventRegistrationWarning:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__EventRegistrationWarning type=%d location=%p object=%p\n", t, p, q));
		*(ns1__EventRegistrationWarning*)p = *(ns1__EventRegistrationWarning*)q;
		break;
	case SOAP_TYPE_ns1__KeyValue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__KeyValue type=%d location=%p object=%p\n", t, p, q));
		*(ns1__KeyValue*)p = *(ns1__KeyValue*)q;
		break;
	case SOAP_TYPE__ns1__dumpTableFields:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__dumpTableFields type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__dumpTableFields*)p = *(_ns1__dumpTableFields*)q;
		break;
	case SOAP_TYPE__ns1__dumpTableFieldsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__dumpTableFieldsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__dumpTableFieldsResponse*)p = *(_ns1__dumpTableFieldsResponse*)q;
		break;
	case SOAP_TYPE__ns1__getAllEvents:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getAllEvents type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getAllEvents*)p = *(_ns1__getAllEvents*)q;
		break;
	case SOAP_TYPE__ns1__getAllEventsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getAllEventsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getAllEventsResponse*)p = *(_ns1__getAllEventsResponse*)q;
		break;
	case SOAP_TYPE__ns1__getSingleEvent:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getSingleEvent type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getSingleEvent*)p = *(_ns1__getSingleEvent*)q;
		break;
	case SOAP_TYPE__ns1__getSingleEventResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getSingleEventResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getSingleEventResponse*)p = *(_ns1__getSingleEventResponse*)q;
		break;
	case SOAP_TYPE__ns1__register:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__register type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__register*)p = *(_ns1__register*)q;
		break;
	case SOAP_TYPE__ns1__registerResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__registerResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__registerResponse*)p = *(_ns1__registerResponse*)q;
		break;
	case SOAP_TYPE_ns1__EventMini:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__EventMini type=%d location=%p object=%p\n", t, p, q));
		*(ns1__EventMini*)p = *(ns1__EventMini*)q;
		break;
	case SOAP_TYPE_ns1__Event:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__Event type=%d location=%p object=%p\n", t, p, q));
		*(ns1__Event*)p = *(ns1__Event*)q;
		break;
	case SOAP_TYPE___ns1__dumpTableFields:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__dumpTableFields type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__dumpTableFields*)p = *(struct __ns1__dumpTableFields*)q;
		break;
	case SOAP_TYPE___ns1__getAllEvents:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getAllEvents type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getAllEvents*)p = *(struct __ns1__getAllEvents*)q;
		break;
	case SOAP_TYPE___ns1__getSingleEvent:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getSingleEvent type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getSingleEvent*)p = *(struct __ns1__getSingleEvent*)q;
		break;
	case SOAP_TYPE___ns1__register:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__register type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__register*)p = *(struct __ns1__register*)q;
		break;
	case SOAP_TYPE___ns1__dumpTableFields_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__dumpTableFields_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__dumpTableFields_*)p = *(struct __ns1__dumpTableFields_*)q;
		break;
	case SOAP_TYPE___ns1__getAllEvents_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getAllEvents_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getAllEvents_*)p = *(struct __ns1__getAllEvents_*)q;
		break;
	case SOAP_TYPE___ns1__getSingleEvent_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getSingleEvent_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getSingleEvent_*)p = *(struct __ns1__getSingleEvent_*)q;
		break;
	case SOAP_TYPE___ns1__register_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__register_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__register_*)p = *(struct __ns1__register_*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_xsd__decimal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_xsd__unsignedByte(soap, tag ? tag : "xsd:unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns1__SearchType[] =
{	{ (LONG64)ns1__SearchType__Exact, "Exact" },
	{ (LONG64)ns1__SearchType__Start, "Start" },
	{ (LONG64)ns1__SearchType__Middle, "Middle" },
	{ (LONG64)ns1__SearchType__End, "End" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__SearchType2s(struct soap *soap, enum ns1__SearchType n)
{
	const char *s = soap_code_str(soap_codes_ns1__SearchType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SearchType(struct soap *soap, const char *tag, int id, const enum ns1__SearchType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SearchType), type) || soap_send(soap, soap_ns1__SearchType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__SearchType(struct soap *soap, const char *s, enum ns1__SearchType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns1__SearchType, s);
	if (map)
		*a = (enum ns1__SearchType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__SearchType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__SearchType * SOAP_FMAC4 soap_in_ns1__SearchType(struct soap *soap, const char *tag, enum ns1__SearchType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__SearchType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SearchType, sizeof(enum ns1__SearchType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns1__SearchType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns1__SearchType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SearchType, SOAP_TYPE_ns1__SearchType, sizeof(enum ns1__SearchType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns1__SearchType * SOAP_FMAC4 soap_new_ns1__SearchType(struct soap *soap, int n)
{
	enum ns1__SearchType *a = static_cast<enum ns1__SearchType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns1__SearchType)));
	for (enum ns1__SearchType *p = a; p && n--; ++p)
		soap_default_ns1__SearchType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SearchType(struct soap *soap, const enum ns1__SearchType *a, const char *tag, const char *type)
{
	if (soap_out_ns1__SearchType(soap, tag ? tag : "ns1:SearchType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns1__SearchType * SOAP_FMAC4 soap_get_ns1__SearchType(struct soap *soap, enum ns1__SearchType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SearchType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__registerResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(soap, &this->_ns1__registerResponse::registerResult);
}

void _ns1__registerResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(soap, &this->_ns1__registerResponse::registerResult);
#endif
}

int _ns1__registerResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__registerResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__registerResponse(struct soap *soap, const char *tag, int id, const _ns1__registerResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__registerResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:registerResult");
	if (soap_out_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(soap, "ns1:registerResult", -1, &a->_ns1__registerResponse::registerResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__registerResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__registerResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__registerResponse * SOAP_FMAC4 soap_in__ns1__registerResponse(struct soap *soap, const char *tag, _ns1__registerResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__registerResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__registerResponse, sizeof(_ns1__registerResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__registerResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__registerResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(soap, "ns1:registerResult", &a->_ns1__registerResponse::registerResult, "ns1:EventRegistrationWarning"))
					continue;
			}
			soap_check_result(soap, "ns1:registerResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__registerResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__registerResponse, SOAP_TYPE__ns1__registerResponse, sizeof(_ns1__registerResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__registerResponse * SOAP_FMAC2 soap_instantiate__ns1__registerResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__registerResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__registerResponse *p;
	size_t k = sizeof(_ns1__registerResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__registerResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__registerResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__registerResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__registerResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__registerResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__registerResponse(soap, tag ? tag : "ns1:registerResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__registerResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__registerResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__registerResponse * SOAP_FMAC4 soap_get__ns1__registerResponse(struct soap *soap, _ns1__registerResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__registerResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__register::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__register::registrationData = NULL;
}

void _ns1__register::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__EventRegistration(soap, &this->_ns1__register::registrationData);
#endif
}

int _ns1__register::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__register(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__register(struct soap *soap, const char *tag, int id, const _ns1__register *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__register), type))
		return soap->error;
	if (soap_out_PointerTons1__EventRegistration(soap, "ns1:registrationData", -1, &a->_ns1__register::registrationData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__register::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__register(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__register * SOAP_FMAC4 soap_in__ns1__register(struct soap *soap, const char *tag, _ns1__register *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__register*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__register, sizeof(_ns1__register), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__register)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__register *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_registrationData1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_registrationData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__EventRegistration(soap, "ns1:registrationData", &a->_ns1__register::registrationData, "ns1:EventRegistration"))
				{	soap_flag_registrationData1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__register *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__register, SOAP_TYPE__ns1__register, sizeof(_ns1__register), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__register * SOAP_FMAC2 soap_instantiate__ns1__register(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__register(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__register *p;
	size_t k = sizeof(_ns1__register);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__register, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__register);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__register, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__register location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__register::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__register(soap, tag ? tag : "ns1:register", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__register::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__register(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__register * SOAP_FMAC4 soap_get__ns1__register(struct soap *soap, _ns1__register *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getSingleEventResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getSingleEventResponse::getSingleEventResult = NULL;
}

void _ns1__getSingleEventResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__Event(soap, &this->_ns1__getSingleEventResponse::getSingleEventResult);
#endif
}

int _ns1__getSingleEventResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSingleEventResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSingleEventResponse(struct soap *soap, const char *tag, int id, const _ns1__getSingleEventResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSingleEventResponse), type))
		return soap->error;
	if (a->getSingleEventResult)
		soap_element_result(soap, "ns1:getSingleEventResult");
	if (soap_out_PointerTons1__Event(soap, "ns1:getSingleEventResult", -1, &a->_ns1__getSingleEventResponse::getSingleEventResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSingleEventResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__getSingleEventResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSingleEventResponse * SOAP_FMAC4 soap_in__ns1__getSingleEventResponse(struct soap *soap, const char *tag, _ns1__getSingleEventResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSingleEventResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSingleEventResponse, sizeof(_ns1__getSingleEventResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getSingleEventResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getSingleEventResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getSingleEventResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getSingleEventResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__Event(soap, "ns1:getSingleEventResult", &a->_ns1__getSingleEventResponse::getSingleEventResult, "ns1:Event"))
				{	soap_flag_getSingleEventResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:getSingleEventResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSingleEventResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSingleEventResponse, SOAP_TYPE__ns1__getSingleEventResponse, sizeof(_ns1__getSingleEventResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getSingleEventResponse * SOAP_FMAC2 soap_instantiate__ns1__getSingleEventResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSingleEventResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getSingleEventResponse *p;
	size_t k = sizeof(_ns1__getSingleEventResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getSingleEventResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getSingleEventResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getSingleEventResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getSingleEventResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getSingleEventResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getSingleEventResponse(soap, tag ? tag : "ns1:getSingleEventResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSingleEventResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSingleEventResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSingleEventResponse * SOAP_FMAC4 soap_get__ns1__getSingleEventResponse(struct soap *soap, _ns1__getSingleEventResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSingleEventResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getSingleEvent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_ns1__getSingleEvent::id);
}

void _ns1__getSingleEvent::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns1__getSingleEvent::id, SOAP_TYPE_unsignedInt);
#endif
}

int _ns1__getSingleEvent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSingleEvent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSingleEvent(struct soap *soap, const char *tag, int id, const _ns1__getSingleEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSingleEvent), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:id", -1, &a->_ns1__getSingleEvent::id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSingleEvent::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__getSingleEvent(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSingleEvent * SOAP_FMAC4 soap_in__ns1__getSingleEvent(struct soap *soap, const char *tag, _ns1__getSingleEvent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSingleEvent*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSingleEvent, sizeof(_ns1__getSingleEvent), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getSingleEvent)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getSingleEvent *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_id1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_unsignedInt(soap, "ns1:id", &a->_ns1__getSingleEvent::id, "xsd:unsignedInt"))
				{	soap_flag_id1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__getSingleEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSingleEvent, SOAP_TYPE__ns1__getSingleEvent, sizeof(_ns1__getSingleEvent), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getSingleEvent * SOAP_FMAC2 soap_instantiate__ns1__getSingleEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSingleEvent(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getSingleEvent *p;
	size_t k = sizeof(_ns1__getSingleEvent);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getSingleEvent, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getSingleEvent);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getSingleEvent, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getSingleEvent location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getSingleEvent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getSingleEvent(soap, tag ? tag : "ns1:getSingleEvent", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSingleEvent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSingleEvent(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSingleEvent * SOAP_FMAC4 soap_get__ns1__getSingleEvent(struct soap *soap, _ns1__getSingleEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSingleEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getAllEventsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__EventMini(soap, &this->_ns1__getAllEventsResponse::getAllEventsResult);
}

void _ns1__getAllEventsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__EventMini(soap, &this->_ns1__getAllEventsResponse::getAllEventsResult);
#endif
}

int _ns1__getAllEventsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getAllEventsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getAllEventsResponse(struct soap *soap, const char *tag, int id, const _ns1__getAllEventsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getAllEventsResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:getAllEventsResult");
	if (soap_out_std__vectorTemplateOfPointerTons1__EventMini(soap, "ns1:getAllEventsResult", -1, &a->_ns1__getAllEventsResponse::getAllEventsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getAllEventsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__getAllEventsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getAllEventsResponse * SOAP_FMAC4 soap_in__ns1__getAllEventsResponse(struct soap *soap, const char *tag, _ns1__getAllEventsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getAllEventsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getAllEventsResponse, sizeof(_ns1__getAllEventsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getAllEventsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getAllEventsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__EventMini(soap, "ns1:getAllEventsResult", &a->_ns1__getAllEventsResponse::getAllEventsResult, "ns1:EventMini"))
					continue;
			}
			soap_check_result(soap, "ns1:getAllEventsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getAllEventsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getAllEventsResponse, SOAP_TYPE__ns1__getAllEventsResponse, sizeof(_ns1__getAllEventsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getAllEventsResponse * SOAP_FMAC2 soap_instantiate__ns1__getAllEventsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getAllEventsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getAllEventsResponse *p;
	size_t k = sizeof(_ns1__getAllEventsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getAllEventsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getAllEventsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getAllEventsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getAllEventsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getAllEventsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getAllEventsResponse(soap, tag ? tag : "ns1:getAllEventsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getAllEventsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getAllEventsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getAllEventsResponse * SOAP_FMAC4 soap_get__ns1__getAllEventsResponse(struct soap *soap, _ns1__getAllEventsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getAllEventsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getAllEvents::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getAllEvents::filter = NULL;
}

void _ns1__getAllEvents::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__EventFilter(soap, &this->_ns1__getAllEvents::filter);
#endif
}

int _ns1__getAllEvents::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getAllEvents(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getAllEvents(struct soap *soap, const char *tag, int id, const _ns1__getAllEvents *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getAllEvents), type))
		return soap->error;
	if (!a->_ns1__getAllEvents::filter)
	{	if (soap_element_nil(soap, "ns1:filter"))
			return soap->error;
	}
	else if (soap_out_PointerTons1__EventFilter(soap, "ns1:filter", -1, &a->_ns1__getAllEvents::filter, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getAllEvents::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__getAllEvents(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getAllEvents * SOAP_FMAC4 soap_in__ns1__getAllEvents(struct soap *soap, const char *tag, _ns1__getAllEvents *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getAllEvents*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getAllEvents, sizeof(_ns1__getAllEvents), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getAllEvents)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getAllEvents *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_filter1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_filter1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__EventFilter(soap, "ns1:filter", &a->_ns1__getAllEvents::filter, "ns1:EventFilter"))
				{	soap_flag_filter1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_filter1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__getAllEvents *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getAllEvents, SOAP_TYPE__ns1__getAllEvents, sizeof(_ns1__getAllEvents), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getAllEvents * SOAP_FMAC2 soap_instantiate__ns1__getAllEvents(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getAllEvents(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getAllEvents *p;
	size_t k = sizeof(_ns1__getAllEvents);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getAllEvents, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getAllEvents);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getAllEvents, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getAllEvents location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getAllEvents::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getAllEvents(soap, tag ? tag : "ns1:getAllEvents", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getAllEvents::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getAllEvents(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getAllEvents * SOAP_FMAC4 soap_get__ns1__getAllEvents(struct soap *soap, _ns1__getAllEvents *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getAllEvents(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__dumpTableFieldsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__dumpTableFieldsResponse::dumpTableFieldsResult = NULL;
}

void _ns1__dumpTableFieldsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__dumpTableFieldsResponse::dumpTableFieldsResult);
#endif
}

int _ns1__dumpTableFieldsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__dumpTableFieldsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__dumpTableFieldsResponse(struct soap *soap, const char *tag, int id, const _ns1__dumpTableFieldsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__dumpTableFieldsResponse), type))
		return soap->error;
	if (a->dumpTableFieldsResult)
		soap_element_result(soap, "ns1:dumpTableFieldsResult");
	if (soap_out_PointerTostd__string(soap, "ns1:dumpTableFieldsResult", -1, &a->_ns1__dumpTableFieldsResponse::dumpTableFieldsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__dumpTableFieldsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__dumpTableFieldsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__dumpTableFieldsResponse * SOAP_FMAC4 soap_in__ns1__dumpTableFieldsResponse(struct soap *soap, const char *tag, _ns1__dumpTableFieldsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__dumpTableFieldsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__dumpTableFieldsResponse, sizeof(_ns1__dumpTableFieldsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__dumpTableFieldsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__dumpTableFieldsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_dumpTableFieldsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dumpTableFieldsResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:dumpTableFieldsResult", &a->_ns1__dumpTableFieldsResponse::dumpTableFieldsResult, "xsd:string"))
				{	soap_flag_dumpTableFieldsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:dumpTableFieldsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__dumpTableFieldsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__dumpTableFieldsResponse, SOAP_TYPE__ns1__dumpTableFieldsResponse, sizeof(_ns1__dumpTableFieldsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__dumpTableFieldsResponse * SOAP_FMAC2 soap_instantiate__ns1__dumpTableFieldsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__dumpTableFieldsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__dumpTableFieldsResponse *p;
	size_t k = sizeof(_ns1__dumpTableFieldsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__dumpTableFieldsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__dumpTableFieldsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__dumpTableFieldsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__dumpTableFieldsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__dumpTableFieldsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__dumpTableFieldsResponse(soap, tag ? tag : "ns1:dumpTableFieldsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__dumpTableFieldsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__dumpTableFieldsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__dumpTableFieldsResponse * SOAP_FMAC4 soap_get__ns1__dumpTableFieldsResponse(struct soap *soap, _ns1__dumpTableFieldsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__dumpTableFieldsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__dumpTableFields::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__dumpTableFields::tableName = NULL;
}

void _ns1__dumpTableFields::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__dumpTableFields::tableName);
#endif
}

int _ns1__dumpTableFields::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__dumpTableFields(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__dumpTableFields(struct soap *soap, const char *tag, int id, const _ns1__dumpTableFields *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__dumpTableFields), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:tableName", -1, &a->_ns1__dumpTableFields::tableName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__dumpTableFields::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__dumpTableFields(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__dumpTableFields * SOAP_FMAC4 soap_in__ns1__dumpTableFields(struct soap *soap, const char *tag, _ns1__dumpTableFields *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__dumpTableFields*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__dumpTableFields, sizeof(_ns1__dumpTableFields), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__dumpTableFields)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__dumpTableFields *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_tableName1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tableName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:tableName", &a->_ns1__dumpTableFields::tableName, "xsd:string"))
				{	soap_flag_tableName1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__dumpTableFields *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__dumpTableFields, SOAP_TYPE__ns1__dumpTableFields, sizeof(_ns1__dumpTableFields), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__dumpTableFields * SOAP_FMAC2 soap_instantiate__ns1__dumpTableFields(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__dumpTableFields(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__dumpTableFields *p;
	size_t k = sizeof(_ns1__dumpTableFields);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__dumpTableFields, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__dumpTableFields);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__dumpTableFields, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__dumpTableFields location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__dumpTableFields::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__dumpTableFields(soap, tag ? tag : "ns1:dumpTableFields", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__dumpTableFields::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__dumpTableFields(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__dumpTableFields * SOAP_FMAC4 soap_get__ns1__dumpTableFields(struct soap *soap, _ns1__dumpTableFields *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__dumpTableFields(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__KeyValue::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__KeyValue::key = NULL;
	this->ns1__KeyValue::value = NULL;
}

void ns1__KeyValue::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__KeyValue::key);
	soap_serialize_PointerTostd__string(soap, &this->ns1__KeyValue::value);
#endif
}

int ns1__KeyValue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__KeyValue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__KeyValue(struct soap *soap, const char *tag, int id, const ns1__KeyValue *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__KeyValue), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:key", -1, &a->ns1__KeyValue::key, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:value", -1, &a->ns1__KeyValue::value, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__KeyValue::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__KeyValue(soap, tag, this, type);
}

SOAP_FMAC3 ns1__KeyValue * SOAP_FMAC4 soap_in_ns1__KeyValue(struct soap *soap, const char *tag, ns1__KeyValue *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__KeyValue*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__KeyValue, sizeof(ns1__KeyValue), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__KeyValue)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__KeyValue *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_key1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:key", &a->ns1__KeyValue::key, "xsd:string"))
				{	soap_flag_key1--;
					continue;
				}
			}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:value", &a->ns1__KeyValue::value, "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__KeyValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__KeyValue, SOAP_TYPE_ns1__KeyValue, sizeof(ns1__KeyValue), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__KeyValue * SOAP_FMAC2 soap_instantiate_ns1__KeyValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__KeyValue(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__KeyValue *p;
	size_t k = sizeof(ns1__KeyValue);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__KeyValue, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__KeyValue);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__KeyValue, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__KeyValue location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__KeyValue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__KeyValue(soap, tag ? tag : "ns1:KeyValue", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__KeyValue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__KeyValue(soap, this, tag, type);
}

SOAP_FMAC3 ns1__KeyValue * SOAP_FMAC4 soap_get_ns1__KeyValue(struct soap *soap, ns1__KeyValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__KeyValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__EventRegistrationWarning::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->ns1__EventRegistrationWarning::eventId);
	this->ns1__EventRegistrationWarning::code = NULL;
	this->ns1__EventRegistrationWarning::warningMessage = NULL;
	soap_default_std__vectorTemplateOfPointerTons1__KeyValue(soap, &this->ns1__EventRegistrationWarning::additionalData);
}

void ns1__EventRegistrationWarning::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__EventRegistrationWarning::eventId, SOAP_TYPE_unsignedInt);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistrationWarning::code);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistrationWarning::warningMessage);
	soap_serialize_std__vectorTemplateOfPointerTons1__KeyValue(soap, &this->ns1__EventRegistrationWarning::additionalData);
#endif
}

int ns1__EventRegistrationWarning::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__EventRegistrationWarning(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventRegistrationWarning(struct soap *soap, const char *tag, int id, const ns1__EventRegistrationWarning *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__EventRegistrationWarning), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:eventId", -1, &a->ns1__EventRegistrationWarning::eventId, ""))
		return soap->error;
	if (!a->ns1__EventRegistrationWarning::code)
	{	if (soap_element_nil(soap, "ns1:code"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:code", -1, &a->ns1__EventRegistrationWarning::code, ""))
		return soap->error;
	if (!a->ns1__EventRegistrationWarning::warningMessage)
	{	if (soap_element_nil(soap, "ns1:warningMessage"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:warningMessage", -1, &a->ns1__EventRegistrationWarning::warningMessage, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__KeyValue(soap, "ns1:additionalData", -1, &a->ns1__EventRegistrationWarning::additionalData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__EventRegistrationWarning::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__EventRegistrationWarning(soap, tag, this, type);
}

SOAP_FMAC3 ns1__EventRegistrationWarning * SOAP_FMAC4 soap_in_ns1__EventRegistrationWarning(struct soap *soap, const char *tag, ns1__EventRegistrationWarning *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__EventRegistrationWarning*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EventRegistrationWarning, sizeof(ns1__EventRegistrationWarning), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__EventRegistrationWarning)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__EventRegistrationWarning *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_eventId1 = 1;
	size_t soap_flag_code1 = 1;
	size_t soap_flag_warningMessage1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_unsignedInt(soap, "ns1:eventId", &a->ns1__EventRegistrationWarning::eventId, "xsd:unsignedInt"))
				{	soap_flag_eventId1--;
					continue;
				}
			}
			if (soap_flag_code1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:code", &a->ns1__EventRegistrationWarning::code, "xsd:string"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_warningMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:warningMessage", &a->ns1__EventRegistrationWarning::warningMessage, "xsd:string"))
				{	soap_flag_warningMessage1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__KeyValue(soap, "ns1:additionalData", &a->ns1__EventRegistrationWarning::additionalData, "ns1:KeyValue"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_eventId1 > 0 || soap_flag_code1 > 0 || soap_flag_warningMessage1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__EventRegistrationWarning *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__EventRegistrationWarning, SOAP_TYPE_ns1__EventRegistrationWarning, sizeof(ns1__EventRegistrationWarning), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__EventRegistrationWarning * SOAP_FMAC2 soap_instantiate_ns1__EventRegistrationWarning(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__EventRegistrationWarning(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__EventRegistrationWarning *p;
	size_t k = sizeof(ns1__EventRegistrationWarning);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__EventRegistrationWarning, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__EventRegistrationWarning);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__EventRegistrationWarning, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__EventRegistrationWarning location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__EventRegistrationWarning::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__EventRegistrationWarning(soap, tag ? tag : "ns1:EventRegistrationWarning", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__EventRegistrationWarning::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__EventRegistrationWarning(soap, this, tag, type);
}

SOAP_FMAC3 ns1__EventRegistrationWarning * SOAP_FMAC4 soap_get_ns1__EventRegistrationWarning(struct soap *soap, ns1__EventRegistrationWarning *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EventRegistrationWarning(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__EventRegistrationEvent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->ns1__EventRegistrationEvent::Id);
	soap_default_std__vectorTemplateOfunsignedInt(soap, &this->ns1__EventRegistrationEvent::WorkshopIds);
	this->ns1__EventRegistrationEvent::WorkshopComment = NULL;
}

void ns1__EventRegistrationEvent::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__EventRegistrationEvent::Id, SOAP_TYPE_unsignedInt);
	soap_serialize_std__vectorTemplateOfunsignedInt(soap, &this->ns1__EventRegistrationEvent::WorkshopIds);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistrationEvent::WorkshopComment);
#endif
}

int ns1__EventRegistrationEvent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__EventRegistrationEvent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventRegistrationEvent(struct soap *soap, const char *tag, int id, const ns1__EventRegistrationEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__EventRegistrationEvent), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:Id", -1, &a->ns1__EventRegistrationEvent::Id, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfunsignedInt(soap, "ns1:WorkshopIds", -1, &a->ns1__EventRegistrationEvent::WorkshopIds, ""))
		return soap->error;
	if (!a->ns1__EventRegistrationEvent::WorkshopComment)
	{	if (soap_element_nil(soap, "ns1:WorkshopComment"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:WorkshopComment", -1, &a->ns1__EventRegistrationEvent::WorkshopComment, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__EventRegistrationEvent::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__EventRegistrationEvent(soap, tag, this, type);
}

SOAP_FMAC3 ns1__EventRegistrationEvent * SOAP_FMAC4 soap_in_ns1__EventRegistrationEvent(struct soap *soap, const char *tag, ns1__EventRegistrationEvent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__EventRegistrationEvent*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EventRegistrationEvent, sizeof(ns1__EventRegistrationEvent), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__EventRegistrationEvent)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__EventRegistrationEvent *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_WorkshopComment1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_unsignedInt(soap, "ns1:Id", &a->ns1__EventRegistrationEvent::Id, "xsd:unsignedInt"))
				{	soap_flag_Id1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfunsignedInt(soap, "ns1:WorkshopIds", &a->ns1__EventRegistrationEvent::WorkshopIds, "xsd:unsignedInt"))
					continue;
			}
			if (soap_flag_WorkshopComment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:WorkshopComment", &a->ns1__EventRegistrationEvent::WorkshopComment, "xsd:string"))
				{	soap_flag_WorkshopComment1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Id1 > 0 || soap_flag_WorkshopComment1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__EventRegistrationEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__EventRegistrationEvent, SOAP_TYPE_ns1__EventRegistrationEvent, sizeof(ns1__EventRegistrationEvent), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__EventRegistrationEvent * SOAP_FMAC2 soap_instantiate_ns1__EventRegistrationEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__EventRegistrationEvent(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__EventRegistrationEvent *p;
	size_t k = sizeof(ns1__EventRegistrationEvent);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__EventRegistrationEvent, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__EventRegistrationEvent);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__EventRegistrationEvent, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__EventRegistrationEvent location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__EventRegistrationEvent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__EventRegistrationEvent(soap, tag ? tag : "ns1:EventRegistrationEvent", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__EventRegistrationEvent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__EventRegistrationEvent(soap, this, tag, type);
}

SOAP_FMAC3 ns1__EventRegistrationEvent * SOAP_FMAC4 soap_get_ns1__EventRegistrationEvent(struct soap *soap, ns1__EventRegistrationEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EventRegistrationEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__EventRegistration::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(soap, &this->ns1__EventRegistration::Events);
	this->ns1__EventRegistration::Salutation = NULL;
	this->ns1__EventRegistration::Title = NULL;
	this->ns1__EventRegistration::Firstname = NULL;
	this->ns1__EventRegistration::Lastname = NULL;
	this->ns1__EventRegistration::Street = NULL;
	this->ns1__EventRegistration::Zip = NULL;
	this->ns1__EventRegistration::City = NULL;
	this->ns1__EventRegistration::DateOfBirth = NULL;
	this->ns1__EventRegistration::AccountHolder = NULL;
	this->ns1__EventRegistration::IBAN = NULL;
	this->ns1__EventRegistration::BIC = NULL;
	this->ns1__EventRegistration::EMail = NULL;
	this->ns1__EventRegistration::Phone = NULL;
	this->ns1__EventRegistration::MobilePhone = NULL;
	this->ns1__EventRegistration::AssociationNumber = NULL;
	this->ns1__EventRegistration::Association = NULL;
	this->ns1__EventRegistration::YouthLeaderCard = NULL;
	this->ns1__EventRegistration::YouthLeaderCardValidity = NULL;
	this->ns1__EventRegistration::Comment = NULL;
	soap_default_bool(soap, &this->ns1__EventRegistration::Overnight);
	soap_default_bool(soap, &this->ns1__EventRegistration::SingleRoom);
	soap_default_bool(soap, &this->ns1__EventRegistration::Vegetarian);
	soap_default_bool(soap, &this->ns1__EventRegistration::AddressDisclosure);
}

void ns1__EventRegistration::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(soap, &this->ns1__EventRegistration::Events);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::Salutation);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::Title);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::Firstname);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::Lastname);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::Street);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::Zip);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::City);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::DateOfBirth);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::AccountHolder);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::IBAN);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::BIC);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::EMail);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::Phone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::MobilePhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::AssociationNumber);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::Association);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::YouthLeaderCard);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::YouthLeaderCardValidity);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventRegistration::Comment);
	soap_embedded(soap, &this->ns1__EventRegistration::Overnight, SOAP_TYPE_bool);
	soap_embedded(soap, &this->ns1__EventRegistration::SingleRoom, SOAP_TYPE_bool);
	soap_embedded(soap, &this->ns1__EventRegistration::Vegetarian, SOAP_TYPE_bool);
	soap_embedded(soap, &this->ns1__EventRegistration::AddressDisclosure, SOAP_TYPE_bool);
#endif
}

int ns1__EventRegistration::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__EventRegistration(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventRegistration(struct soap *soap, const char *tag, int id, const ns1__EventRegistration *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__EventRegistration), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(soap, "ns1:Events", -1, &a->ns1__EventRegistration::Events, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::Salutation)
	{	if (soap_element_nil(soap, "ns1:Salutation"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Salutation", -1, &a->ns1__EventRegistration::Salutation, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::Title)
	{	if (soap_element_nil(soap, "ns1:Title"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Title", -1, &a->ns1__EventRegistration::Title, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::Firstname)
	{	if (soap_element_nil(soap, "ns1:Firstname"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Firstname", -1, &a->ns1__EventRegistration::Firstname, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::Lastname)
	{	if (soap_element_nil(soap, "ns1:Lastname"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Lastname", -1, &a->ns1__EventRegistration::Lastname, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::Street)
	{	if (soap_element_nil(soap, "ns1:Street"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Street", -1, &a->ns1__EventRegistration::Street, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::Zip)
	{	if (soap_element_nil(soap, "ns1:Zip"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Zip", -1, &a->ns1__EventRegistration::Zip, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::City)
	{	if (soap_element_nil(soap, "ns1:City"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:City", -1, &a->ns1__EventRegistration::City, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::DateOfBirth)
	{	if (soap_element_nil(soap, "ns1:DateOfBirth"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:DateOfBirth", -1, &a->ns1__EventRegistration::DateOfBirth, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::AccountHolder)
	{	if (soap_element_nil(soap, "ns1:AccountHolder"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:AccountHolder", -1, &a->ns1__EventRegistration::AccountHolder, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::IBAN)
	{	if (soap_element_nil(soap, "ns1:IBAN"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:IBAN", -1, &a->ns1__EventRegistration::IBAN, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::BIC)
	{	if (soap_element_nil(soap, "ns1:BIC"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:BIC", -1, &a->ns1__EventRegistration::BIC, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::EMail)
	{	if (soap_element_nil(soap, "ns1:EMail"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:EMail", -1, &a->ns1__EventRegistration::EMail, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::Phone)
	{	if (soap_element_nil(soap, "ns1:Phone"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Phone", -1, &a->ns1__EventRegistration::Phone, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::MobilePhone)
	{	if (soap_element_nil(soap, "ns1:MobilePhone"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:MobilePhone", -1, &a->ns1__EventRegistration::MobilePhone, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::AssociationNumber)
	{	if (soap_element_nil(soap, "ns1:AssociationNumber"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:AssociationNumber", -1, &a->ns1__EventRegistration::AssociationNumber, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::Association)
	{	if (soap_element_nil(soap, "ns1:Association"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Association", -1, &a->ns1__EventRegistration::Association, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::YouthLeaderCard)
	{	if (soap_element_nil(soap, "ns1:YouthLeaderCard"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:YouthLeaderCard", -1, &a->ns1__EventRegistration::YouthLeaderCard, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::YouthLeaderCardValidity)
	{	if (soap_element_nil(soap, "ns1:YouthLeaderCardValidity"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:YouthLeaderCardValidity", -1, &a->ns1__EventRegistration::YouthLeaderCardValidity, ""))
		return soap->error;
	if (!a->ns1__EventRegistration::Comment)
	{	if (soap_element_nil(soap, "ns1:Comment"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Comment", -1, &a->ns1__EventRegistration::Comment, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:Overnight", -1, &a->ns1__EventRegistration::Overnight, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:SingleRoom", -1, &a->ns1__EventRegistration::SingleRoom, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:Vegetarian", -1, &a->ns1__EventRegistration::Vegetarian, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:AddressDisclosure", -1, &a->ns1__EventRegistration::AddressDisclosure, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__EventRegistration::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__EventRegistration(soap, tag, this, type);
}

SOAP_FMAC3 ns1__EventRegistration * SOAP_FMAC4 soap_in_ns1__EventRegistration(struct soap *soap, const char *tag, ns1__EventRegistration *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__EventRegistration*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EventRegistration, sizeof(ns1__EventRegistration), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__EventRegistration)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__EventRegistration *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Salutation1 = 1;
	size_t soap_flag_Title1 = 1;
	size_t soap_flag_Firstname1 = 1;
	size_t soap_flag_Lastname1 = 1;
	size_t soap_flag_Street1 = 1;
	size_t soap_flag_Zip1 = 1;
	size_t soap_flag_City1 = 1;
	size_t soap_flag_DateOfBirth1 = 1;
	size_t soap_flag_AccountHolder1 = 1;
	size_t soap_flag_IBAN1 = 1;
	size_t soap_flag_BIC1 = 1;
	size_t soap_flag_EMail1 = 1;
	size_t soap_flag_Phone1 = 1;
	size_t soap_flag_MobilePhone1 = 1;
	size_t soap_flag_AssociationNumber1 = 1;
	size_t soap_flag_Association1 = 1;
	size_t soap_flag_YouthLeaderCard1 = 1;
	size_t soap_flag_YouthLeaderCardValidity1 = 1;
	size_t soap_flag_Comment1 = 1;
	size_t soap_flag_Overnight1 = 1;
	size_t soap_flag_SingleRoom1 = 1;
	size_t soap_flag_Vegetarian1 = 1;
	size_t soap_flag_AddressDisclosure1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(soap, "ns1:Events", &a->ns1__EventRegistration::Events, "ns1:EventRegistrationEvent"))
					continue;
			}
			if (soap_flag_Salutation1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Salutation", &a->ns1__EventRegistration::Salutation, "xsd:string"))
				{	soap_flag_Salutation1--;
					continue;
				}
			}
			if (soap_flag_Title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Title", &a->ns1__EventRegistration::Title, "xsd:string"))
				{	soap_flag_Title1--;
					continue;
				}
			}
			if (soap_flag_Firstname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Firstname", &a->ns1__EventRegistration::Firstname, "xsd:string"))
				{	soap_flag_Firstname1--;
					continue;
				}
			}
			if (soap_flag_Lastname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Lastname", &a->ns1__EventRegistration::Lastname, "xsd:string"))
				{	soap_flag_Lastname1--;
					continue;
				}
			}
			if (soap_flag_Street1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Street", &a->ns1__EventRegistration::Street, "xsd:string"))
				{	soap_flag_Street1--;
					continue;
				}
			}
			if (soap_flag_Zip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Zip", &a->ns1__EventRegistration::Zip, "xsd:string"))
				{	soap_flag_Zip1--;
					continue;
				}
			}
			if (soap_flag_City1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:City", &a->ns1__EventRegistration::City, "xsd:string"))
				{	soap_flag_City1--;
					continue;
				}
			}
			if (soap_flag_DateOfBirth1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:DateOfBirth", &a->ns1__EventRegistration::DateOfBirth, "xsd:string"))
				{	soap_flag_DateOfBirth1--;
					continue;
				}
			}
			if (soap_flag_AccountHolder1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:AccountHolder", &a->ns1__EventRegistration::AccountHolder, "xsd:string"))
				{	soap_flag_AccountHolder1--;
					continue;
				}
			}
			if (soap_flag_IBAN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:IBAN", &a->ns1__EventRegistration::IBAN, "xsd:string"))
				{	soap_flag_IBAN1--;
					continue;
				}
			}
			if (soap_flag_BIC1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:BIC", &a->ns1__EventRegistration::BIC, "xsd:string"))
				{	soap_flag_BIC1--;
					continue;
				}
			}
			if (soap_flag_EMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:EMail", &a->ns1__EventRegistration::EMail, "xsd:string"))
				{	soap_flag_EMail1--;
					continue;
				}
			}
			if (soap_flag_Phone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Phone", &a->ns1__EventRegistration::Phone, "xsd:string"))
				{	soap_flag_Phone1--;
					continue;
				}
			}
			if (soap_flag_MobilePhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:MobilePhone", &a->ns1__EventRegistration::MobilePhone, "xsd:string"))
				{	soap_flag_MobilePhone1--;
					continue;
				}
			}
			if (soap_flag_AssociationNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:AssociationNumber", &a->ns1__EventRegistration::AssociationNumber, "xsd:string"))
				{	soap_flag_AssociationNumber1--;
					continue;
				}
			}
			if (soap_flag_Association1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Association", &a->ns1__EventRegistration::Association, "xsd:string"))
				{	soap_flag_Association1--;
					continue;
				}
			}
			if (soap_flag_YouthLeaderCard1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:YouthLeaderCard", &a->ns1__EventRegistration::YouthLeaderCard, "xsd:string"))
				{	soap_flag_YouthLeaderCard1--;
					continue;
				}
			}
			if (soap_flag_YouthLeaderCardValidity1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:YouthLeaderCardValidity", &a->ns1__EventRegistration::YouthLeaderCardValidity, "xsd:string"))
				{	soap_flag_YouthLeaderCardValidity1--;
					continue;
				}
			}
			if (soap_flag_Comment1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Comment", &a->ns1__EventRegistration::Comment, "xsd:string"))
				{	soap_flag_Comment1--;
					continue;
				}
			}
			if (soap_flag_Overnight1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:Overnight", &a->ns1__EventRegistration::Overnight, "xsd:boolean"))
				{	soap_flag_Overnight1--;
					continue;
				}
			}
			if (soap_flag_SingleRoom1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:SingleRoom", &a->ns1__EventRegistration::SingleRoom, "xsd:boolean"))
				{	soap_flag_SingleRoom1--;
					continue;
				}
			}
			if (soap_flag_Vegetarian1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:Vegetarian", &a->ns1__EventRegistration::Vegetarian, "xsd:boolean"))
				{	soap_flag_Vegetarian1--;
					continue;
				}
			}
			if (soap_flag_AddressDisclosure1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:AddressDisclosure", &a->ns1__EventRegistration::AddressDisclosure, "xsd:boolean"))
				{	soap_flag_AddressDisclosure1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Salutation1 > 0 || soap_flag_Title1 > 0 || soap_flag_Firstname1 > 0 || soap_flag_Lastname1 > 0 || soap_flag_Street1 > 0 || soap_flag_Zip1 > 0 || soap_flag_City1 > 0 || soap_flag_DateOfBirth1 > 0 || soap_flag_AccountHolder1 > 0 || soap_flag_IBAN1 > 0 || soap_flag_BIC1 > 0 || soap_flag_EMail1 > 0 || soap_flag_Phone1 > 0 || soap_flag_MobilePhone1 > 0 || soap_flag_AssociationNumber1 > 0 || soap_flag_Association1 > 0 || soap_flag_YouthLeaderCard1 > 0 || soap_flag_YouthLeaderCardValidity1 > 0 || soap_flag_Comment1 > 0 || soap_flag_Overnight1 > 0 || soap_flag_SingleRoom1 > 0 || soap_flag_Vegetarian1 > 0 || soap_flag_AddressDisclosure1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__EventRegistration *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__EventRegistration, SOAP_TYPE_ns1__EventRegistration, sizeof(ns1__EventRegistration), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__EventRegistration * SOAP_FMAC2 soap_instantiate_ns1__EventRegistration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__EventRegistration(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__EventRegistration *p;
	size_t k = sizeof(ns1__EventRegistration);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__EventRegistration, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__EventRegistration);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__EventRegistration, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__EventRegistration location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__EventRegistration::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__EventRegistration(soap, tag ? tag : "ns1:EventRegistration", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__EventRegistration::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__EventRegistration(soap, this, tag, type);
}

SOAP_FMAC3 ns1__EventRegistration * SOAP_FMAC4 soap_get_ns1__EventRegistration(struct soap *soap, ns1__EventRegistration *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EventRegistration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__Workshop::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->ns1__Workshop::Id);
	this->ns1__Workshop::Number = NULL;
	this->ns1__Workshop::Title = NULL;
	this->ns1__Workshop::AdditionalInfo = NULL;
	this->ns1__Workshop::Date = NULL;
	this->ns1__Workshop::TimeFrom = NULL;
	this->ns1__Workshop::TimeTo = NULL;
	soap_default_xsd__unsignedByte(soap, &this->ns1__Workshop::OccupancyPercentage);
}

void ns1__Workshop::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__Workshop::Id, SOAP_TYPE_unsignedInt);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Workshop::Number);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Workshop::Title);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Workshop::AdditionalInfo);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Workshop::Date);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Workshop::TimeFrom);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Workshop::TimeTo);
#endif
}

int ns1__Workshop::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Workshop(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Workshop(struct soap *soap, const char *tag, int id, const ns1__Workshop *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Workshop), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:Id", -1, &a->ns1__Workshop::Id, ""))
		return soap->error;
	if (!a->ns1__Workshop::Number)
	{	if (soap_element_nil(soap, "ns1:Number"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Number", -1, &a->ns1__Workshop::Number, ""))
		return soap->error;
	if (!a->ns1__Workshop::Title)
	{	if (soap_element_nil(soap, "ns1:Title"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Title", -1, &a->ns1__Workshop::Title, ""))
		return soap->error;
	if (!a->ns1__Workshop::AdditionalInfo)
	{	if (soap_element_nil(soap, "ns1:AdditionalInfo"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:AdditionalInfo", -1, &a->ns1__Workshop::AdditionalInfo, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Date", -1, &a->ns1__Workshop::Date, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:TimeFrom", -1, &a->ns1__Workshop::TimeFrom, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:TimeTo", -1, &a->ns1__Workshop::TimeTo, ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:OccupancyPercentage", -1, &a->ns1__Workshop::OccupancyPercentage, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__Workshop::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__Workshop(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Workshop * SOAP_FMAC4 soap_in_ns1__Workshop(struct soap *soap, const char *tag, ns1__Workshop *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Workshop*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Workshop, sizeof(ns1__Workshop), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__Workshop)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__Workshop *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Number1 = 1;
	size_t soap_flag_Title1 = 1;
	size_t soap_flag_AdditionalInfo1 = 1;
	size_t soap_flag_Date1 = 1;
	size_t soap_flag_TimeFrom1 = 1;
	size_t soap_flag_TimeTo1 = 1;
	size_t soap_flag_OccupancyPercentage1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_unsignedInt(soap, "ns1:Id", &a->ns1__Workshop::Id, "xsd:unsignedInt"))
				{	soap_flag_Id1--;
					continue;
				}
			}
			if (soap_flag_Number1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Number", &a->ns1__Workshop::Number, "xsd:string"))
				{	soap_flag_Number1--;
					continue;
				}
			}
			if (soap_flag_Title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Title", &a->ns1__Workshop::Title, "xsd:string"))
				{	soap_flag_Title1--;
					continue;
				}
			}
			if (soap_flag_AdditionalInfo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:AdditionalInfo", &a->ns1__Workshop::AdditionalInfo, "xsd:string"))
				{	soap_flag_AdditionalInfo1--;
					continue;
				}
			}
			if (soap_flag_Date1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Date", &a->ns1__Workshop::Date, "xsd:string"))
				{	soap_flag_Date1--;
					continue;
				}
			}
			if (soap_flag_TimeFrom1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:TimeFrom", &a->ns1__Workshop::TimeFrom, "xsd:string"))
				{	soap_flag_TimeFrom1--;
					continue;
				}
			}
			if (soap_flag_TimeTo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:TimeTo", &a->ns1__Workshop::TimeTo, "xsd:string"))
				{	soap_flag_TimeTo1--;
					continue;
				}
			}
			if (soap_flag_OccupancyPercentage1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_xsd__unsignedByte(soap, "ns1:OccupancyPercentage", &a->ns1__Workshop::OccupancyPercentage, "xsd:unsignedByte"))
				{	soap_flag_OccupancyPercentage1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Id1 > 0 || soap_flag_Number1 > 0 || soap_flag_Title1 > 0 || soap_flag_AdditionalInfo1 > 0 || soap_flag_OccupancyPercentage1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__Workshop *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Workshop, SOAP_TYPE_ns1__Workshop, sizeof(ns1__Workshop), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__Workshop * SOAP_FMAC2 soap_instantiate_ns1__Workshop(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Workshop(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__Workshop *p;
	size_t k = sizeof(ns1__Workshop);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__Workshop, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__Workshop);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__Workshop, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__Workshop location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__Workshop::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__Workshop(soap, tag ? tag : "ns1:Workshop", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Workshop::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Workshop(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Workshop * SOAP_FMAC4 soap_get_ns1__Workshop(struct soap *soap, ns1__Workshop *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Workshop(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__WorkshopTimeslot::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__WorkshopTimeslot::Timeslot = NULL;
	soap_default_std__vectorTemplateOfPointerTons1__Workshop(soap, &this->ns1__WorkshopTimeslot::Workshops);
}

void ns1__WorkshopTimeslot::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__WorkshopTimeslot::Timeslot);
	soap_serialize_std__vectorTemplateOfPointerTons1__Workshop(soap, &this->ns1__WorkshopTimeslot::Workshops);
#endif
}

int ns1__WorkshopTimeslot::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__WorkshopTimeslot(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__WorkshopTimeslot(struct soap *soap, const char *tag, int id, const ns1__WorkshopTimeslot *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__WorkshopTimeslot), type))
		return soap->error;
	if (!a->ns1__WorkshopTimeslot::Timeslot)
	{	if (soap_element_nil(soap, "ns1:Timeslot"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Timeslot", -1, &a->ns1__WorkshopTimeslot::Timeslot, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__Workshop(soap, "ns1:Workshops", -1, &a->ns1__WorkshopTimeslot::Workshops, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__WorkshopTimeslot::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__WorkshopTimeslot(soap, tag, this, type);
}

SOAP_FMAC3 ns1__WorkshopTimeslot * SOAP_FMAC4 soap_in_ns1__WorkshopTimeslot(struct soap *soap, const char *tag, ns1__WorkshopTimeslot *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__WorkshopTimeslot*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__WorkshopTimeslot, sizeof(ns1__WorkshopTimeslot), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__WorkshopTimeslot)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__WorkshopTimeslot *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Timeslot1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Timeslot1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Timeslot", &a->ns1__WorkshopTimeslot::Timeslot, "xsd:string"))
				{	soap_flag_Timeslot1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__Workshop(soap, "ns1:Workshops", &a->ns1__WorkshopTimeslot::Workshops, "ns1:Workshop"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Timeslot1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__WorkshopTimeslot *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__WorkshopTimeslot, SOAP_TYPE_ns1__WorkshopTimeslot, sizeof(ns1__WorkshopTimeslot), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__WorkshopTimeslot * SOAP_FMAC2 soap_instantiate_ns1__WorkshopTimeslot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__WorkshopTimeslot(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__WorkshopTimeslot *p;
	size_t k = sizeof(ns1__WorkshopTimeslot);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__WorkshopTimeslot, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__WorkshopTimeslot);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__WorkshopTimeslot, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__WorkshopTimeslot location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__WorkshopTimeslot::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__WorkshopTimeslot(soap, tag ? tag : "ns1:WorkshopTimeslot", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__WorkshopTimeslot::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__WorkshopTimeslot(soap, this, tag, type);
}

SOAP_FMAC3 ns1__WorkshopTimeslot * SOAP_FMAC4 soap_get_ns1__WorkshopTimeslot(struct soap *soap, ns1__WorkshopTimeslot *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__WorkshopTimeslot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__Address::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Address::Name = NULL;
	this->ns1__Address::Street = NULL;
	this->ns1__Address::Zip = NULL;
	this->ns1__Address::City = NULL;
	this->ns1__Address::Contact = NULL;
	this->ns1__Address::Phone = NULL;
	this->ns1__Address::Fax = NULL;
	this->ns1__Address::MobilePhone = NULL;
	this->ns1__Address::EMail = NULL;
}

void ns1__Address::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__Address::Name);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Address::Street);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Address::Zip);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Address::City);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Address::Contact);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Address::Phone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Address::Fax);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Address::MobilePhone);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Address::EMail);
#endif
}

int ns1__Address::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Address(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Address(struct soap *soap, const char *tag, int id, const ns1__Address *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Address), type))
		return soap->error;
	if (!a->ns1__Address::Name)
	{	if (soap_element_nil(soap, "ns1:Name"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Name", -1, &a->ns1__Address::Name, ""))
		return soap->error;
	if (!a->ns1__Address::Street)
	{	if (soap_element_nil(soap, "ns1:Street"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Street", -1, &a->ns1__Address::Street, ""))
		return soap->error;
	if (!a->ns1__Address::Zip)
	{	if (soap_element_nil(soap, "ns1:Zip"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Zip", -1, &a->ns1__Address::Zip, ""))
		return soap->error;
	if (!a->ns1__Address::City)
	{	if (soap_element_nil(soap, "ns1:City"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:City", -1, &a->ns1__Address::City, ""))
		return soap->error;
	if (!a->ns1__Address::Contact)
	{	if (soap_element_nil(soap, "ns1:Contact"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Contact", -1, &a->ns1__Address::Contact, ""))
		return soap->error;
	if (!a->ns1__Address::Phone)
	{	if (soap_element_nil(soap, "ns1:Phone"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Phone", -1, &a->ns1__Address::Phone, ""))
		return soap->error;
	if (!a->ns1__Address::Fax)
	{	if (soap_element_nil(soap, "ns1:Fax"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Fax", -1, &a->ns1__Address::Fax, ""))
		return soap->error;
	if (!a->ns1__Address::MobilePhone)
	{	if (soap_element_nil(soap, "ns1:MobilePhone"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:MobilePhone", -1, &a->ns1__Address::MobilePhone, ""))
		return soap->error;
	if (!a->ns1__Address::EMail)
	{	if (soap_element_nil(soap, "ns1:EMail"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:EMail", -1, &a->ns1__Address::EMail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__Address::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__Address(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Address * SOAP_FMAC4 soap_in_ns1__Address(struct soap *soap, const char *tag, ns1__Address *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Address*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Address, sizeof(ns1__Address), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__Address)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__Address *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Street1 = 1;
	size_t soap_flag_Zip1 = 1;
	size_t soap_flag_City1 = 1;
	size_t soap_flag_Contact1 = 1;
	size_t soap_flag_Phone1 = 1;
	size_t soap_flag_Fax1 = 1;
	size_t soap_flag_MobilePhone1 = 1;
	size_t soap_flag_EMail1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Name", &a->ns1__Address::Name, "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			}
			if (soap_flag_Street1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Street", &a->ns1__Address::Street, "xsd:string"))
				{	soap_flag_Street1--;
					continue;
				}
			}
			if (soap_flag_Zip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Zip", &a->ns1__Address::Zip, "xsd:string"))
				{	soap_flag_Zip1--;
					continue;
				}
			}
			if (soap_flag_City1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:City", &a->ns1__Address::City, "xsd:string"))
				{	soap_flag_City1--;
					continue;
				}
			}
			if (soap_flag_Contact1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Contact", &a->ns1__Address::Contact, "xsd:string"))
				{	soap_flag_Contact1--;
					continue;
				}
			}
			if (soap_flag_Phone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Phone", &a->ns1__Address::Phone, "xsd:string"))
				{	soap_flag_Phone1--;
					continue;
				}
			}
			if (soap_flag_Fax1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Fax", &a->ns1__Address::Fax, "xsd:string"))
				{	soap_flag_Fax1--;
					continue;
				}
			}
			if (soap_flag_MobilePhone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:MobilePhone", &a->ns1__Address::MobilePhone, "xsd:string"))
				{	soap_flag_MobilePhone1--;
					continue;
				}
			}
			if (soap_flag_EMail1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:EMail", &a->ns1__Address::EMail, "xsd:string"))
				{	soap_flag_EMail1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Name1 > 0 || soap_flag_Street1 > 0 || soap_flag_Zip1 > 0 || soap_flag_City1 > 0 || soap_flag_Contact1 > 0 || soap_flag_Phone1 > 0 || soap_flag_Fax1 > 0 || soap_flag_MobilePhone1 > 0 || soap_flag_EMail1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__Address *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Address, SOAP_TYPE_ns1__Address, sizeof(ns1__Address), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__Address * SOAP_FMAC2 soap_instantiate_ns1__Address(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Address(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__Address *p;
	size_t k = sizeof(ns1__Address);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__Address, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__Address);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__Address, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__Address location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__Address::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__Address(soap, tag ? tag : "ns1:Address", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Address::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Address(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Address * SOAP_FMAC4 soap_get_ns1__Address(struct soap *soap, ns1__Address *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Address(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__EventFee::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__EventFee::name = NULL;
	soap_default_xsd__decimal(soap, &this->ns1__EventFee::fee);
}

void ns1__EventFee::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventFee::name);
	soap_serialize_xsd__decimal(soap, &this->ns1__EventFee::fee);
#endif
}

int ns1__EventFee::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__EventFee(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventFee(struct soap *soap, const char *tag, int id, const ns1__EventFee *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__EventFee), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:name", -1, &a->ns1__EventFee::name, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "ns1:fee", -1, &a->ns1__EventFee::fee, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__EventFee::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__EventFee(soap, tag, this, type);
}

SOAP_FMAC3 ns1__EventFee * SOAP_FMAC4 soap_in_ns1__EventFee(struct soap *soap, const char *tag, ns1__EventFee *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__EventFee*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EventFee, sizeof(ns1__EventFee), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__EventFee)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__EventFee *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_name1 = 1;
	size_t soap_flag_fee1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:name", &a->ns1__EventFee::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_fee1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_xsd__decimal(soap, "ns1:fee", &a->ns1__EventFee::fee, "xsd:decimal"))
				{	soap_flag_fee1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fee1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__EventFee *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__EventFee, SOAP_TYPE_ns1__EventFee, sizeof(ns1__EventFee), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__EventFee * SOAP_FMAC2 soap_instantiate_ns1__EventFee(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__EventFee(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__EventFee *p;
	size_t k = sizeof(ns1__EventFee);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__EventFee, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__EventFee);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__EventFee, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__EventFee location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__EventFee::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__EventFee(soap, tag ? tag : "ns1:EventFee", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__EventFee::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__EventFee(soap, this, tag, type);
}

SOAP_FMAC3 ns1__EventFee * SOAP_FMAC4 soap_get_ns1__EventFee(struct soap *soap, ns1__EventFee *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EventFee(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__Event::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__EventMini::soap_default(soap);
	soap_default_std__vectorTemplateOfPointerTons1__EventFee(soap, &this->ns1__Event::EventFees);
	this->ns1__Event::Profile = NULL;
	this->ns1__Event::Acknowledgement = NULL;
	this->ns1__Event::TargetGroup = NULL;
	soap_default_unsignedInt(soap, &this->ns1__Event::NumberOfLearnUnits);
	this->ns1__Event::Venue = NULL;
	soap_default_bool(soap, &this->ns1__Event::VenueIsHandicappedAccessible);
	this->ns1__Event::Organizer = NULL;
	this->ns1__Event::InfoText = NULL;
	this->ns1__Event::InfoText2 = NULL;
	this->ns1__Event::InfoText3 = NULL;
	this->ns1__Event::InfoText4 = NULL;
	this->ns1__Event::InfoURL = NULL;
	this->ns1__Event::MaxNumberOfWorkshopRegistrations = NULL;
	soap_default_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(soap, &this->ns1__Event::WorkshopTimeslots);
}

void ns1__Event::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__EventFee(soap, &this->ns1__Event::EventFees);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Event::Profile);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Event::Acknowledgement);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Event::TargetGroup);
	soap_embedded(soap, &this->ns1__Event::NumberOfLearnUnits, SOAP_TYPE_unsignedInt);
	soap_serialize_PointerTons1__Address(soap, &this->ns1__Event::Venue);
	soap_embedded(soap, &this->ns1__Event::VenueIsHandicappedAccessible, SOAP_TYPE_bool);
	soap_serialize_PointerTons1__Address(soap, &this->ns1__Event::Organizer);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Event::InfoText);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Event::InfoText2);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Event::InfoText3);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Event::InfoText4);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Event::InfoURL);
	soap_serialize_PointerTounsignedInt(soap, &this->ns1__Event::MaxNumberOfWorkshopRegistrations);
	soap_serialize_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(soap, &this->ns1__Event::WorkshopTimeslots);
	this->ns1__EventMini::soap_serialize(soap);
#endif
}

int ns1__Event::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Event(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Event(struct soap *soap, const char *tag, int id, const ns1__Event *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Event), type ? type : "ns1:Event"))
		return soap->error;
	if (soap_out_bool(soap, "ns1:Hidden", -1, &a->ns1__EventBase::Hidden, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:Id", -1, &a->ns1__EventBase::Id, ""))
		return soap->error;
	if (!a->ns1__EventBase::Number)
	{	if (soap_element_nil(soap, "ns1:Number"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Number", -1, &a->ns1__EventBase::Number, ""))
		return soap->error;
	if (!a->ns1__EventBase::KSBNumber)
	{	if (soap_element_nil(soap, "ns1:KSBNumber"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:KSBNumber", -1, &a->ns1__EventBase::KSBNumber, ""))
		return soap->error;
	if (!a->ns1__EventBase::LSBNumber)
	{	if (soap_element_nil(soap, "ns1:LSBNumber"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:LSBNumber", -1, &a->ns1__EventBase::LSBNumber, ""))
		return soap->error;
	if (!a->ns1__EventBase::SportRegion)
	{	if (soap_element_nil(soap, "ns1:SportRegion"))
			return soap->error;
	}
	else if (soap_out_PointerTounsignedInt(soap, "ns1:SportRegion", -1, &a->ns1__EventBase::SportRegion, ""))
		return soap->error;
	if (!a->ns1__EventBase::Date)
	{	if (soap_element_nil(soap, "ns1:Date"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Date", -1, &a->ns1__EventBase::Date, ""))
		return soap->error;
	if (!a->ns1__EventMini::Title)
	{	if (soap_element_nil(soap, "ns1:Title"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Title", -1, &a->ns1__EventMini::Title, ""))
		return soap->error;
	if (!a->ns1__EventMini::TitleAddition)
	{	if (soap_element_nil(soap, "ns1:TitleAddition"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:TitleAddition", -1, &a->ns1__EventMini::TitleAddition, ""))
		return soap->error;
	if (!a->ns1__EventMini::Subtitle)
	{	if (soap_element_nil(soap, "ns1:Subtitle"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Subtitle", -1, &a->ns1__EventMini::Subtitle, ""))
		return soap->error;
	if (!a->ns1__EventMini::SubtitleAddition)
	{	if (soap_element_nil(soap, "ns1:SubtitleAddition"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:SubtitleAddition", -1, &a->ns1__EventMini::SubtitleAddition, ""))
		return soap->error;
	if (!a->ns1__EventMini::Category)
	{	if (soap_element_nil(soap, "ns1:Category"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Category", -1, &a->ns1__EventMini::Category, ""))
		return soap->error;
	if (!a->ns1__EventMini::SubCategory)
	{	if (soap_element_nil(soap, "ns1:SubCategory"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:SubCategory", -1, &a->ns1__EventMini::SubCategory, ""))
		return soap->error;
	if (!a->ns1__EventMini::Type)
	{	if (soap_element_nil(soap, "ns1:Type"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Type", -1, &a->ns1__EventMini::Type, ""))
		return soap->error;
	if (!a->ns1__EventMini::VenueCity)
	{	if (soap_element_nil(soap, "ns1:VenueCity"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:VenueCity", -1, &a->ns1__EventMini::VenueCity, ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:OccupancyPercentage", -1, &a->ns1__EventMini::OccupancyPercentage, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:EducationalLeave", -1, &a->ns1__EventMini::EducationalLeave, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__EventBase(soap, "ns1:SubEvents", -1, &a->ns1__EventMini::SubEvents, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__EventFee(soap, "ns1:EventFees", -1, &a->ns1__Event::EventFees, ""))
		return soap->error;
	if (!a->ns1__Event::Profile)
	{	if (soap_element_nil(soap, "ns1:Profile"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Profile", -1, &a->ns1__Event::Profile, ""))
		return soap->error;
	if (!a->ns1__Event::Acknowledgement)
	{	if (soap_element_nil(soap, "ns1:Acknowledgement"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Acknowledgement", -1, &a->ns1__Event::Acknowledgement, ""))
		return soap->error;
	if (!a->ns1__Event::TargetGroup)
	{	if (soap_element_nil(soap, "ns1:TargetGroup"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:TargetGroup", -1, &a->ns1__Event::TargetGroup, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:NumberOfLearnUnits", -1, &a->ns1__Event::NumberOfLearnUnits, ""))
		return soap->error;
	if (soap_out_PointerTons1__Address(soap, "ns1:Venue", -1, &a->ns1__Event::Venue, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:VenueIsHandicappedAccessible", -1, &a->ns1__Event::VenueIsHandicappedAccessible, ""))
		return soap->error;
	if (!a->ns1__Event::Organizer)
	{	if (soap_element_nil(soap, "ns1:Organizer"))
			return soap->error;
	}
	else if (soap_out_PointerTons1__Address(soap, "ns1:Organizer", -1, &a->ns1__Event::Organizer, ""))
		return soap->error;
	if (!a->ns1__Event::InfoText)
	{	if (soap_element_nil(soap, "ns1:InfoText"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:InfoText", -1, &a->ns1__Event::InfoText, ""))
		return soap->error;
	if (!a->ns1__Event::InfoText2)
	{	if (soap_element_nil(soap, "ns1:InfoText2"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:InfoText2", -1, &a->ns1__Event::InfoText2, ""))
		return soap->error;
	if (!a->ns1__Event::InfoText3)
	{	if (soap_element_nil(soap, "ns1:InfoText3"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:InfoText3", -1, &a->ns1__Event::InfoText3, ""))
		return soap->error;
	if (!a->ns1__Event::InfoText4)
	{	if (soap_element_nil(soap, "ns1:InfoText4"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:InfoText4", -1, &a->ns1__Event::InfoText4, ""))
		return soap->error;
	if (!a->ns1__Event::InfoURL)
	{	if (soap_element_nil(soap, "ns1:InfoURL"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:InfoURL", -1, &a->ns1__Event::InfoURL, ""))
		return soap->error;
	if (!a->ns1__Event::MaxNumberOfWorkshopRegistrations)
	{	if (soap_element_nil(soap, "ns1:MaxNumberOfWorkshopRegistrations"))
			return soap->error;
	}
	else if (soap_out_PointerTounsignedInt(soap, "ns1:MaxNumberOfWorkshopRegistrations", -1, &a->ns1__Event::MaxNumberOfWorkshopRegistrations, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(soap, "ns1:WorkshopTimeslots", -1, &a->ns1__Event::WorkshopTimeslots, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__Event::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__Event(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Event * SOAP_FMAC4 soap_in_ns1__Event(struct soap *soap, const char *tag, ns1__Event *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Event*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Event, sizeof(ns1__Event), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__Event)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__Event *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Hidden3 = 1;
	size_t soap_flag_Id3 = 1;
	size_t soap_flag_Number3 = 1;
	size_t soap_flag_KSBNumber3 = 1;
	size_t soap_flag_LSBNumber3 = 1;
	size_t soap_flag_SportRegion3 = 1;
	size_t soap_flag_Date3 = 1;
	size_t soap_flag_Title2 = 1;
	size_t soap_flag_TitleAddition2 = 1;
	size_t soap_flag_Subtitle2 = 1;
	size_t soap_flag_SubtitleAddition2 = 1;
	size_t soap_flag_Category2 = 1;
	size_t soap_flag_SubCategory2 = 1;
	size_t soap_flag_Type2 = 1;
	size_t soap_flag_VenueCity2 = 1;
	size_t soap_flag_OccupancyPercentage2 = 1;
	size_t soap_flag_EducationalLeave2 = 1;
	size_t soap_flag_Profile1 = 1;
	size_t soap_flag_Acknowledgement1 = 1;
	size_t soap_flag_TargetGroup1 = 1;
	size_t soap_flag_NumberOfLearnUnits1 = 1;
	size_t soap_flag_Venue1 = 1;
	size_t soap_flag_VenueIsHandicappedAccessible1 = 1;
	size_t soap_flag_Organizer1 = 1;
	size_t soap_flag_InfoText1 = 1;
	size_t soap_flag_InfoText21 = 1;
	size_t soap_flag_InfoText31 = 1;
	size_t soap_flag_InfoText41 = 1;
	size_t soap_flag_InfoURL1 = 1;
	size_t soap_flag_MaxNumberOfWorkshopRegistrations1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Hidden3 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:Hidden", &a->ns1__EventBase::Hidden, "xsd:boolean"))
				{	soap_flag_Hidden3--;
					continue;
				}
			}
			if (soap_flag_Id3 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_unsignedInt(soap, "ns1:Id", &a->ns1__EventBase::Id, "xsd:unsignedInt"))
				{	soap_flag_Id3--;
					continue;
				}
			}
			if (soap_flag_Number3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Number", &a->ns1__EventBase::Number, "xsd:string"))
				{	soap_flag_Number3--;
					continue;
				}
			}
			if (soap_flag_KSBNumber3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:KSBNumber", &a->ns1__EventBase::KSBNumber, "xsd:string"))
				{	soap_flag_KSBNumber3--;
					continue;
				}
			}
			if (soap_flag_LSBNumber3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:LSBNumber", &a->ns1__EventBase::LSBNumber, "xsd:string"))
				{	soap_flag_LSBNumber3--;
					continue;
				}
			}
			if (soap_flag_SportRegion3 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTounsignedInt(soap, "ns1:SportRegion", &a->ns1__EventBase::SportRegion, "xsd:unsignedInt"))
				{	soap_flag_SportRegion3--;
					continue;
				}
			}
			if (soap_flag_Date3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Date", &a->ns1__EventBase::Date, "xsd:string"))
				{	soap_flag_Date3--;
					continue;
				}
			}
			if (soap_flag_Title2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Title", &a->ns1__EventMini::Title, "xsd:string"))
				{	soap_flag_Title2--;
					continue;
				}
			}
			if (soap_flag_TitleAddition2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:TitleAddition", &a->ns1__EventMini::TitleAddition, "xsd:string"))
				{	soap_flag_TitleAddition2--;
					continue;
				}
			}
			if (soap_flag_Subtitle2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Subtitle", &a->ns1__EventMini::Subtitle, "xsd:string"))
				{	soap_flag_Subtitle2--;
					continue;
				}
			}
			if (soap_flag_SubtitleAddition2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:SubtitleAddition", &a->ns1__EventMini::SubtitleAddition, "xsd:string"))
				{	soap_flag_SubtitleAddition2--;
					continue;
				}
			}
			if (soap_flag_Category2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Category", &a->ns1__EventMini::Category, "xsd:string"))
				{	soap_flag_Category2--;
					continue;
				}
			}
			if (soap_flag_SubCategory2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:SubCategory", &a->ns1__EventMini::SubCategory, "xsd:string"))
				{	soap_flag_SubCategory2--;
					continue;
				}
			}
			if (soap_flag_Type2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Type", &a->ns1__EventMini::Type, "xsd:string"))
				{	soap_flag_Type2--;
					continue;
				}
			}
			if (soap_flag_VenueCity2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:VenueCity", &a->ns1__EventMini::VenueCity, "xsd:string"))
				{	soap_flag_VenueCity2--;
					continue;
				}
			}
			if (soap_flag_OccupancyPercentage2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_xsd__unsignedByte(soap, "ns1:OccupancyPercentage", &a->ns1__EventMini::OccupancyPercentage, "xsd:unsignedByte"))
				{	soap_flag_OccupancyPercentage2--;
					continue;
				}
			}
			if (soap_flag_EducationalLeave2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:EducationalLeave", &a->ns1__EventMini::EducationalLeave, "xsd:boolean"))
				{	soap_flag_EducationalLeave2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__EventBase(soap, "ns1:SubEvents", &a->ns1__EventMini::SubEvents, "ns1:EventBase"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__EventFee(soap, "ns1:EventFees", &a->ns1__Event::EventFees, "ns1:EventFee"))
					continue;
			}
			if (soap_flag_Profile1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Profile", &a->ns1__Event::Profile, "xsd:string"))
				{	soap_flag_Profile1--;
					continue;
				}
			}
			if (soap_flag_Acknowledgement1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Acknowledgement", &a->ns1__Event::Acknowledgement, "xsd:string"))
				{	soap_flag_Acknowledgement1--;
					continue;
				}
			}
			if (soap_flag_TargetGroup1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:TargetGroup", &a->ns1__Event::TargetGroup, "xsd:string"))
				{	soap_flag_TargetGroup1--;
					continue;
				}
			}
			if (soap_flag_NumberOfLearnUnits1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_unsignedInt(soap, "ns1:NumberOfLearnUnits", &a->ns1__Event::NumberOfLearnUnits, "xsd:unsignedInt"))
				{	soap_flag_NumberOfLearnUnits1--;
					continue;
				}
			}
			if (soap_flag_Venue1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__Address(soap, "ns1:Venue", &a->ns1__Event::Venue, "ns1:Address"))
				{	soap_flag_Venue1--;
					continue;
				}
			}
			if (soap_flag_VenueIsHandicappedAccessible1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:VenueIsHandicappedAccessible", &a->ns1__Event::VenueIsHandicappedAccessible, "xsd:boolean"))
				{	soap_flag_VenueIsHandicappedAccessible1--;
					continue;
				}
			}
			if (soap_flag_Organizer1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__Address(soap, "ns1:Organizer", &a->ns1__Event::Organizer, "ns1:Address"))
				{	soap_flag_Organizer1--;
					continue;
				}
			}
			if (soap_flag_InfoText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:InfoText", &a->ns1__Event::InfoText, "xsd:string"))
				{	soap_flag_InfoText1--;
					continue;
				}
			}
			if (soap_flag_InfoText21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:InfoText2", &a->ns1__Event::InfoText2, "xsd:string"))
				{	soap_flag_InfoText21--;
					continue;
				}
			}
			if (soap_flag_InfoText31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:InfoText3", &a->ns1__Event::InfoText3, "xsd:string"))
				{	soap_flag_InfoText31--;
					continue;
				}
			}
			if (soap_flag_InfoText41 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:InfoText4", &a->ns1__Event::InfoText4, "xsd:string"))
				{	soap_flag_InfoText41--;
					continue;
				}
			}
			if (soap_flag_InfoURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:InfoURL", &a->ns1__Event::InfoURL, "xsd:string"))
				{	soap_flag_InfoURL1--;
					continue;
				}
			}
			if (soap_flag_MaxNumberOfWorkshopRegistrations1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTounsignedInt(soap, "ns1:MaxNumberOfWorkshopRegistrations", &a->ns1__Event::MaxNumberOfWorkshopRegistrations, "xsd:unsignedInt"))
				{	soap_flag_MaxNumberOfWorkshopRegistrations1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(soap, "ns1:WorkshopTimeslots", &a->ns1__Event::WorkshopTimeslots, "ns1:WorkshopTimeslot"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Hidden3 > 0 || soap_flag_Id3 > 0 || soap_flag_Number3 > 0 || soap_flag_KSBNumber3 > 0 || soap_flag_LSBNumber3 > 0 || soap_flag_SportRegion3 > 0 || soap_flag_Date3 > 0 || soap_flag_Title2 > 0 || soap_flag_TitleAddition2 > 0 || soap_flag_Subtitle2 > 0 || soap_flag_SubtitleAddition2 > 0 || soap_flag_Category2 > 0 || soap_flag_SubCategory2 > 0 || soap_flag_Type2 > 0 || soap_flag_VenueCity2 > 0 || soap_flag_OccupancyPercentage2 > 0 || soap_flag_EducationalLeave2 > 0 || soap_flag_Profile1 > 0 || soap_flag_Acknowledgement1 > 0 || soap_flag_TargetGroup1 > 0 || soap_flag_NumberOfLearnUnits1 > 0 || soap_flag_VenueIsHandicappedAccessible1 > 0 || soap_flag_Organizer1 > 0 || soap_flag_InfoText1 > 0 || soap_flag_InfoText21 > 0 || soap_flag_InfoText31 > 0 || soap_flag_InfoText41 > 0 || soap_flag_InfoURL1 > 0 || soap_flag_MaxNumberOfWorkshopRegistrations1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__Event *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Event, SOAP_TYPE_ns1__Event, sizeof(ns1__Event), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__Event * SOAP_FMAC2 soap_instantiate_ns1__Event(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Event(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__Event *p;
	size_t k = sizeof(ns1__Event);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__Event, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__Event);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__Event, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__Event location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__Event::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__Event(soap, tag ? tag : "ns1:Event", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Event::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Event(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Event * SOAP_FMAC4 soap_get_ns1__Event(struct soap *soap, ns1__Event *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Event(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__EventBase::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns1__EventBase::Hidden);
	soap_default_unsignedInt(soap, &this->ns1__EventBase::Id);
	this->ns1__EventBase::Number = NULL;
	this->ns1__EventBase::KSBNumber = NULL;
	this->ns1__EventBase::LSBNumber = NULL;
	this->ns1__EventBase::SportRegion = NULL;
	this->ns1__EventBase::Date = NULL;
}

void ns1__EventBase::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__EventBase::Hidden, SOAP_TYPE_bool);
	soap_embedded(soap, &this->ns1__EventBase::Id, SOAP_TYPE_unsignedInt);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventBase::Number);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventBase::KSBNumber);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventBase::LSBNumber);
	soap_serialize_PointerTounsignedInt(soap, &this->ns1__EventBase::SportRegion);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventBase::Date);
#endif
}

int ns1__EventBase::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__EventBase(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventBase(struct soap *soap, const char *tag, int id, const ns1__EventBase *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__EventBase), type))
		return soap->error;
	if (soap_out_bool(soap, "ns1:Hidden", -1, &a->ns1__EventBase::Hidden, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:Id", -1, &a->ns1__EventBase::Id, ""))
		return soap->error;
	if (!a->ns1__EventBase::Number)
	{	if (soap_element_nil(soap, "ns1:Number"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Number", -1, &a->ns1__EventBase::Number, ""))
		return soap->error;
	if (!a->ns1__EventBase::KSBNumber)
	{	if (soap_element_nil(soap, "ns1:KSBNumber"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:KSBNumber", -1, &a->ns1__EventBase::KSBNumber, ""))
		return soap->error;
	if (!a->ns1__EventBase::LSBNumber)
	{	if (soap_element_nil(soap, "ns1:LSBNumber"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:LSBNumber", -1, &a->ns1__EventBase::LSBNumber, ""))
		return soap->error;
	if (!a->ns1__EventBase::SportRegion)
	{	if (soap_element_nil(soap, "ns1:SportRegion"))
			return soap->error;
	}
	else if (soap_out_PointerTounsignedInt(soap, "ns1:SportRegion", -1, &a->ns1__EventBase::SportRegion, ""))
		return soap->error;
	if (!a->ns1__EventBase::Date)
	{	if (soap_element_nil(soap, "ns1:Date"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Date", -1, &a->ns1__EventBase::Date, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__EventBase::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__EventBase(soap, tag, this, type);
}

SOAP_FMAC3 ns1__EventBase * SOAP_FMAC4 soap_in_ns1__EventBase(struct soap *soap, const char *tag, ns1__EventBase *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__EventBase*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EventBase, sizeof(ns1__EventBase), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__EventBase)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__EventBase *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Hidden1 = 1;
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Number1 = 1;
	size_t soap_flag_KSBNumber1 = 1;
	size_t soap_flag_LSBNumber1 = 1;
	size_t soap_flag_SportRegion1 = 1;
	size_t soap_flag_Date1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Hidden1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:Hidden", &a->ns1__EventBase::Hidden, "xsd:boolean"))
				{	soap_flag_Hidden1--;
					continue;
				}
			}
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_unsignedInt(soap, "ns1:Id", &a->ns1__EventBase::Id, "xsd:unsignedInt"))
				{	soap_flag_Id1--;
					continue;
				}
			}
			if (soap_flag_Number1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Number", &a->ns1__EventBase::Number, "xsd:string"))
				{	soap_flag_Number1--;
					continue;
				}
			}
			if (soap_flag_KSBNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:KSBNumber", &a->ns1__EventBase::KSBNumber, "xsd:string"))
				{	soap_flag_KSBNumber1--;
					continue;
				}
			}
			if (soap_flag_LSBNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:LSBNumber", &a->ns1__EventBase::LSBNumber, "xsd:string"))
				{	soap_flag_LSBNumber1--;
					continue;
				}
			}
			if (soap_flag_SportRegion1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTounsignedInt(soap, "ns1:SportRegion", &a->ns1__EventBase::SportRegion, "xsd:unsignedInt"))
				{	soap_flag_SportRegion1--;
					continue;
				}
			}
			if (soap_flag_Date1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Date", &a->ns1__EventBase::Date, "xsd:string"))
				{	soap_flag_Date1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Hidden1 > 0 || soap_flag_Id1 > 0 || soap_flag_Number1 > 0 || soap_flag_KSBNumber1 > 0 || soap_flag_LSBNumber1 > 0 || soap_flag_SportRegion1 > 0 || soap_flag_Date1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__EventBase *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__EventBase, SOAP_TYPE_ns1__EventBase, sizeof(ns1__EventBase), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__EventBase * SOAP_FMAC2 soap_instantiate_ns1__EventBase(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__EventBase(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "ns1:EventMini"))
		return soap_instantiate_ns1__EventMini(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:Event"))
		return soap_instantiate_ns1__Event(soap, n, NULL, NULL, size);
	ns1__EventBase *p;
	size_t k = sizeof(ns1__EventBase);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__EventBase, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__EventBase);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__EventBase, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__EventBase location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__EventBase::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__EventBase(soap, tag ? tag : "ns1:EventBase", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__EventBase::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__EventBase(soap, this, tag, type);
}

SOAP_FMAC3 ns1__EventBase * SOAP_FMAC4 soap_get_ns1__EventBase(struct soap *soap, ns1__EventBase *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EventBase(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__EventMini::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__EventBase::soap_default(soap);
	this->ns1__EventMini::Title = NULL;
	this->ns1__EventMini::TitleAddition = NULL;
	this->ns1__EventMini::Subtitle = NULL;
	this->ns1__EventMini::SubtitleAddition = NULL;
	this->ns1__EventMini::Category = NULL;
	this->ns1__EventMini::SubCategory = NULL;
	this->ns1__EventMini::Type = NULL;
	this->ns1__EventMini::VenueCity = NULL;
	soap_default_xsd__unsignedByte(soap, &this->ns1__EventMini::OccupancyPercentage);
	soap_default_bool(soap, &this->ns1__EventMini::EducationalLeave);
	soap_default_std__vectorTemplateOfPointerTons1__EventBase(soap, &this->ns1__EventMini::SubEvents);
}

void ns1__EventMini::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventMini::Title);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventMini::TitleAddition);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventMini::Subtitle);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventMini::SubtitleAddition);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventMini::Category);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventMini::SubCategory);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventMini::Type);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventMini::VenueCity);
	soap_embedded(soap, &this->ns1__EventMini::EducationalLeave, SOAP_TYPE_bool);
	soap_serialize_std__vectorTemplateOfPointerTons1__EventBase(soap, &this->ns1__EventMini::SubEvents);
	this->ns1__EventBase::soap_serialize(soap);
#endif
}

int ns1__EventMini::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__EventMini(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventMini(struct soap *soap, const char *tag, int id, const ns1__EventMini *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__EventMini), type ? type : "ns1:EventMini"))
		return soap->error;
	if (soap_out_bool(soap, "ns1:Hidden", -1, &a->ns1__EventBase::Hidden, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:Id", -1, &a->ns1__EventBase::Id, ""))
		return soap->error;
	if (!a->ns1__EventBase::Number)
	{	if (soap_element_nil(soap, "ns1:Number"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Number", -1, &a->ns1__EventBase::Number, ""))
		return soap->error;
	if (!a->ns1__EventBase::KSBNumber)
	{	if (soap_element_nil(soap, "ns1:KSBNumber"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:KSBNumber", -1, &a->ns1__EventBase::KSBNumber, ""))
		return soap->error;
	if (!a->ns1__EventBase::LSBNumber)
	{	if (soap_element_nil(soap, "ns1:LSBNumber"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:LSBNumber", -1, &a->ns1__EventBase::LSBNumber, ""))
		return soap->error;
	if (!a->ns1__EventBase::SportRegion)
	{	if (soap_element_nil(soap, "ns1:SportRegion"))
			return soap->error;
	}
	else if (soap_out_PointerTounsignedInt(soap, "ns1:SportRegion", -1, &a->ns1__EventBase::SportRegion, ""))
		return soap->error;
	if (!a->ns1__EventBase::Date)
	{	if (soap_element_nil(soap, "ns1:Date"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Date", -1, &a->ns1__EventBase::Date, ""))
		return soap->error;
	if (!a->ns1__EventMini::Title)
	{	if (soap_element_nil(soap, "ns1:Title"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Title", -1, &a->ns1__EventMini::Title, ""))
		return soap->error;
	if (!a->ns1__EventMini::TitleAddition)
	{	if (soap_element_nil(soap, "ns1:TitleAddition"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:TitleAddition", -1, &a->ns1__EventMini::TitleAddition, ""))
		return soap->error;
	if (!a->ns1__EventMini::Subtitle)
	{	if (soap_element_nil(soap, "ns1:Subtitle"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Subtitle", -1, &a->ns1__EventMini::Subtitle, ""))
		return soap->error;
	if (!a->ns1__EventMini::SubtitleAddition)
	{	if (soap_element_nil(soap, "ns1:SubtitleAddition"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:SubtitleAddition", -1, &a->ns1__EventMini::SubtitleAddition, ""))
		return soap->error;
	if (!a->ns1__EventMini::Category)
	{	if (soap_element_nil(soap, "ns1:Category"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Category", -1, &a->ns1__EventMini::Category, ""))
		return soap->error;
	if (!a->ns1__EventMini::SubCategory)
	{	if (soap_element_nil(soap, "ns1:SubCategory"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:SubCategory", -1, &a->ns1__EventMini::SubCategory, ""))
		return soap->error;
	if (!a->ns1__EventMini::Type)
	{	if (soap_element_nil(soap, "ns1:Type"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:Type", -1, &a->ns1__EventMini::Type, ""))
		return soap->error;
	if (!a->ns1__EventMini::VenueCity)
	{	if (soap_element_nil(soap, "ns1:VenueCity"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns1:VenueCity", -1, &a->ns1__EventMini::VenueCity, ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "ns1:OccupancyPercentage", -1, &a->ns1__EventMini::OccupancyPercentage, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:EducationalLeave", -1, &a->ns1__EventMini::EducationalLeave, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__EventBase(soap, "ns1:SubEvents", -1, &a->ns1__EventMini::SubEvents, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__EventMini::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__EventMini(soap, tag, this, type);
}

SOAP_FMAC3 ns1__EventMini * SOAP_FMAC4 soap_in_ns1__EventMini(struct soap *soap, const char *tag, ns1__EventMini *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__EventMini*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EventMini, sizeof(ns1__EventMini), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__EventMini)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__EventMini *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Hidden2 = 1;
	size_t soap_flag_Id2 = 1;
	size_t soap_flag_Number2 = 1;
	size_t soap_flag_KSBNumber2 = 1;
	size_t soap_flag_LSBNumber2 = 1;
	size_t soap_flag_SportRegion2 = 1;
	size_t soap_flag_Date2 = 1;
	size_t soap_flag_Title1 = 1;
	size_t soap_flag_TitleAddition1 = 1;
	size_t soap_flag_Subtitle1 = 1;
	size_t soap_flag_SubtitleAddition1 = 1;
	size_t soap_flag_Category1 = 1;
	size_t soap_flag_SubCategory1 = 1;
	size_t soap_flag_Type1 = 1;
	size_t soap_flag_VenueCity1 = 1;
	size_t soap_flag_OccupancyPercentage1 = 1;
	size_t soap_flag_EducationalLeave1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Hidden2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:Hidden", &a->ns1__EventBase::Hidden, "xsd:boolean"))
				{	soap_flag_Hidden2--;
					continue;
				}
			}
			if (soap_flag_Id2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_unsignedInt(soap, "ns1:Id", &a->ns1__EventBase::Id, "xsd:unsignedInt"))
				{	soap_flag_Id2--;
					continue;
				}
			}
			if (soap_flag_Number2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Number", &a->ns1__EventBase::Number, "xsd:string"))
				{	soap_flag_Number2--;
					continue;
				}
			}
			if (soap_flag_KSBNumber2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:KSBNumber", &a->ns1__EventBase::KSBNumber, "xsd:string"))
				{	soap_flag_KSBNumber2--;
					continue;
				}
			}
			if (soap_flag_LSBNumber2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:LSBNumber", &a->ns1__EventBase::LSBNumber, "xsd:string"))
				{	soap_flag_LSBNumber2--;
					continue;
				}
			}
			if (soap_flag_SportRegion2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTounsignedInt(soap, "ns1:SportRegion", &a->ns1__EventBase::SportRegion, "xsd:unsignedInt"))
				{	soap_flag_SportRegion2--;
					continue;
				}
			}
			if (soap_flag_Date2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Date", &a->ns1__EventBase::Date, "xsd:string"))
				{	soap_flag_Date2--;
					continue;
				}
			}
			if (soap_flag_Title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Title", &a->ns1__EventMini::Title, "xsd:string"))
				{	soap_flag_Title1--;
					continue;
				}
			}
			if (soap_flag_TitleAddition1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:TitleAddition", &a->ns1__EventMini::TitleAddition, "xsd:string"))
				{	soap_flag_TitleAddition1--;
					continue;
				}
			}
			if (soap_flag_Subtitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Subtitle", &a->ns1__EventMini::Subtitle, "xsd:string"))
				{	soap_flag_Subtitle1--;
					continue;
				}
			}
			if (soap_flag_SubtitleAddition1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:SubtitleAddition", &a->ns1__EventMini::SubtitleAddition, "xsd:string"))
				{	soap_flag_SubtitleAddition1--;
					continue;
				}
			}
			if (soap_flag_Category1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Category", &a->ns1__EventMini::Category, "xsd:string"))
				{	soap_flag_Category1--;
					continue;
				}
			}
			if (soap_flag_SubCategory1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:SubCategory", &a->ns1__EventMini::SubCategory, "xsd:string"))
				{	soap_flag_SubCategory1--;
					continue;
				}
			}
			if (soap_flag_Type1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Type", &a->ns1__EventMini::Type, "xsd:string"))
				{	soap_flag_Type1--;
					continue;
				}
			}
			if (soap_flag_VenueCity1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:VenueCity", &a->ns1__EventMini::VenueCity, "xsd:string"))
				{	soap_flag_VenueCity1--;
					continue;
				}
			}
			if (soap_flag_OccupancyPercentage1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_xsd__unsignedByte(soap, "ns1:OccupancyPercentage", &a->ns1__EventMini::OccupancyPercentage, "xsd:unsignedByte"))
				{	soap_flag_OccupancyPercentage1--;
					continue;
				}
			}
			if (soap_flag_EducationalLeave1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:EducationalLeave", &a->ns1__EventMini::EducationalLeave, "xsd:boolean"))
				{	soap_flag_EducationalLeave1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__EventBase(soap, "ns1:SubEvents", &a->ns1__EventMini::SubEvents, "ns1:EventBase"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Hidden2 > 0 || soap_flag_Id2 > 0 || soap_flag_Number2 > 0 || soap_flag_KSBNumber2 > 0 || soap_flag_LSBNumber2 > 0 || soap_flag_SportRegion2 > 0 || soap_flag_Date2 > 0 || soap_flag_Title1 > 0 || soap_flag_TitleAddition1 > 0 || soap_flag_Subtitle1 > 0 || soap_flag_SubtitleAddition1 > 0 || soap_flag_Category1 > 0 || soap_flag_SubCategory1 > 0 || soap_flag_Type1 > 0 || soap_flag_VenueCity1 > 0 || soap_flag_OccupancyPercentage1 > 0 || soap_flag_EducationalLeave1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__EventMini *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__EventMini, SOAP_TYPE_ns1__EventMini, sizeof(ns1__EventMini), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__EventMini * SOAP_FMAC2 soap_instantiate_ns1__EventMini(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__EventMini(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "ns1:Event"))
		return soap_instantiate_ns1__Event(soap, n, NULL, NULL, size);
	ns1__EventMini *p;
	size_t k = sizeof(ns1__EventMini);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__EventMini, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__EventMini);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__EventMini, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__EventMini location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__EventMini::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__EventMini(soap, tag ? tag : "ns1:EventMini", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__EventMini::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__EventMini(soap, this, tag, type);
}

SOAP_FMAC3 ns1__EventMini * SOAP_FMAC4 soap_get_ns1__EventMini(struct soap *soap, ns1__EventMini *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EventMini(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__EventFilter::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__EventFilter::OrganizerId = NULL;
	this->ns1__EventFilter::VenueId = NULL;
	this->ns1__EventFilter::KSBNumber = NULL;
	this->ns1__EventFilter::LSBNumber = NULL;
	this->ns1__EventFilter::SportRegion = NULL;
	this->ns1__EventFilter::OnlyVisible = NULL;
	this->ns1__EventFilter::OnlyWithEducationalLeave = NULL;
	this->ns1__EventFilter::Title = NULL;
	this->ns1__EventFilter::TitleSearchType = NULL;
	this->ns1__EventFilter::TitleAddition = NULL;
	this->ns1__EventFilter::TitleAdditionSearchType = NULL;
	this->ns1__EventFilter::Subtitle = NULL;
	this->ns1__EventFilter::SubtitleSearchType = NULL;
	this->ns1__EventFilter::SubtitleAddition = NULL;
	this->ns1__EventFilter::SubtitleAdditionSearchType = NULL;
	this->ns1__EventFilter::Category = NULL;
	this->ns1__EventFilter::CategorySearchType = NULL;
	this->ns1__EventFilter::SubCategory = NULL;
	this->ns1__EventFilter::SubCategorySearchType = NULL;
}

void ns1__EventFilter::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTounsignedInt(soap, &this->ns1__EventFilter::OrganizerId);
	soap_serialize_PointerTounsignedInt(soap, &this->ns1__EventFilter::VenueId);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventFilter::KSBNumber);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventFilter::LSBNumber);
	soap_serialize_PointerTounsignedInt(soap, &this->ns1__EventFilter::SportRegion);
	soap_serialize_PointerTobool(soap, &this->ns1__EventFilter::OnlyVisible);
	soap_serialize_PointerTobool(soap, &this->ns1__EventFilter::OnlyWithEducationalLeave);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventFilter::Title);
	soap_serialize_PointerTons1__SearchType(soap, &this->ns1__EventFilter::TitleSearchType);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventFilter::TitleAddition);
	soap_serialize_PointerTons1__SearchType(soap, &this->ns1__EventFilter::TitleAdditionSearchType);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventFilter::Subtitle);
	soap_serialize_PointerTons1__SearchType(soap, &this->ns1__EventFilter::SubtitleSearchType);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventFilter::SubtitleAddition);
	soap_serialize_PointerTons1__SearchType(soap, &this->ns1__EventFilter::SubtitleAdditionSearchType);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventFilter::Category);
	soap_serialize_PointerTons1__SearchType(soap, &this->ns1__EventFilter::CategorySearchType);
	soap_serialize_PointerTostd__string(soap, &this->ns1__EventFilter::SubCategory);
	soap_serialize_PointerTons1__SearchType(soap, &this->ns1__EventFilter::SubCategorySearchType);
#endif
}

int ns1__EventFilter::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__EventFilter(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventFilter(struct soap *soap, const char *tag, int id, const ns1__EventFilter *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__EventFilter), type))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns1:OrganizerId", -1, &a->ns1__EventFilter::OrganizerId, ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns1:VenueId", -1, &a->ns1__EventFilter::VenueId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:KSBNumber", -1, &a->ns1__EventFilter::KSBNumber, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:LSBNumber", -1, &a->ns1__EventFilter::LSBNumber, ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns1:SportRegion", -1, &a->ns1__EventFilter::SportRegion, ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns1:OnlyVisible", -1, &a->ns1__EventFilter::OnlyVisible, ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns1:OnlyWithEducationalLeave", -1, &a->ns1__EventFilter::OnlyWithEducationalLeave, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Title", -1, &a->ns1__EventFilter::Title, ""))
		return soap->error;
	if (soap_out_PointerTons1__SearchType(soap, "ns1:TitleSearchType", -1, &a->ns1__EventFilter::TitleSearchType, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:TitleAddition", -1, &a->ns1__EventFilter::TitleAddition, ""))
		return soap->error;
	if (soap_out_PointerTons1__SearchType(soap, "ns1:TitleAdditionSearchType", -1, &a->ns1__EventFilter::TitleAdditionSearchType, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Subtitle", -1, &a->ns1__EventFilter::Subtitle, ""))
		return soap->error;
	if (soap_out_PointerTons1__SearchType(soap, "ns1:SubtitleSearchType", -1, &a->ns1__EventFilter::SubtitleSearchType, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:SubtitleAddition", -1, &a->ns1__EventFilter::SubtitleAddition, ""))
		return soap->error;
	if (soap_out_PointerTons1__SearchType(soap, "ns1:SubtitleAdditionSearchType", -1, &a->ns1__EventFilter::SubtitleAdditionSearchType, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:Category", -1, &a->ns1__EventFilter::Category, ""))
		return soap->error;
	if (soap_out_PointerTons1__SearchType(soap, "ns1:CategorySearchType", -1, &a->ns1__EventFilter::CategorySearchType, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:SubCategory", -1, &a->ns1__EventFilter::SubCategory, ""))
		return soap->error;
	if (soap_out_PointerTons1__SearchType(soap, "ns1:SubCategorySearchType", -1, &a->ns1__EventFilter::SubCategorySearchType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__EventFilter::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__EventFilter(soap, tag, this, type);
}

SOAP_FMAC3 ns1__EventFilter * SOAP_FMAC4 soap_in_ns1__EventFilter(struct soap *soap, const char *tag, ns1__EventFilter *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__EventFilter*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EventFilter, sizeof(ns1__EventFilter), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__EventFilter)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__EventFilter *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_OrganizerId1 = 1;
	size_t soap_flag_VenueId1 = 1;
	size_t soap_flag_KSBNumber1 = 1;
	size_t soap_flag_LSBNumber1 = 1;
	size_t soap_flag_SportRegion1 = 1;
	size_t soap_flag_OnlyVisible1 = 1;
	size_t soap_flag_OnlyWithEducationalLeave1 = 1;
	size_t soap_flag_Title1 = 1;
	size_t soap_flag_TitleSearchType1 = 1;
	size_t soap_flag_TitleAddition1 = 1;
	size_t soap_flag_TitleAdditionSearchType1 = 1;
	size_t soap_flag_Subtitle1 = 1;
	size_t soap_flag_SubtitleSearchType1 = 1;
	size_t soap_flag_SubtitleAddition1 = 1;
	size_t soap_flag_SubtitleAdditionSearchType1 = 1;
	size_t soap_flag_Category1 = 1;
	size_t soap_flag_CategorySearchType1 = 1;
	size_t soap_flag_SubCategory1 = 1;
	size_t soap_flag_SubCategorySearchType1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OrganizerId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTounsignedInt(soap, "ns1:OrganizerId", &a->ns1__EventFilter::OrganizerId, "xsd:unsignedInt"))
				{	soap_flag_OrganizerId1--;
					continue;
				}
			}
			if (soap_flag_VenueId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTounsignedInt(soap, "ns1:VenueId", &a->ns1__EventFilter::VenueId, "xsd:unsignedInt"))
				{	soap_flag_VenueId1--;
					continue;
				}
			}
			if (soap_flag_KSBNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:KSBNumber", &a->ns1__EventFilter::KSBNumber, "xsd:string"))
				{	soap_flag_KSBNumber1--;
					continue;
				}
			}
			if (soap_flag_LSBNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:LSBNumber", &a->ns1__EventFilter::LSBNumber, "xsd:string"))
				{	soap_flag_LSBNumber1--;
					continue;
				}
			}
			if (soap_flag_SportRegion1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTounsignedInt(soap, "ns1:SportRegion", &a->ns1__EventFilter::SportRegion, "xsd:unsignedInt"))
				{	soap_flag_SportRegion1--;
					continue;
				}
			}
			if (soap_flag_OnlyVisible1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTobool(soap, "ns1:OnlyVisible", &a->ns1__EventFilter::OnlyVisible, "xsd:boolean"))
				{	soap_flag_OnlyVisible1--;
					continue;
				}
			}
			if (soap_flag_OnlyWithEducationalLeave1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTobool(soap, "ns1:OnlyWithEducationalLeave", &a->ns1__EventFilter::OnlyWithEducationalLeave, "xsd:boolean"))
				{	soap_flag_OnlyWithEducationalLeave1--;
					continue;
				}
			}
			if (soap_flag_Title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Title", &a->ns1__EventFilter::Title, "xsd:string"))
				{	soap_flag_Title1--;
					continue;
				}
			}
			if (soap_flag_TitleSearchType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__SearchType(soap, "ns1:TitleSearchType", &a->ns1__EventFilter::TitleSearchType, "ns1:SearchType"))
				{	soap_flag_TitleSearchType1--;
					continue;
				}
			}
			if (soap_flag_TitleAddition1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:TitleAddition", &a->ns1__EventFilter::TitleAddition, "xsd:string"))
				{	soap_flag_TitleAddition1--;
					continue;
				}
			}
			if (soap_flag_TitleAdditionSearchType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__SearchType(soap, "ns1:TitleAdditionSearchType", &a->ns1__EventFilter::TitleAdditionSearchType, "ns1:SearchType"))
				{	soap_flag_TitleAdditionSearchType1--;
					continue;
				}
			}
			if (soap_flag_Subtitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Subtitle", &a->ns1__EventFilter::Subtitle, "xsd:string"))
				{	soap_flag_Subtitle1--;
					continue;
				}
			}
			if (soap_flag_SubtitleSearchType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__SearchType(soap, "ns1:SubtitleSearchType", &a->ns1__EventFilter::SubtitleSearchType, "ns1:SearchType"))
				{	soap_flag_SubtitleSearchType1--;
					continue;
				}
			}
			if (soap_flag_SubtitleAddition1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:SubtitleAddition", &a->ns1__EventFilter::SubtitleAddition, "xsd:string"))
				{	soap_flag_SubtitleAddition1--;
					continue;
				}
			}
			if (soap_flag_SubtitleAdditionSearchType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__SearchType(soap, "ns1:SubtitleAdditionSearchType", &a->ns1__EventFilter::SubtitleAdditionSearchType, "ns1:SearchType"))
				{	soap_flag_SubtitleAdditionSearchType1--;
					continue;
				}
			}
			if (soap_flag_Category1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Category", &a->ns1__EventFilter::Category, "xsd:string"))
				{	soap_flag_Category1--;
					continue;
				}
			}
			if (soap_flag_CategorySearchType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__SearchType(soap, "ns1:CategorySearchType", &a->ns1__EventFilter::CategorySearchType, "ns1:SearchType"))
				{	soap_flag_CategorySearchType1--;
					continue;
				}
			}
			if (soap_flag_SubCategory1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:SubCategory", &a->ns1__EventFilter::SubCategory, "xsd:string"))
				{	soap_flag_SubCategory1--;
					continue;
				}
			}
			if (soap_flag_SubCategorySearchType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__SearchType(soap, "ns1:SubCategorySearchType", &a->ns1__EventFilter::SubCategorySearchType, "ns1:SearchType"))
				{	soap_flag_SubCategorySearchType1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__EventFilter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__EventFilter, SOAP_TYPE_ns1__EventFilter, sizeof(ns1__EventFilter), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__EventFilter * SOAP_FMAC2 soap_instantiate_ns1__EventFilter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__EventFilter(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__EventFilter *p;
	size_t k = sizeof(ns1__EventFilter);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__EventFilter, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__EventFilter);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__EventFilter, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__EventFilter location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__EventFilter::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__EventFilter(soap, tag ? tag : "ns1:EventFilter", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__EventFilter::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__EventFilter(soap, this, tag, type);
}

SOAP_FMAC3 ns1__EventFilter * SOAP_FMAC4 soap_get_ns1__EventFilter(struct soap *soap, ns1__EventFilter *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EventFilter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__decimal, SOAP_TYPE_xsd__decimal, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__decimal(soap, tag ? tag : "xsd:decimal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__register_(struct soap *soap, struct __ns1__register_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__register = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__register_(struct soap *soap, const struct __ns1__register_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__register(soap, &a->ns1__register);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__register_(struct soap *soap, const char *tag, int id, const struct __ns1__register_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__register(soap, "ns1:register", -1, &a->ns1__register, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__register_ * SOAP_FMAC4 soap_in___ns1__register_(struct soap *soap, const char *tag, struct __ns1__register_ *a, const char *type)
{
	size_t soap_flag_ns1__register = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__register_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__register_, sizeof(struct __ns1__register_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__register_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__register && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__register(soap, "ns1:register", &a->ns1__register, ""))
				{	soap_flag_ns1__register--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__register_ * SOAP_FMAC2 soap_instantiate___ns1__register_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__register_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__register_ *p;
	size_t k = sizeof(struct __ns1__register_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__register_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__register_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__register_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__register_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__register_(struct soap *soap, const struct __ns1__register_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__register_(soap, tag ? tag : "-ns1:register", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__register_ * SOAP_FMAC4 soap_get___ns1__register_(struct soap *soap, struct __ns1__register_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__register_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSingleEvent_(struct soap *soap, struct __ns1__getSingleEvent_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSingleEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSingleEvent_(struct soap *soap, const struct __ns1__getSingleEvent_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSingleEvent(soap, &a->ns1__getSingleEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSingleEvent_(struct soap *soap, const char *tag, int id, const struct __ns1__getSingleEvent_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSingleEvent(soap, "ns1:getSingleEvent", -1, &a->ns1__getSingleEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSingleEvent_ * SOAP_FMAC4 soap_in___ns1__getSingleEvent_(struct soap *soap, const char *tag, struct __ns1__getSingleEvent_ *a, const char *type)
{
	size_t soap_flag_ns1__getSingleEvent = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSingleEvent_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSingleEvent_, sizeof(struct __ns1__getSingleEvent_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSingleEvent_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSingleEvent && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getSingleEvent(soap, "ns1:getSingleEvent", &a->ns1__getSingleEvent, ""))
				{	soap_flag_ns1__getSingleEvent--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getSingleEvent_ * SOAP_FMAC2 soap_instantiate___ns1__getSingleEvent_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSingleEvent_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getSingleEvent_ *p;
	size_t k = sizeof(struct __ns1__getSingleEvent_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getSingleEvent_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getSingleEvent_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getSingleEvent_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getSingleEvent_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSingleEvent_(struct soap *soap, const struct __ns1__getSingleEvent_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getSingleEvent_(soap, tag ? tag : "-ns1:getSingleEvent", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSingleEvent_ * SOAP_FMAC4 soap_get___ns1__getSingleEvent_(struct soap *soap, struct __ns1__getSingleEvent_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSingleEvent_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAllEvents_(struct soap *soap, struct __ns1__getAllEvents_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getAllEvents = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAllEvents_(struct soap *soap, const struct __ns1__getAllEvents_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getAllEvents(soap, &a->ns1__getAllEvents);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAllEvents_(struct soap *soap, const char *tag, int id, const struct __ns1__getAllEvents_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getAllEvents(soap, "ns1:getAllEvents", -1, &a->ns1__getAllEvents, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getAllEvents_ * SOAP_FMAC4 soap_in___ns1__getAllEvents_(struct soap *soap, const char *tag, struct __ns1__getAllEvents_ *a, const char *type)
{
	size_t soap_flag_ns1__getAllEvents = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getAllEvents_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getAllEvents_, sizeof(struct __ns1__getAllEvents_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getAllEvents_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getAllEvents && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getAllEvents(soap, "ns1:getAllEvents", &a->ns1__getAllEvents, ""))
				{	soap_flag_ns1__getAllEvents--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getAllEvents_ * SOAP_FMAC2 soap_instantiate___ns1__getAllEvents_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getAllEvents_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getAllEvents_ *p;
	size_t k = sizeof(struct __ns1__getAllEvents_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getAllEvents_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getAllEvents_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getAllEvents_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getAllEvents_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAllEvents_(struct soap *soap, const struct __ns1__getAllEvents_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getAllEvents_(soap, tag ? tag : "-ns1:getAllEvents", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getAllEvents_ * SOAP_FMAC4 soap_get___ns1__getAllEvents_(struct soap *soap, struct __ns1__getAllEvents_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getAllEvents_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__dumpTableFields_(struct soap *soap, struct __ns1__dumpTableFields_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__dumpTableFields = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__dumpTableFields_(struct soap *soap, const struct __ns1__dumpTableFields_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__dumpTableFields(soap, &a->ns1__dumpTableFields);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__dumpTableFields_(struct soap *soap, const char *tag, int id, const struct __ns1__dumpTableFields_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__dumpTableFields(soap, "ns1:dumpTableFields", -1, &a->ns1__dumpTableFields, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__dumpTableFields_ * SOAP_FMAC4 soap_in___ns1__dumpTableFields_(struct soap *soap, const char *tag, struct __ns1__dumpTableFields_ *a, const char *type)
{
	size_t soap_flag_ns1__dumpTableFields = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__dumpTableFields_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__dumpTableFields_, sizeof(struct __ns1__dumpTableFields_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__dumpTableFields_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__dumpTableFields && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__dumpTableFields(soap, "ns1:dumpTableFields", &a->ns1__dumpTableFields, ""))
				{	soap_flag_ns1__dumpTableFields--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__dumpTableFields_ * SOAP_FMAC2 soap_instantiate___ns1__dumpTableFields_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__dumpTableFields_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__dumpTableFields_ *p;
	size_t k = sizeof(struct __ns1__dumpTableFields_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__dumpTableFields_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__dumpTableFields_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__dumpTableFields_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__dumpTableFields_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__dumpTableFields_(struct soap *soap, const struct __ns1__dumpTableFields_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__dumpTableFields_(soap, tag ? tag : "-ns1:dumpTableFields", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__dumpTableFields_ * SOAP_FMAC4 soap_get___ns1__dumpTableFields_(struct soap *soap, struct __ns1__dumpTableFields_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__dumpTableFields_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__register(struct soap *soap, struct __ns1__register *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__register = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__register(struct soap *soap, const struct __ns1__register *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__register(soap, &a->ns1__register);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__register(struct soap *soap, const char *tag, int id, const struct __ns1__register *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__register(soap, "ns1:register", -1, &a->ns1__register, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__register * SOAP_FMAC4 soap_in___ns1__register(struct soap *soap, const char *tag, struct __ns1__register *a, const char *type)
{
	size_t soap_flag_ns1__register = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__register*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__register, sizeof(struct __ns1__register), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__register(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__register && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__register(soap, "ns1:register", &a->ns1__register, ""))
				{	soap_flag_ns1__register--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__register * SOAP_FMAC2 soap_instantiate___ns1__register(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__register(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__register *p;
	size_t k = sizeof(struct __ns1__register);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__register, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__register);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__register, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__register location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__register(struct soap *soap, const struct __ns1__register *a, const char *tag, const char *type)
{
	if (soap_out___ns1__register(soap, tag ? tag : "-ns1:register", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__register * SOAP_FMAC4 soap_get___ns1__register(struct soap *soap, struct __ns1__register *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSingleEvent(struct soap *soap, struct __ns1__getSingleEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSingleEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSingleEvent(struct soap *soap, const struct __ns1__getSingleEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSingleEvent(soap, &a->ns1__getSingleEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSingleEvent(struct soap *soap, const char *tag, int id, const struct __ns1__getSingleEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSingleEvent(soap, "ns1:getSingleEvent", -1, &a->ns1__getSingleEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSingleEvent * SOAP_FMAC4 soap_in___ns1__getSingleEvent(struct soap *soap, const char *tag, struct __ns1__getSingleEvent *a, const char *type)
{
	size_t soap_flag_ns1__getSingleEvent = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSingleEvent*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSingleEvent, sizeof(struct __ns1__getSingleEvent), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSingleEvent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSingleEvent && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getSingleEvent(soap, "ns1:getSingleEvent", &a->ns1__getSingleEvent, ""))
				{	soap_flag_ns1__getSingleEvent--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getSingleEvent * SOAP_FMAC2 soap_instantiate___ns1__getSingleEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSingleEvent(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getSingleEvent *p;
	size_t k = sizeof(struct __ns1__getSingleEvent);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getSingleEvent, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getSingleEvent);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getSingleEvent, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getSingleEvent location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSingleEvent(struct soap *soap, const struct __ns1__getSingleEvent *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getSingleEvent(soap, tag ? tag : "-ns1:getSingleEvent", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSingleEvent * SOAP_FMAC4 soap_get___ns1__getSingleEvent(struct soap *soap, struct __ns1__getSingleEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSingleEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAllEvents(struct soap *soap, struct __ns1__getAllEvents *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getAllEvents = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAllEvents(struct soap *soap, const struct __ns1__getAllEvents *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getAllEvents(soap, &a->ns1__getAllEvents);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAllEvents(struct soap *soap, const char *tag, int id, const struct __ns1__getAllEvents *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getAllEvents(soap, "ns1:getAllEvents", -1, &a->ns1__getAllEvents, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getAllEvents * SOAP_FMAC4 soap_in___ns1__getAllEvents(struct soap *soap, const char *tag, struct __ns1__getAllEvents *a, const char *type)
{
	size_t soap_flag_ns1__getAllEvents = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getAllEvents*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getAllEvents, sizeof(struct __ns1__getAllEvents), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getAllEvents(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getAllEvents && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getAllEvents(soap, "ns1:getAllEvents", &a->ns1__getAllEvents, ""))
				{	soap_flag_ns1__getAllEvents--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getAllEvents * SOAP_FMAC2 soap_instantiate___ns1__getAllEvents(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getAllEvents(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getAllEvents *p;
	size_t k = sizeof(struct __ns1__getAllEvents);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getAllEvents, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getAllEvents);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getAllEvents, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getAllEvents location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAllEvents(struct soap *soap, const struct __ns1__getAllEvents *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getAllEvents(soap, tag ? tag : "-ns1:getAllEvents", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getAllEvents * SOAP_FMAC4 soap_get___ns1__getAllEvents(struct soap *soap, struct __ns1__getAllEvents *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getAllEvents(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__dumpTableFields(struct soap *soap, struct __ns1__dumpTableFields *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__dumpTableFields = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__dumpTableFields(struct soap *soap, const struct __ns1__dumpTableFields *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__dumpTableFields(soap, &a->ns1__dumpTableFields);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__dumpTableFields(struct soap *soap, const char *tag, int id, const struct __ns1__dumpTableFields *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__dumpTableFields(soap, "ns1:dumpTableFields", -1, &a->ns1__dumpTableFields, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__dumpTableFields * SOAP_FMAC4 soap_in___ns1__dumpTableFields(struct soap *soap, const char *tag, struct __ns1__dumpTableFields *a, const char *type)
{
	size_t soap_flag_ns1__dumpTableFields = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__dumpTableFields*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__dumpTableFields, sizeof(struct __ns1__dumpTableFields), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__dumpTableFields(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__dumpTableFields && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__dumpTableFields(soap, "ns1:dumpTableFields", &a->ns1__dumpTableFields, ""))
				{	soap_flag_ns1__dumpTableFields--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__dumpTableFields * SOAP_FMAC2 soap_instantiate___ns1__dumpTableFields(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__dumpTableFields(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__dumpTableFields *p;
	size_t k = sizeof(struct __ns1__dumpTableFields);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__dumpTableFields, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__dumpTableFields);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__dumpTableFields, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__dumpTableFields location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__dumpTableFields(struct soap *soap, const struct __ns1__dumpTableFields *a, const char *tag, const char *type)
{
	if (soap_out___ns1__dumpTableFields(soap, tag ? tag : "-ns1:dumpTableFields", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__dumpTableFields * SOAP_FMAC4 soap_get___ns1__dumpTableFields(struct soap *soap, struct __ns1__dumpTableFields *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__dumpTableFields(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__register(struct soap *soap, _ns1__register *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__register))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__register(struct soap *soap, const char *tag, int id, _ns1__register *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__register, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__register ? type : NULL);
}

SOAP_FMAC3 _ns1__register ** SOAP_FMAC4 soap_in_PointerTo_ns1__register(struct soap *soap, const char *tag, _ns1__register **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__register **)soap_malloc(soap, sizeof(_ns1__register *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__register *)soap_instantiate__ns1__register(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__register **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__register, sizeof(_ns1__register), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__register(struct soap *soap, _ns1__register *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__register(soap, tag ? tag : "ns1:register", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__register ** SOAP_FMAC4 soap_get_PointerTo_ns1__register(struct soap *soap, _ns1__register **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSingleEvent(struct soap *soap, _ns1__getSingleEvent *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getSingleEvent))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSingleEvent(struct soap *soap, const char *tag, int id, _ns1__getSingleEvent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getSingleEvent, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getSingleEvent ? type : NULL);
}

SOAP_FMAC3 _ns1__getSingleEvent ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSingleEvent(struct soap *soap, const char *tag, _ns1__getSingleEvent **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getSingleEvent **)soap_malloc(soap, sizeof(_ns1__getSingleEvent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getSingleEvent *)soap_instantiate__ns1__getSingleEvent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getSingleEvent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getSingleEvent, sizeof(_ns1__getSingleEvent), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSingleEvent(struct soap *soap, _ns1__getSingleEvent *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getSingleEvent(soap, tag ? tag : "ns1:getSingleEvent", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getSingleEvent ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSingleEvent(struct soap *soap, _ns1__getSingleEvent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getSingleEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getAllEvents(struct soap *soap, _ns1__getAllEvents *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getAllEvents))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getAllEvents(struct soap *soap, const char *tag, int id, _ns1__getAllEvents *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getAllEvents, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getAllEvents ? type : NULL);
}

SOAP_FMAC3 _ns1__getAllEvents ** SOAP_FMAC4 soap_in_PointerTo_ns1__getAllEvents(struct soap *soap, const char *tag, _ns1__getAllEvents **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getAllEvents **)soap_malloc(soap, sizeof(_ns1__getAllEvents *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getAllEvents *)soap_instantiate__ns1__getAllEvents(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getAllEvents **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getAllEvents, sizeof(_ns1__getAllEvents), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getAllEvents(struct soap *soap, _ns1__getAllEvents *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getAllEvents(soap, tag ? tag : "ns1:getAllEvents", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getAllEvents ** SOAP_FMAC4 soap_get_PointerTo_ns1__getAllEvents(struct soap *soap, _ns1__getAllEvents **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getAllEvents(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__dumpTableFields(struct soap *soap, _ns1__dumpTableFields *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__dumpTableFields))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__dumpTableFields(struct soap *soap, const char *tag, int id, _ns1__dumpTableFields *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__dumpTableFields, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__dumpTableFields ? type : NULL);
}

SOAP_FMAC3 _ns1__dumpTableFields ** SOAP_FMAC4 soap_in_PointerTo_ns1__dumpTableFields(struct soap *soap, const char *tag, _ns1__dumpTableFields **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__dumpTableFields **)soap_malloc(soap, sizeof(_ns1__dumpTableFields *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__dumpTableFields *)soap_instantiate__ns1__dumpTableFields(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__dumpTableFields **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__dumpTableFields, sizeof(_ns1__dumpTableFields), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__dumpTableFields(struct soap *soap, _ns1__dumpTableFields *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__dumpTableFields(soap, tag ? tag : "ns1:dumpTableFields", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__dumpTableFields ** SOAP_FMAC4 soap_get_PointerTo_ns1__dumpTableFields(struct soap *soap, _ns1__dumpTableFields **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__dumpTableFields(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__WorkshopTimeslot(struct soap *soap, ns1__WorkshopTimeslot *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__WorkshopTimeslot))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__WorkshopTimeslot(struct soap *soap, const char *tag, int id, ns1__WorkshopTimeslot *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__WorkshopTimeslot, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__WorkshopTimeslot ? type : NULL);
}

SOAP_FMAC3 ns1__WorkshopTimeslot ** SOAP_FMAC4 soap_in_PointerTons1__WorkshopTimeslot(struct soap *soap, const char *tag, ns1__WorkshopTimeslot **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__WorkshopTimeslot **)soap_malloc(soap, sizeof(ns1__WorkshopTimeslot *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__WorkshopTimeslot *)soap_instantiate_ns1__WorkshopTimeslot(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__WorkshopTimeslot **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__WorkshopTimeslot, sizeof(ns1__WorkshopTimeslot), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__WorkshopTimeslot(struct soap *soap, ns1__WorkshopTimeslot *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__WorkshopTimeslot(soap, tag ? tag : "ns1:WorkshopTimeslot", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__WorkshopTimeslot ** SOAP_FMAC4 soap_get_PointerTons1__WorkshopTimeslot(struct soap *soap, ns1__WorkshopTimeslot **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__WorkshopTimeslot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Address(struct soap *soap, ns1__Address *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Address))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Address(struct soap *soap, const char *tag, int id, ns1__Address *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Address, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__Address ? type : NULL);
}

SOAP_FMAC3 ns1__Address ** SOAP_FMAC4 soap_in_PointerTons1__Address(struct soap *soap, const char *tag, ns1__Address **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Address **)soap_malloc(soap, sizeof(ns1__Address *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Address *)soap_instantiate_ns1__Address(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__Address **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Address, sizeof(ns1__Address), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Address(struct soap *soap, ns1__Address *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__Address(soap, tag ? tag : "ns1:Address", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Address ** SOAP_FMAC4 soap_get_PointerTons1__Address(struct soap *soap, ns1__Address **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Address(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventFee(struct soap *soap, ns1__EventFee *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__EventFee))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventFee(struct soap *soap, const char *tag, int id, ns1__EventFee *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__EventFee, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__EventFee ? type : NULL);
}

SOAP_FMAC3 ns1__EventFee ** SOAP_FMAC4 soap_in_PointerTons1__EventFee(struct soap *soap, const char *tag, ns1__EventFee **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EventFee **)soap_malloc(soap, sizeof(ns1__EventFee *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__EventFee *)soap_instantiate_ns1__EventFee(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__EventFee **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__EventFee, sizeof(ns1__EventFee), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventFee(struct soap *soap, ns1__EventFee *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__EventFee(soap, tag ? tag : "ns1:EventFee", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__EventFee ** SOAP_FMAC4 soap_get_PointerTons1__EventFee(struct soap *soap, ns1__EventFee **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__EventFee(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventBase(struct soap *soap, ns1__EventBase *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__EventBase))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventBase(struct soap *soap, const char *tag, int id, ns1__EventBase *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__EventBase, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__EventBase ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__EventBase ** SOAP_FMAC4 soap_in_PointerTons1__EventBase(struct soap *soap, const char *tag, ns1__EventBase **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EventBase **)soap_malloc(soap, sizeof(ns1__EventBase *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__EventBase *)soap_instantiate_ns1__EventBase(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__EventBase **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__EventBase, sizeof(ns1__EventBase), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventBase(struct soap *soap, ns1__EventBase *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__EventBase(soap, tag ? tag : "ns1:EventBase", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__EventBase ** SOAP_FMAC4 soap_get_PointerTons1__EventBase(struct soap *soap, ns1__EventBase **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__EventBase(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventRegistrationWarning(struct soap *soap, ns1__EventRegistrationWarning *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__EventRegistrationWarning))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventRegistrationWarning(struct soap *soap, const char *tag, int id, ns1__EventRegistrationWarning *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__EventRegistrationWarning, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__EventRegistrationWarning ? type : NULL);
}

SOAP_FMAC3 ns1__EventRegistrationWarning ** SOAP_FMAC4 soap_in_PointerTons1__EventRegistrationWarning(struct soap *soap, const char *tag, ns1__EventRegistrationWarning **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EventRegistrationWarning **)soap_malloc(soap, sizeof(ns1__EventRegistrationWarning *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__EventRegistrationWarning *)soap_instantiate_ns1__EventRegistrationWarning(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__EventRegistrationWarning **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__EventRegistrationWarning, sizeof(ns1__EventRegistrationWarning), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventRegistrationWarning(struct soap *soap, ns1__EventRegistrationWarning *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__EventRegistrationWarning(soap, tag ? tag : "ns1:EventRegistrationWarning", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__EventRegistrationWarning ** SOAP_FMAC4 soap_get_PointerTons1__EventRegistrationWarning(struct soap *soap, ns1__EventRegistrationWarning **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__EventRegistrationWarning(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventRegistration(struct soap *soap, ns1__EventRegistration *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__EventRegistration))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventRegistration(struct soap *soap, const char *tag, int id, ns1__EventRegistration *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__EventRegistration, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__EventRegistration ? type : NULL);
}

SOAP_FMAC3 ns1__EventRegistration ** SOAP_FMAC4 soap_in_PointerTons1__EventRegistration(struct soap *soap, const char *tag, ns1__EventRegistration **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EventRegistration **)soap_malloc(soap, sizeof(ns1__EventRegistration *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__EventRegistration *)soap_instantiate_ns1__EventRegistration(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__EventRegistration **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__EventRegistration, sizeof(ns1__EventRegistration), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventRegistration(struct soap *soap, ns1__EventRegistration *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__EventRegistration(soap, tag ? tag : "ns1:EventRegistration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__EventRegistration ** SOAP_FMAC4 soap_get_PointerTons1__EventRegistration(struct soap *soap, ns1__EventRegistration **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__EventRegistration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Event(struct soap *soap, ns1__Event *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Event))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Event(struct soap *soap, const char *tag, int id, ns1__Event *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Event, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__Event ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__Event ** SOAP_FMAC4 soap_in_PointerTons1__Event(struct soap *soap, const char *tag, ns1__Event **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Event **)soap_malloc(soap, sizeof(ns1__Event *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Event *)soap_instantiate_ns1__Event(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__Event **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Event, sizeof(ns1__Event), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Event(struct soap *soap, ns1__Event *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__Event(soap, tag ? tag : "ns1:Event", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Event ** SOAP_FMAC4 soap_get_PointerTons1__Event(struct soap *soap, ns1__Event **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Event(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventMini(struct soap *soap, ns1__EventMini *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__EventMini))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventMini(struct soap *soap, const char *tag, int id, ns1__EventMini *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__EventMini, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__EventMini ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__EventMini ** SOAP_FMAC4 soap_in_PointerTons1__EventMini(struct soap *soap, const char *tag, ns1__EventMini **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EventMini **)soap_malloc(soap, sizeof(ns1__EventMini *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__EventMini *)soap_instantiate_ns1__EventMini(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__EventMini **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__EventMini, sizeof(ns1__EventMini), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventMini(struct soap *soap, ns1__EventMini *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__EventMini(soap, tag ? tag : "ns1:EventMini", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__EventMini ** SOAP_FMAC4 soap_get_PointerTons1__EventMini(struct soap *soap, ns1__EventMini **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__EventMini(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventFilter(struct soap *soap, ns1__EventFilter *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__EventFilter))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventFilter(struct soap *soap, const char *tag, int id, ns1__EventFilter *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__EventFilter, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__EventFilter ? type : NULL);
}

SOAP_FMAC3 ns1__EventFilter ** SOAP_FMAC4 soap_in_PointerTons1__EventFilter(struct soap *soap, const char *tag, ns1__EventFilter **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EventFilter **)soap_malloc(soap, sizeof(ns1__EventFilter *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__EventFilter *)soap_instantiate_ns1__EventFilter(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__EventFilter **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__EventFilter, sizeof(ns1__EventFilter), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventFilter(struct soap *soap, ns1__EventFilter *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__EventFilter(soap, tag ? tag : "ns1:EventFilter", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__EventFilter ** SOAP_FMAC4 soap_get_PointerTons1__EventFilter(struct soap *soap, ns1__EventFilter **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__EventFilter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__KeyValue(struct soap *soap, ns1__KeyValue *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__KeyValue))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__KeyValue(struct soap *soap, const char *tag, int id, ns1__KeyValue *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__KeyValue, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__KeyValue ? type : NULL);
}

SOAP_FMAC3 ns1__KeyValue ** SOAP_FMAC4 soap_in_PointerTons1__KeyValue(struct soap *soap, const char *tag, ns1__KeyValue **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__KeyValue **)soap_malloc(soap, sizeof(ns1__KeyValue *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__KeyValue *)soap_instantiate_ns1__KeyValue(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__KeyValue **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__KeyValue, sizeof(ns1__KeyValue), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__KeyValue(struct soap *soap, ns1__KeyValue *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__KeyValue(soap, tag ? tag : "ns1:KeyValue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__KeyValue ** SOAP_FMAC4 soap_get_PointerTons1__KeyValue(struct soap *soap, ns1__KeyValue **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__KeyValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventRegistrationEvent(struct soap *soap, ns1__EventRegistrationEvent *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__EventRegistrationEvent))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventRegistrationEvent(struct soap *soap, const char *tag, int id, ns1__EventRegistrationEvent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__EventRegistrationEvent, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__EventRegistrationEvent ? type : NULL);
}

SOAP_FMAC3 ns1__EventRegistrationEvent ** SOAP_FMAC4 soap_in_PointerTons1__EventRegistrationEvent(struct soap *soap, const char *tag, ns1__EventRegistrationEvent **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EventRegistrationEvent **)soap_malloc(soap, sizeof(ns1__EventRegistrationEvent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__EventRegistrationEvent *)soap_instantiate_ns1__EventRegistrationEvent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__EventRegistrationEvent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__EventRegistrationEvent, sizeof(ns1__EventRegistrationEvent), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventRegistrationEvent(struct soap *soap, ns1__EventRegistrationEvent *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__EventRegistrationEvent(soap, tag ? tag : "ns1:EventRegistrationEvent", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__EventRegistrationEvent ** SOAP_FMAC4 soap_get_PointerTons1__EventRegistrationEvent(struct soap *soap, ns1__EventRegistrationEvent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__EventRegistrationEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Workshop(struct soap *soap, ns1__Workshop *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Workshop))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Workshop(struct soap *soap, const char *tag, int id, ns1__Workshop *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Workshop, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__Workshop ? type : NULL);
}

SOAP_FMAC3 ns1__Workshop ** SOAP_FMAC4 soap_in_PointerTons1__Workshop(struct soap *soap, const char *tag, ns1__Workshop **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Workshop **)soap_malloc(soap, sizeof(ns1__Workshop *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Workshop *)soap_instantiate_ns1__Workshop(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__Workshop **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Workshop, sizeof(ns1__Workshop), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Workshop(struct soap *soap, ns1__Workshop *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__Workshop(soap, tag ? tag : "ns1:Workshop", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Workshop ** SOAP_FMAC4 soap_get_PointerTons1__Workshop(struct soap *soap, ns1__Workshop **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Workshop(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SearchType(struct soap *soap, enum ns1__SearchType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_ns1__SearchType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SearchType(struct soap *soap, const char *tag, int id, enum ns1__SearchType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__SearchType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns1__SearchType(soap, tag, id, *a, type);
}

SOAP_FMAC3 enum ns1__SearchType ** SOAP_FMAC4 soap_in_PointerTons1__SearchType(struct soap *soap, const char *tag, enum ns1__SearchType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (enum ns1__SearchType **)soap_malloc(soap, sizeof(enum ns1__SearchType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns1__SearchType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (enum ns1__SearchType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__SearchType, sizeof(enum ns1__SearchType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SearchType(struct soap *soap, enum ns1__SearchType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__SearchType(soap, tag ? tag : "ns1:SearchType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns1__SearchType ** SOAP_FMAC4 soap_get_PointerTons1__SearchType(struct soap *soap, enum ns1__SearchType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__SearchType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_bool);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_bool, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_bool, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTobool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap *soap, unsigned int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedInt);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap *soap, const char *tag, int id, unsigned int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedInt, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedInt(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap *soap, const char *tag, unsigned int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned int **)soap_malloc(soap, sizeof(unsigned int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedInt(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedInt, sizeof(unsigned int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap *soap, unsigned int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap *soap, unsigned int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap *soap, std::vector<ns1__WorkshopTimeslot *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap *soap, const std::vector<ns1__WorkshopTimeslot *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__WorkshopTimeslot *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__WorkshopTimeslot(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap *soap, const char *tag, int id, const std::vector<ns1__WorkshopTimeslot *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__WorkshopTimeslot *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__WorkshopTimeslot(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__WorkshopTimeslot *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap *soap, const char *tag, std::vector<ns1__WorkshopTimeslot *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__WorkshopTimeslot *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__WorkshopTimeslot, SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkshopTimeslot, sizeof(ns1__WorkshopTimeslot), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__WorkshopTimeslot(soap, tag, NULL, "ns1:WorkshopTimeslot"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__WorkshopTimeslot(soap, tag, &n, "ns1:WorkshopTimeslot"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__WorkshopTimeslot *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__WorkshopTimeslot *> *p;
	size_t k = sizeof(std::vector<ns1__WorkshopTimeslot *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkshopTimeslot, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__WorkshopTimeslot *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__WorkshopTimeslot *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__WorkshopTimeslot *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventFee(struct soap *soap, std::vector<ns1__EventFee *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventFee(struct soap *soap, const std::vector<ns1__EventFee *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__EventFee *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__EventFee(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventFee(struct soap *soap, const char *tag, int id, const std::vector<ns1__EventFee *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__EventFee *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__EventFee(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__EventFee *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventFee(struct soap *soap, const char *tag, std::vector<ns1__EventFee *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__EventFee(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__EventFee *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__EventFee, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventFee, sizeof(ns1__EventFee), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__EventFee(soap, tag, NULL, "ns1:EventFee"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__EventFee(soap, tag, &n, "ns1:EventFee"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__EventFee *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventFee(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__EventFee(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__EventFee *> *p;
	size_t k = sizeof(std::vector<ns1__EventFee *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventFee, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__EventFee *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__EventFee *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__EventFee *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventBase(struct soap *soap, std::vector<ns1__EventBase *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventBase(struct soap *soap, const std::vector<ns1__EventBase *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__EventBase *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__EventBase(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventBase(struct soap *soap, const char *tag, int id, const std::vector<ns1__EventBase *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__EventBase *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__EventBase(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__EventBase *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventBase(struct soap *soap, const char *tag, std::vector<ns1__EventBase *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__EventBase(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__EventBase *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__EventBase, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventBase, sizeof(ns1__EventBase), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__EventBase(soap, tag, NULL, "ns1:EventBase"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__EventBase(soap, tag, &n, "ns1:EventBase"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__EventBase *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventBase(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__EventBase(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__EventBase *> *p;
	size_t k = sizeof(std::vector<ns1__EventBase *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventBase, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__EventBase *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__EventBase *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__EventBase *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap *soap, std::vector<ns1__EventRegistrationWarning *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap *soap, const std::vector<ns1__EventRegistrationWarning *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__EventRegistrationWarning *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__EventRegistrationWarning(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap *soap, const char *tag, int id, const std::vector<ns1__EventRegistrationWarning *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__EventRegistrationWarning *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__EventRegistrationWarning(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__EventRegistrationWarning *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap *soap, const char *tag, std::vector<ns1__EventRegistrationWarning *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__EventRegistrationWarning *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__EventRegistrationWarning, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationWarning, sizeof(ns1__EventRegistrationWarning), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__EventRegistrationWarning(soap, tag, NULL, "ns1:EventRegistrationWarning"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__EventRegistrationWarning(soap, tag, &n, "ns1:EventRegistrationWarning"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__EventRegistrationWarning *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__EventRegistrationWarning *> *p;
	size_t k = sizeof(std::vector<ns1__EventRegistrationWarning *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationWarning, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__EventRegistrationWarning *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__EventRegistrationWarning *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__EventRegistrationWarning *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventMini(struct soap *soap, std::vector<ns1__EventMini *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventMini(struct soap *soap, const std::vector<ns1__EventMini *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__EventMini *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__EventMini(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventMini(struct soap *soap, const char *tag, int id, const std::vector<ns1__EventMini *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__EventMini *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__EventMini(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__EventMini *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventMini(struct soap *soap, const char *tag, std::vector<ns1__EventMini *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__EventMini(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__EventMini *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__EventMini, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventMini, sizeof(ns1__EventMini), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__EventMini(soap, tag, NULL, "ns1:EventMini"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__EventMini(soap, tag, &n, "ns1:EventMini"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__EventMini *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventMini(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__EventMini(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__EventMini *> *p;
	size_t k = sizeof(std::vector<ns1__EventMini *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventMini, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__EventMini *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__EventMini *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__EventMini *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__KeyValue(struct soap *soap, std::vector<ns1__KeyValue *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__KeyValue(struct soap *soap, const std::vector<ns1__KeyValue *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__KeyValue *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__KeyValue(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__KeyValue(struct soap *soap, const char *tag, int id, const std::vector<ns1__KeyValue *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__KeyValue *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__KeyValue(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__KeyValue *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__KeyValue(struct soap *soap, const char *tag, std::vector<ns1__KeyValue *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__KeyValue(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__KeyValue *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__KeyValue, SOAP_TYPE_std__vectorTemplateOfPointerTons1__KeyValue, sizeof(ns1__KeyValue), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__KeyValue(soap, tag, NULL, "ns1:KeyValue"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__KeyValue(soap, tag, &n, "ns1:KeyValue"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__KeyValue *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__KeyValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__KeyValue(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__KeyValue *> *p;
	size_t k = sizeof(std::vector<ns1__KeyValue *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__KeyValue, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__KeyValue *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__KeyValue *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__KeyValue *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfunsignedInt(struct soap *soap, std::vector<unsigned int> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfunsignedInt(struct soap *soap, const std::vector<unsigned int> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfunsignedInt(struct soap *soap, const char *tag, int id, const std::vector<unsigned int> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<unsigned int> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_unsignedInt(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<unsigned int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfunsignedInt(struct soap *soap, const char *tag, std::vector<unsigned int> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfunsignedInt(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		unsigned int n;
		soap_default_unsignedInt(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_unsignedInt, SOAP_TYPE_std__vectorTemplateOfunsignedInt, sizeof(unsigned int), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in_unsignedInt(soap, tag, NULL, "xsd:unsignedInt"))
				break;
		}
		else
		{	if (!soap_in_unsignedInt(soap, tag, &n, "xsd:unsignedInt"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<unsigned int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfunsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfunsignedInt(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<unsigned int> *p;
	size_t k = sizeof(std::vector<unsigned int> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfunsignedInt, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<unsigned int> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<unsigned int> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<unsigned int>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap *soap, std::vector<ns1__EventRegistrationEvent *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap *soap, const std::vector<ns1__EventRegistrationEvent *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__EventRegistrationEvent *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__EventRegistrationEvent(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap *soap, const char *tag, int id, const std::vector<ns1__EventRegistrationEvent *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__EventRegistrationEvent *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__EventRegistrationEvent(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__EventRegistrationEvent *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap *soap, const char *tag, std::vector<ns1__EventRegistrationEvent *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__EventRegistrationEvent *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__EventRegistrationEvent, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationEvent, sizeof(ns1__EventRegistrationEvent), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__EventRegistrationEvent(soap, tag, NULL, "ns1:EventRegistrationEvent"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__EventRegistrationEvent(soap, tag, &n, "ns1:EventRegistrationEvent"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__EventRegistrationEvent *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__EventRegistrationEvent *> *p;
	size_t k = sizeof(std::vector<ns1__EventRegistrationEvent *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationEvent, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__EventRegistrationEvent *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__EventRegistrationEvent *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__EventRegistrationEvent *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Workshop(struct soap *soap, std::vector<ns1__Workshop *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Workshop(struct soap *soap, const std::vector<ns1__Workshop *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__Workshop *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__Workshop(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Workshop(struct soap *soap, const char *tag, int id, const std::vector<ns1__Workshop *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__Workshop *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__Workshop(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__Workshop *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Workshop(struct soap *soap, const char *tag, std::vector<ns1__Workshop *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__Workshop(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__Workshop *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__Workshop, SOAP_TYPE_std__vectorTemplateOfPointerTons1__Workshop, sizeof(ns1__Workshop), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__Workshop(soap, tag, NULL, "ns1:Workshop"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__Workshop(soap, tag, &n, "ns1:Workshop"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__Workshop *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Workshop(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__Workshop(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__Workshop *> *p;
	size_t k = sizeof(std::vector<ns1__Workshop *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__Workshop, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__Workshop *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__Workshop *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__Workshop *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
