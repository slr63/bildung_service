/* soapH.h
   Generated by gSOAP 2.8.104 for bildung.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_DEFINED
#define SOAP_TYPE_xsd__unsignedByte_DEFINED

inline void soap_default_xsd__unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__unsignedByte
	*a = SOAP_DEFAULT_xsd__unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

#define soap_xsd__unsignedByte2s soap_unsignedByte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);

#define soap_s2xsd__unsignedByte soap_s2unsignedByte

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);

#define soap_instantiate_xsd__unsignedByte soap_instantiate_unsignedByte


#define soap_new_xsd__unsignedByte soap_new_unsignedByte

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_xsd__unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_xsd__unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SearchType_DEFINED
#define SOAP_TYPE_ns1__SearchType_DEFINED

inline void soap_default_ns1__SearchType(struct soap *soap, enum ns1__SearchType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__SearchType
	*a = SOAP_DEFAULT_ns1__SearchType;
#else
	*a = (enum ns1__SearchType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SearchType(struct soap*, const char*, int, const enum ns1__SearchType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__SearchType2s(struct soap*, enum ns1__SearchType);
SOAP_FMAC3 enum ns1__SearchType * SOAP_FMAC4 soap_in_ns1__SearchType(struct soap*, const char*, enum ns1__SearchType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__SearchType(struct soap*, const char*, enum ns1__SearchType *);

SOAP_FMAC3 enum ns1__SearchType * SOAP_FMAC4 soap_new_ns1__SearchType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SearchType(struct soap*, const enum ns1__SearchType *, const char*, const char*);

inline int soap_write_ns1__SearchType(struct soap *soap, enum ns1__SearchType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__SearchType(soap, p, "ns1:SearchType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__SearchType(struct soap *soap, const char *URL, enum ns1__SearchType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SearchType(soap, p, "ns1:SearchType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SearchType(struct soap *soap, const char *URL, enum ns1__SearchType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SearchType(soap, p, "ns1:SearchType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SearchType(struct soap *soap, const char *URL, enum ns1__SearchType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SearchType(soap, p, "ns1:SearchType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__SearchType * SOAP_FMAC4 soap_get_ns1__SearchType(struct soap*, enum ns1__SearchType *, const char*, const char*);

inline int soap_read_ns1__SearchType(struct soap *soap, enum ns1__SearchType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__SearchType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SearchType(struct soap *soap, const char *URL, enum ns1__SearchType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SearchType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SearchType(struct soap *soap, enum ns1__SearchType *p)
{
	if (::soap_read_ns1__SearchType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__registerResponse_DEFINED
#define SOAP_TYPE__ns1__registerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__registerResponse(struct soap*, const char*, int, const _ns1__registerResponse *, const char*);
SOAP_FMAC3 _ns1__registerResponse * SOAP_FMAC4 soap_in__ns1__registerResponse(struct soap*, const char*, _ns1__registerResponse *, const char*);
SOAP_FMAC1 _ns1__registerResponse * SOAP_FMAC2 soap_instantiate__ns1__registerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__registerResponse * soap_new__ns1__registerResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__registerResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__registerResponse * soap_new_req__ns1__registerResponse(
	struct soap *soap)
{
	_ns1__registerResponse *_p = ::soap_new__ns1__registerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__registerResponse * soap_new_set__ns1__registerResponse(
	struct soap *soap,
	const std::vector<ns1__EventRegistrationWarning *> & registerResult)
{
	_ns1__registerResponse *_p = ::soap_new__ns1__registerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__registerResponse::registerResult = registerResult;
	}
	return _p;
}

inline int soap_write__ns1__registerResponse(struct soap *soap, _ns1__registerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:registerResponse", p->soap_type() == SOAP_TYPE__ns1__registerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__registerResponse(struct soap *soap, const char *URL, _ns1__registerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:registerResponse", p->soap_type() == SOAP_TYPE__ns1__registerResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__registerResponse(struct soap *soap, const char *URL, _ns1__registerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:registerResponse", p->soap_type() == SOAP_TYPE__ns1__registerResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__registerResponse(struct soap *soap, const char *URL, _ns1__registerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:registerResponse", p->soap_type() == SOAP_TYPE__ns1__registerResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__registerResponse * SOAP_FMAC4 soap_get__ns1__registerResponse(struct soap*, _ns1__registerResponse *, const char*, const char*);

inline int soap_read__ns1__registerResponse(struct soap *soap, _ns1__registerResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__registerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__registerResponse(struct soap *soap, const char *URL, _ns1__registerResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__registerResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__registerResponse(struct soap *soap, _ns1__registerResponse *p)
{
	if (::soap_read__ns1__registerResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__register_DEFINED
#define SOAP_TYPE__ns1__register_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__register(struct soap*, const char*, int, const _ns1__register *, const char*);
SOAP_FMAC3 _ns1__register * SOAP_FMAC4 soap_in__ns1__register(struct soap*, const char*, _ns1__register *, const char*);
SOAP_FMAC1 _ns1__register * SOAP_FMAC2 soap_instantiate__ns1__register(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__register * soap_new__ns1__register(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__register(soap, n, NULL, NULL, NULL);
}

inline _ns1__register * soap_new_req__ns1__register(
	struct soap *soap)
{
	_ns1__register *_p = ::soap_new__ns1__register(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__register * soap_new_set__ns1__register(
	struct soap *soap,
	ns1__EventRegistration *registrationData)
{
	_ns1__register *_p = ::soap_new__ns1__register(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__register::registrationData = registrationData;
	}
	return _p;
}

inline int soap_write__ns1__register(struct soap *soap, _ns1__register const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:register", p->soap_type() == SOAP_TYPE__ns1__register ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__register(struct soap *soap, const char *URL, _ns1__register const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:register", p->soap_type() == SOAP_TYPE__ns1__register ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__register(struct soap *soap, const char *URL, _ns1__register const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:register", p->soap_type() == SOAP_TYPE__ns1__register ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__register(struct soap *soap, const char *URL, _ns1__register const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:register", p->soap_type() == SOAP_TYPE__ns1__register ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__register * SOAP_FMAC4 soap_get__ns1__register(struct soap*, _ns1__register *, const char*, const char*);

inline int soap_read__ns1__register(struct soap *soap, _ns1__register *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__register(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__register(struct soap *soap, const char *URL, _ns1__register *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__register(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__register(struct soap *soap, _ns1__register *p)
{
	if (::soap_read__ns1__register(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getSingleEventResponse_DEFINED
#define SOAP_TYPE__ns1__getSingleEventResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSingleEventResponse(struct soap*, const char*, int, const _ns1__getSingleEventResponse *, const char*);
SOAP_FMAC3 _ns1__getSingleEventResponse * SOAP_FMAC4 soap_in__ns1__getSingleEventResponse(struct soap*, const char*, _ns1__getSingleEventResponse *, const char*);
SOAP_FMAC1 _ns1__getSingleEventResponse * SOAP_FMAC2 soap_instantiate__ns1__getSingleEventResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSingleEventResponse * soap_new__ns1__getSingleEventResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSingleEventResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSingleEventResponse * soap_new_req__ns1__getSingleEventResponse(
	struct soap *soap)
{
	_ns1__getSingleEventResponse *_p = ::soap_new__ns1__getSingleEventResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSingleEventResponse * soap_new_set__ns1__getSingleEventResponse(
	struct soap *soap,
	ns1__Event *getSingleEventResult)
{
	_ns1__getSingleEventResponse *_p = ::soap_new__ns1__getSingleEventResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSingleEventResponse::getSingleEventResult = getSingleEventResult;
	}
	return _p;
}

inline int soap_write__ns1__getSingleEventResponse(struct soap *soap, _ns1__getSingleEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSingleEventResponse", p->soap_type() == SOAP_TYPE__ns1__getSingleEventResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSingleEventResponse(struct soap *soap, const char *URL, _ns1__getSingleEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSingleEventResponse", p->soap_type() == SOAP_TYPE__ns1__getSingleEventResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getSingleEventResponse(struct soap *soap, const char *URL, _ns1__getSingleEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSingleEventResponse", p->soap_type() == SOAP_TYPE__ns1__getSingleEventResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSingleEventResponse(struct soap *soap, const char *URL, _ns1__getSingleEventResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSingleEventResponse", p->soap_type() == SOAP_TYPE__ns1__getSingleEventResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSingleEventResponse * SOAP_FMAC4 soap_get__ns1__getSingleEventResponse(struct soap*, _ns1__getSingleEventResponse *, const char*, const char*);

inline int soap_read__ns1__getSingleEventResponse(struct soap *soap, _ns1__getSingleEventResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSingleEventResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSingleEventResponse(struct soap *soap, const char *URL, _ns1__getSingleEventResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSingleEventResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getSingleEventResponse(struct soap *soap, _ns1__getSingleEventResponse *p)
{
	if (::soap_read__ns1__getSingleEventResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getSingleEvent_DEFINED
#define SOAP_TYPE__ns1__getSingleEvent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSingleEvent(struct soap*, const char*, int, const _ns1__getSingleEvent *, const char*);
SOAP_FMAC3 _ns1__getSingleEvent * SOAP_FMAC4 soap_in__ns1__getSingleEvent(struct soap*, const char*, _ns1__getSingleEvent *, const char*);
SOAP_FMAC1 _ns1__getSingleEvent * SOAP_FMAC2 soap_instantiate__ns1__getSingleEvent(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSingleEvent * soap_new__ns1__getSingleEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSingleEvent(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSingleEvent * soap_new_req__ns1__getSingleEvent(
	struct soap *soap,
	unsigned int id)
{
	_ns1__getSingleEvent *_p = ::soap_new__ns1__getSingleEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSingleEvent::id = id;
	}
	return _p;
}

inline _ns1__getSingleEvent * soap_new_set__ns1__getSingleEvent(
	struct soap *soap,
	unsigned int id)
{
	_ns1__getSingleEvent *_p = ::soap_new__ns1__getSingleEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSingleEvent::id = id;
	}
	return _p;
}

inline int soap_write__ns1__getSingleEvent(struct soap *soap, _ns1__getSingleEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSingleEvent", p->soap_type() == SOAP_TYPE__ns1__getSingleEvent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSingleEvent(struct soap *soap, const char *URL, _ns1__getSingleEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSingleEvent", p->soap_type() == SOAP_TYPE__ns1__getSingleEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getSingleEvent(struct soap *soap, const char *URL, _ns1__getSingleEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSingleEvent", p->soap_type() == SOAP_TYPE__ns1__getSingleEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSingleEvent(struct soap *soap, const char *URL, _ns1__getSingleEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSingleEvent", p->soap_type() == SOAP_TYPE__ns1__getSingleEvent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSingleEvent * SOAP_FMAC4 soap_get__ns1__getSingleEvent(struct soap*, _ns1__getSingleEvent *, const char*, const char*);

inline int soap_read__ns1__getSingleEvent(struct soap *soap, _ns1__getSingleEvent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSingleEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSingleEvent(struct soap *soap, const char *URL, _ns1__getSingleEvent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSingleEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getSingleEvent(struct soap *soap, _ns1__getSingleEvent *p)
{
	if (::soap_read__ns1__getSingleEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getAllEventsResponse_DEFINED
#define SOAP_TYPE__ns1__getAllEventsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getAllEventsResponse(struct soap*, const char*, int, const _ns1__getAllEventsResponse *, const char*);
SOAP_FMAC3 _ns1__getAllEventsResponse * SOAP_FMAC4 soap_in__ns1__getAllEventsResponse(struct soap*, const char*, _ns1__getAllEventsResponse *, const char*);
SOAP_FMAC1 _ns1__getAllEventsResponse * SOAP_FMAC2 soap_instantiate__ns1__getAllEventsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getAllEventsResponse * soap_new__ns1__getAllEventsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getAllEventsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getAllEventsResponse * soap_new_req__ns1__getAllEventsResponse(
	struct soap *soap)
{
	_ns1__getAllEventsResponse *_p = ::soap_new__ns1__getAllEventsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getAllEventsResponse * soap_new_set__ns1__getAllEventsResponse(
	struct soap *soap,
	const std::vector<ns1__EventMini *> & getAllEventsResult)
{
	_ns1__getAllEventsResponse *_p = ::soap_new__ns1__getAllEventsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getAllEventsResponse::getAllEventsResult = getAllEventsResult;
	}
	return _p;
}

inline int soap_write__ns1__getAllEventsResponse(struct soap *soap, _ns1__getAllEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAllEventsResponse", p->soap_type() == SOAP_TYPE__ns1__getAllEventsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getAllEventsResponse(struct soap *soap, const char *URL, _ns1__getAllEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAllEventsResponse", p->soap_type() == SOAP_TYPE__ns1__getAllEventsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getAllEventsResponse(struct soap *soap, const char *URL, _ns1__getAllEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAllEventsResponse", p->soap_type() == SOAP_TYPE__ns1__getAllEventsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getAllEventsResponse(struct soap *soap, const char *URL, _ns1__getAllEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAllEventsResponse", p->soap_type() == SOAP_TYPE__ns1__getAllEventsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getAllEventsResponse * SOAP_FMAC4 soap_get__ns1__getAllEventsResponse(struct soap*, _ns1__getAllEventsResponse *, const char*, const char*);

inline int soap_read__ns1__getAllEventsResponse(struct soap *soap, _ns1__getAllEventsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getAllEventsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getAllEventsResponse(struct soap *soap, const char *URL, _ns1__getAllEventsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getAllEventsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getAllEventsResponse(struct soap *soap, _ns1__getAllEventsResponse *p)
{
	if (::soap_read__ns1__getAllEventsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__getAllEvents_DEFINED
#define SOAP_TYPE__ns1__getAllEvents_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getAllEvents(struct soap*, const char*, int, const _ns1__getAllEvents *, const char*);
SOAP_FMAC3 _ns1__getAllEvents * SOAP_FMAC4 soap_in__ns1__getAllEvents(struct soap*, const char*, _ns1__getAllEvents *, const char*);
SOAP_FMAC1 _ns1__getAllEvents * SOAP_FMAC2 soap_instantiate__ns1__getAllEvents(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getAllEvents * soap_new__ns1__getAllEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getAllEvents(soap, n, NULL, NULL, NULL);
}

inline _ns1__getAllEvents * soap_new_req__ns1__getAllEvents(
	struct soap *soap,
	ns1__EventFilter *filter)
{
	_ns1__getAllEvents *_p = ::soap_new__ns1__getAllEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getAllEvents::filter = filter;
	}
	return _p;
}

inline _ns1__getAllEvents * soap_new_set__ns1__getAllEvents(
	struct soap *soap,
	ns1__EventFilter *filter)
{
	_ns1__getAllEvents *_p = ::soap_new__ns1__getAllEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getAllEvents::filter = filter;
	}
	return _p;
}

inline int soap_write__ns1__getAllEvents(struct soap *soap, _ns1__getAllEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAllEvents", p->soap_type() == SOAP_TYPE__ns1__getAllEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getAllEvents(struct soap *soap, const char *URL, _ns1__getAllEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAllEvents", p->soap_type() == SOAP_TYPE__ns1__getAllEvents ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__getAllEvents(struct soap *soap, const char *URL, _ns1__getAllEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAllEvents", p->soap_type() == SOAP_TYPE__ns1__getAllEvents ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getAllEvents(struct soap *soap, const char *URL, _ns1__getAllEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAllEvents", p->soap_type() == SOAP_TYPE__ns1__getAllEvents ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getAllEvents * SOAP_FMAC4 soap_get__ns1__getAllEvents(struct soap*, _ns1__getAllEvents *, const char*, const char*);

inline int soap_read__ns1__getAllEvents(struct soap *soap, _ns1__getAllEvents *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getAllEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getAllEvents(struct soap *soap, const char *URL, _ns1__getAllEvents *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getAllEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__getAllEvents(struct soap *soap, _ns1__getAllEvents *p)
{
	if (::soap_read__ns1__getAllEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__dumpTableFieldsResponse_DEFINED
#define SOAP_TYPE__ns1__dumpTableFieldsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__dumpTableFieldsResponse(struct soap*, const char*, int, const _ns1__dumpTableFieldsResponse *, const char*);
SOAP_FMAC3 _ns1__dumpTableFieldsResponse * SOAP_FMAC4 soap_in__ns1__dumpTableFieldsResponse(struct soap*, const char*, _ns1__dumpTableFieldsResponse *, const char*);
SOAP_FMAC1 _ns1__dumpTableFieldsResponse * SOAP_FMAC2 soap_instantiate__ns1__dumpTableFieldsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__dumpTableFieldsResponse * soap_new__ns1__dumpTableFieldsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__dumpTableFieldsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__dumpTableFieldsResponse * soap_new_req__ns1__dumpTableFieldsResponse(
	struct soap *soap)
{
	_ns1__dumpTableFieldsResponse *_p = ::soap_new__ns1__dumpTableFieldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__dumpTableFieldsResponse * soap_new_set__ns1__dumpTableFieldsResponse(
	struct soap *soap,
	std::string *dumpTableFieldsResult)
{
	_ns1__dumpTableFieldsResponse *_p = ::soap_new__ns1__dumpTableFieldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__dumpTableFieldsResponse::dumpTableFieldsResult = dumpTableFieldsResult;
	}
	return _p;
}

inline int soap_write__ns1__dumpTableFieldsResponse(struct soap *soap, _ns1__dumpTableFieldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dumpTableFieldsResponse", p->soap_type() == SOAP_TYPE__ns1__dumpTableFieldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__dumpTableFieldsResponse(struct soap *soap, const char *URL, _ns1__dumpTableFieldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dumpTableFieldsResponse", p->soap_type() == SOAP_TYPE__ns1__dumpTableFieldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__dumpTableFieldsResponse(struct soap *soap, const char *URL, _ns1__dumpTableFieldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dumpTableFieldsResponse", p->soap_type() == SOAP_TYPE__ns1__dumpTableFieldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__dumpTableFieldsResponse(struct soap *soap, const char *URL, _ns1__dumpTableFieldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dumpTableFieldsResponse", p->soap_type() == SOAP_TYPE__ns1__dumpTableFieldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__dumpTableFieldsResponse * SOAP_FMAC4 soap_get__ns1__dumpTableFieldsResponse(struct soap*, _ns1__dumpTableFieldsResponse *, const char*, const char*);

inline int soap_read__ns1__dumpTableFieldsResponse(struct soap *soap, _ns1__dumpTableFieldsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__dumpTableFieldsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__dumpTableFieldsResponse(struct soap *soap, const char *URL, _ns1__dumpTableFieldsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__dumpTableFieldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__dumpTableFieldsResponse(struct soap *soap, _ns1__dumpTableFieldsResponse *p)
{
	if (::soap_read__ns1__dumpTableFieldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__dumpTableFields_DEFINED
#define SOAP_TYPE__ns1__dumpTableFields_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__dumpTableFields(struct soap*, const char*, int, const _ns1__dumpTableFields *, const char*);
SOAP_FMAC3 _ns1__dumpTableFields * SOAP_FMAC4 soap_in__ns1__dumpTableFields(struct soap*, const char*, _ns1__dumpTableFields *, const char*);
SOAP_FMAC1 _ns1__dumpTableFields * SOAP_FMAC2 soap_instantiate__ns1__dumpTableFields(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__dumpTableFields * soap_new__ns1__dumpTableFields(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__dumpTableFields(soap, n, NULL, NULL, NULL);
}

inline _ns1__dumpTableFields * soap_new_req__ns1__dumpTableFields(
	struct soap *soap)
{
	_ns1__dumpTableFields *_p = ::soap_new__ns1__dumpTableFields(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__dumpTableFields * soap_new_set__ns1__dumpTableFields(
	struct soap *soap,
	std::string *tableName)
{
	_ns1__dumpTableFields *_p = ::soap_new__ns1__dumpTableFields(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__dumpTableFields::tableName = tableName;
	}
	return _p;
}

inline int soap_write__ns1__dumpTableFields(struct soap *soap, _ns1__dumpTableFields const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dumpTableFields", p->soap_type() == SOAP_TYPE__ns1__dumpTableFields ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__dumpTableFields(struct soap *soap, const char *URL, _ns1__dumpTableFields const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dumpTableFields", p->soap_type() == SOAP_TYPE__ns1__dumpTableFields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__dumpTableFields(struct soap *soap, const char *URL, _ns1__dumpTableFields const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dumpTableFields", p->soap_type() == SOAP_TYPE__ns1__dumpTableFields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__dumpTableFields(struct soap *soap, const char *URL, _ns1__dumpTableFields const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dumpTableFields", p->soap_type() == SOAP_TYPE__ns1__dumpTableFields ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__dumpTableFields * SOAP_FMAC4 soap_get__ns1__dumpTableFields(struct soap*, _ns1__dumpTableFields *, const char*, const char*);

inline int soap_read__ns1__dumpTableFields(struct soap *soap, _ns1__dumpTableFields *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__dumpTableFields(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__dumpTableFields(struct soap *soap, const char *URL, _ns1__dumpTableFields *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__dumpTableFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__dumpTableFields(struct soap *soap, _ns1__dumpTableFields *p)
{
	if (::soap_read__ns1__dumpTableFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__KeyValue_DEFINED
#define SOAP_TYPE_ns1__KeyValue_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__KeyValue(struct soap*, const char*, int, const ns1__KeyValue *, const char*);
SOAP_FMAC3 ns1__KeyValue * SOAP_FMAC4 soap_in_ns1__KeyValue(struct soap*, const char*, ns1__KeyValue *, const char*);
SOAP_FMAC1 ns1__KeyValue * SOAP_FMAC2 soap_instantiate_ns1__KeyValue(struct soap*, int, const char*, const char*, size_t*);

inline ns1__KeyValue * soap_new_ns1__KeyValue(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__KeyValue(soap, n, NULL, NULL, NULL);
}

inline ns1__KeyValue * soap_new_req_ns1__KeyValue(
	struct soap *soap)
{
	ns1__KeyValue *_p = ::soap_new_ns1__KeyValue(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__KeyValue * soap_new_set_ns1__KeyValue(
	struct soap *soap,
	std::string *key,
	std::string *value)
{
	ns1__KeyValue *_p = ::soap_new_ns1__KeyValue(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__KeyValue::key = key;
		_p->ns1__KeyValue::value = value;
	}
	return _p;
}

inline int soap_write_ns1__KeyValue(struct soap *soap, ns1__KeyValue const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:KeyValue", p->soap_type() == SOAP_TYPE_ns1__KeyValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__KeyValue(struct soap *soap, const char *URL, ns1__KeyValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:KeyValue", p->soap_type() == SOAP_TYPE_ns1__KeyValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__KeyValue(struct soap *soap, const char *URL, ns1__KeyValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:KeyValue", p->soap_type() == SOAP_TYPE_ns1__KeyValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__KeyValue(struct soap *soap, const char *URL, ns1__KeyValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:KeyValue", p->soap_type() == SOAP_TYPE_ns1__KeyValue ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__KeyValue * SOAP_FMAC4 soap_get_ns1__KeyValue(struct soap*, ns1__KeyValue *, const char*, const char*);

inline int soap_read_ns1__KeyValue(struct soap *soap, ns1__KeyValue *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__KeyValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__KeyValue(struct soap *soap, const char *URL, ns1__KeyValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__KeyValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__KeyValue(struct soap *soap, ns1__KeyValue *p)
{
	if (::soap_read_ns1__KeyValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EventRegistrationWarning_DEFINED
#define SOAP_TYPE_ns1__EventRegistrationWarning_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventRegistrationWarning(struct soap*, const char*, int, const ns1__EventRegistrationWarning *, const char*);
SOAP_FMAC3 ns1__EventRegistrationWarning * SOAP_FMAC4 soap_in_ns1__EventRegistrationWarning(struct soap*, const char*, ns1__EventRegistrationWarning *, const char*);
SOAP_FMAC1 ns1__EventRegistrationWarning * SOAP_FMAC2 soap_instantiate_ns1__EventRegistrationWarning(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EventRegistrationWarning * soap_new_ns1__EventRegistrationWarning(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EventRegistrationWarning(soap, n, NULL, NULL, NULL);
}

inline ns1__EventRegistrationWarning * soap_new_req_ns1__EventRegistrationWarning(
	struct soap *soap,
	unsigned int eventId,
	std::string *code,
	std::string *warningMessage)
{
	ns1__EventRegistrationWarning *_p = ::soap_new_ns1__EventRegistrationWarning(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventRegistrationWarning::eventId = eventId;
		_p->ns1__EventRegistrationWarning::code = code;
		_p->ns1__EventRegistrationWarning::warningMessage = warningMessage;
	}
	return _p;
}

inline ns1__EventRegistrationWarning * soap_new_set_ns1__EventRegistrationWarning(
	struct soap *soap,
	unsigned int eventId,
	std::string *code,
	std::string *warningMessage,
	const std::vector<ns1__KeyValue *> & additionalData)
{
	ns1__EventRegistrationWarning *_p = ::soap_new_ns1__EventRegistrationWarning(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventRegistrationWarning::eventId = eventId;
		_p->ns1__EventRegistrationWarning::code = code;
		_p->ns1__EventRegistrationWarning::warningMessage = warningMessage;
		_p->ns1__EventRegistrationWarning::additionalData = additionalData;
	}
	return _p;
}

inline int soap_write_ns1__EventRegistrationWarning(struct soap *soap, ns1__EventRegistrationWarning const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistrationWarning", p->soap_type() == SOAP_TYPE_ns1__EventRegistrationWarning ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EventRegistrationWarning(struct soap *soap, const char *URL, ns1__EventRegistrationWarning const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistrationWarning", p->soap_type() == SOAP_TYPE_ns1__EventRegistrationWarning ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EventRegistrationWarning(struct soap *soap, const char *URL, ns1__EventRegistrationWarning const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistrationWarning", p->soap_type() == SOAP_TYPE_ns1__EventRegistrationWarning ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EventRegistrationWarning(struct soap *soap, const char *URL, ns1__EventRegistrationWarning const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistrationWarning", p->soap_type() == SOAP_TYPE_ns1__EventRegistrationWarning ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EventRegistrationWarning * SOAP_FMAC4 soap_get_ns1__EventRegistrationWarning(struct soap*, ns1__EventRegistrationWarning *, const char*, const char*);

inline int soap_read_ns1__EventRegistrationWarning(struct soap *soap, ns1__EventRegistrationWarning *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EventRegistrationWarning(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EventRegistrationWarning(struct soap *soap, const char *URL, ns1__EventRegistrationWarning *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EventRegistrationWarning(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EventRegistrationWarning(struct soap *soap, ns1__EventRegistrationWarning *p)
{
	if (::soap_read_ns1__EventRegistrationWarning(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EventRegistrationEvent_DEFINED
#define SOAP_TYPE_ns1__EventRegistrationEvent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventRegistrationEvent(struct soap*, const char*, int, const ns1__EventRegistrationEvent *, const char*);
SOAP_FMAC3 ns1__EventRegistrationEvent * SOAP_FMAC4 soap_in_ns1__EventRegistrationEvent(struct soap*, const char*, ns1__EventRegistrationEvent *, const char*);
SOAP_FMAC1 ns1__EventRegistrationEvent * SOAP_FMAC2 soap_instantiate_ns1__EventRegistrationEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EventRegistrationEvent * soap_new_ns1__EventRegistrationEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EventRegistrationEvent(soap, n, NULL, NULL, NULL);
}

inline ns1__EventRegistrationEvent * soap_new_req_ns1__EventRegistrationEvent(
	struct soap *soap,
	unsigned int Id,
	std::string *WorkshopComment)
{
	ns1__EventRegistrationEvent *_p = ::soap_new_ns1__EventRegistrationEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventRegistrationEvent::Id = Id;
		_p->ns1__EventRegistrationEvent::WorkshopComment = WorkshopComment;
	}
	return _p;
}

inline ns1__EventRegistrationEvent * soap_new_set_ns1__EventRegistrationEvent(
	struct soap *soap,
	unsigned int Id,
	const std::vector<unsigned int> & WorkshopIds,
	std::string *WorkshopComment)
{
	ns1__EventRegistrationEvent *_p = ::soap_new_ns1__EventRegistrationEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventRegistrationEvent::Id = Id;
		_p->ns1__EventRegistrationEvent::WorkshopIds = WorkshopIds;
		_p->ns1__EventRegistrationEvent::WorkshopComment = WorkshopComment;
	}
	return _p;
}

inline int soap_write_ns1__EventRegistrationEvent(struct soap *soap, ns1__EventRegistrationEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistrationEvent", p->soap_type() == SOAP_TYPE_ns1__EventRegistrationEvent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EventRegistrationEvent(struct soap *soap, const char *URL, ns1__EventRegistrationEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistrationEvent", p->soap_type() == SOAP_TYPE_ns1__EventRegistrationEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EventRegistrationEvent(struct soap *soap, const char *URL, ns1__EventRegistrationEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistrationEvent", p->soap_type() == SOAP_TYPE_ns1__EventRegistrationEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EventRegistrationEvent(struct soap *soap, const char *URL, ns1__EventRegistrationEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistrationEvent", p->soap_type() == SOAP_TYPE_ns1__EventRegistrationEvent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EventRegistrationEvent * SOAP_FMAC4 soap_get_ns1__EventRegistrationEvent(struct soap*, ns1__EventRegistrationEvent *, const char*, const char*);

inline int soap_read_ns1__EventRegistrationEvent(struct soap *soap, ns1__EventRegistrationEvent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EventRegistrationEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EventRegistrationEvent(struct soap *soap, const char *URL, ns1__EventRegistrationEvent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EventRegistrationEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EventRegistrationEvent(struct soap *soap, ns1__EventRegistrationEvent *p)
{
	if (::soap_read_ns1__EventRegistrationEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EventRegistration_DEFINED
#define SOAP_TYPE_ns1__EventRegistration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventRegistration(struct soap*, const char*, int, const ns1__EventRegistration *, const char*);
SOAP_FMAC3 ns1__EventRegistration * SOAP_FMAC4 soap_in_ns1__EventRegistration(struct soap*, const char*, ns1__EventRegistration *, const char*);
SOAP_FMAC1 ns1__EventRegistration * SOAP_FMAC2 soap_instantiate_ns1__EventRegistration(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EventRegistration * soap_new_ns1__EventRegistration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EventRegistration(soap, n, NULL, NULL, NULL);
}

inline ns1__EventRegistration * soap_new_req_ns1__EventRegistration(
	struct soap *soap,
	std::string *Salutation,
	std::string *Title,
	std::string *Firstname,
	std::string *Lastname,
	std::string *Street,
	std::string *Zip,
	std::string *City,
	std::string *DateOfBirth,
	std::string *AccountHolder,
	std::string *IBAN,
	std::string *BIC,
	std::string *EMail,
	std::string *Phone,
	std::string *MobilePhone,
	std::string *AssociationNumber,
	std::string *Association,
	std::string *YouthLeaderCard,
	std::string *YouthLeaderCardValidity,
	std::string *Comment,
	bool Overnight,
	bool SingleRoom,
	bool Vegetarian,
	bool AddressDisclosure)
{
	ns1__EventRegistration *_p = ::soap_new_ns1__EventRegistration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventRegistration::Salutation = Salutation;
		_p->ns1__EventRegistration::Title = Title;
		_p->ns1__EventRegistration::Firstname = Firstname;
		_p->ns1__EventRegistration::Lastname = Lastname;
		_p->ns1__EventRegistration::Street = Street;
		_p->ns1__EventRegistration::Zip = Zip;
		_p->ns1__EventRegistration::City = City;
		_p->ns1__EventRegistration::DateOfBirth = DateOfBirth;
		_p->ns1__EventRegistration::AccountHolder = AccountHolder;
		_p->ns1__EventRegistration::IBAN = IBAN;
		_p->ns1__EventRegistration::BIC = BIC;
		_p->ns1__EventRegistration::EMail = EMail;
		_p->ns1__EventRegistration::Phone = Phone;
		_p->ns1__EventRegistration::MobilePhone = MobilePhone;
		_p->ns1__EventRegistration::AssociationNumber = AssociationNumber;
		_p->ns1__EventRegistration::Association = Association;
		_p->ns1__EventRegistration::YouthLeaderCard = YouthLeaderCard;
		_p->ns1__EventRegistration::YouthLeaderCardValidity = YouthLeaderCardValidity;
		_p->ns1__EventRegistration::Comment = Comment;
		_p->ns1__EventRegistration::Overnight = Overnight;
		_p->ns1__EventRegistration::SingleRoom = SingleRoom;
		_p->ns1__EventRegistration::Vegetarian = Vegetarian;
		_p->ns1__EventRegistration::AddressDisclosure = AddressDisclosure;
	}
	return _p;
}

inline ns1__EventRegistration * soap_new_set_ns1__EventRegistration(
	struct soap *soap,
	const std::vector<ns1__EventRegistrationEvent *> & Events,
	std::string *Salutation,
	std::string *Title,
	std::string *Firstname,
	std::string *Lastname,
	std::string *Street,
	std::string *Zip,
	std::string *City,
	std::string *DateOfBirth,
	std::string *AccountHolder,
	std::string *IBAN,
	std::string *BIC,
	std::string *EMail,
	std::string *Phone,
	std::string *MobilePhone,
	std::string *AssociationNumber,
	std::string *Association,
	std::string *YouthLeaderCard,
	std::string *YouthLeaderCardValidity,
	std::string *Comment,
	bool Overnight,
	bool SingleRoom,
	bool Vegetarian,
	bool AddressDisclosure)
{
	ns1__EventRegistration *_p = ::soap_new_ns1__EventRegistration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventRegistration::Events = Events;
		_p->ns1__EventRegistration::Salutation = Salutation;
		_p->ns1__EventRegistration::Title = Title;
		_p->ns1__EventRegistration::Firstname = Firstname;
		_p->ns1__EventRegistration::Lastname = Lastname;
		_p->ns1__EventRegistration::Street = Street;
		_p->ns1__EventRegistration::Zip = Zip;
		_p->ns1__EventRegistration::City = City;
		_p->ns1__EventRegistration::DateOfBirth = DateOfBirth;
		_p->ns1__EventRegistration::AccountHolder = AccountHolder;
		_p->ns1__EventRegistration::IBAN = IBAN;
		_p->ns1__EventRegistration::BIC = BIC;
		_p->ns1__EventRegistration::EMail = EMail;
		_p->ns1__EventRegistration::Phone = Phone;
		_p->ns1__EventRegistration::MobilePhone = MobilePhone;
		_p->ns1__EventRegistration::AssociationNumber = AssociationNumber;
		_p->ns1__EventRegistration::Association = Association;
		_p->ns1__EventRegistration::YouthLeaderCard = YouthLeaderCard;
		_p->ns1__EventRegistration::YouthLeaderCardValidity = YouthLeaderCardValidity;
		_p->ns1__EventRegistration::Comment = Comment;
		_p->ns1__EventRegistration::Overnight = Overnight;
		_p->ns1__EventRegistration::SingleRoom = SingleRoom;
		_p->ns1__EventRegistration::Vegetarian = Vegetarian;
		_p->ns1__EventRegistration::AddressDisclosure = AddressDisclosure;
	}
	return _p;
}

inline int soap_write_ns1__EventRegistration(struct soap *soap, ns1__EventRegistration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistration", p->soap_type() == SOAP_TYPE_ns1__EventRegistration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EventRegistration(struct soap *soap, const char *URL, ns1__EventRegistration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistration", p->soap_type() == SOAP_TYPE_ns1__EventRegistration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EventRegistration(struct soap *soap, const char *URL, ns1__EventRegistration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistration", p->soap_type() == SOAP_TYPE_ns1__EventRegistration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EventRegistration(struct soap *soap, const char *URL, ns1__EventRegistration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventRegistration", p->soap_type() == SOAP_TYPE_ns1__EventRegistration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EventRegistration * SOAP_FMAC4 soap_get_ns1__EventRegistration(struct soap*, ns1__EventRegistration *, const char*, const char*);

inline int soap_read_ns1__EventRegistration(struct soap *soap, ns1__EventRegistration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EventRegistration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EventRegistration(struct soap *soap, const char *URL, ns1__EventRegistration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EventRegistration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EventRegistration(struct soap *soap, ns1__EventRegistration *p)
{
	if (::soap_read_ns1__EventRegistration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Workshop_DEFINED
#define SOAP_TYPE_ns1__Workshop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Workshop(struct soap*, const char*, int, const ns1__Workshop *, const char*);
SOAP_FMAC3 ns1__Workshop * SOAP_FMAC4 soap_in_ns1__Workshop(struct soap*, const char*, ns1__Workshop *, const char*);
SOAP_FMAC1 ns1__Workshop * SOAP_FMAC2 soap_instantiate_ns1__Workshop(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Workshop * soap_new_ns1__Workshop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Workshop(soap, n, NULL, NULL, NULL);
}

inline ns1__Workshop * soap_new_req_ns1__Workshop(
	struct soap *soap,
	unsigned int Id,
	std::string *Number,
	std::string *Title,
	std::string *AdditionalInfo,
	unsigned char OccupancyPercentage)
{
	ns1__Workshop *_p = ::soap_new_ns1__Workshop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Workshop::Id = Id;
		_p->ns1__Workshop::Number = Number;
		_p->ns1__Workshop::Title = Title;
		_p->ns1__Workshop::AdditionalInfo = AdditionalInfo;
		_p->ns1__Workshop::OccupancyPercentage = OccupancyPercentage;
	}
	return _p;
}

inline ns1__Workshop * soap_new_set_ns1__Workshop(
	struct soap *soap,
	unsigned int Id,
	std::string *Number,
	std::string *Title,
	std::string *AdditionalInfo,
	std::string *Date,
	std::string *TimeFrom,
	std::string *TimeTo,
	unsigned char OccupancyPercentage)
{
	ns1__Workshop *_p = ::soap_new_ns1__Workshop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Workshop::Id = Id;
		_p->ns1__Workshop::Number = Number;
		_p->ns1__Workshop::Title = Title;
		_p->ns1__Workshop::AdditionalInfo = AdditionalInfo;
		_p->ns1__Workshop::Date = Date;
		_p->ns1__Workshop::TimeFrom = TimeFrom;
		_p->ns1__Workshop::TimeTo = TimeTo;
		_p->ns1__Workshop::OccupancyPercentage = OccupancyPercentage;
	}
	return _p;
}

inline int soap_write_ns1__Workshop(struct soap *soap, ns1__Workshop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Workshop", p->soap_type() == SOAP_TYPE_ns1__Workshop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Workshop(struct soap *soap, const char *URL, ns1__Workshop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Workshop", p->soap_type() == SOAP_TYPE_ns1__Workshop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Workshop(struct soap *soap, const char *URL, ns1__Workshop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Workshop", p->soap_type() == SOAP_TYPE_ns1__Workshop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Workshop(struct soap *soap, const char *URL, ns1__Workshop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Workshop", p->soap_type() == SOAP_TYPE_ns1__Workshop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Workshop * SOAP_FMAC4 soap_get_ns1__Workshop(struct soap*, ns1__Workshop *, const char*, const char*);

inline int soap_read_ns1__Workshop(struct soap *soap, ns1__Workshop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Workshop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Workshop(struct soap *soap, const char *URL, ns1__Workshop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Workshop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Workshop(struct soap *soap, ns1__Workshop *p)
{
	if (::soap_read_ns1__Workshop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__WorkshopTimeslot_DEFINED
#define SOAP_TYPE_ns1__WorkshopTimeslot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__WorkshopTimeslot(struct soap*, const char*, int, const ns1__WorkshopTimeslot *, const char*);
SOAP_FMAC3 ns1__WorkshopTimeslot * SOAP_FMAC4 soap_in_ns1__WorkshopTimeslot(struct soap*, const char*, ns1__WorkshopTimeslot *, const char*);
SOAP_FMAC1 ns1__WorkshopTimeslot * SOAP_FMAC2 soap_instantiate_ns1__WorkshopTimeslot(struct soap*, int, const char*, const char*, size_t*);

inline ns1__WorkshopTimeslot * soap_new_ns1__WorkshopTimeslot(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__WorkshopTimeslot(soap, n, NULL, NULL, NULL);
}

inline ns1__WorkshopTimeslot * soap_new_req_ns1__WorkshopTimeslot(
	struct soap *soap,
	std::string *Timeslot)
{
	ns1__WorkshopTimeslot *_p = ::soap_new_ns1__WorkshopTimeslot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WorkshopTimeslot::Timeslot = Timeslot;
	}
	return _p;
}

inline ns1__WorkshopTimeslot * soap_new_set_ns1__WorkshopTimeslot(
	struct soap *soap,
	std::string *Timeslot,
	const std::vector<ns1__Workshop *> & Workshops)
{
	ns1__WorkshopTimeslot *_p = ::soap_new_ns1__WorkshopTimeslot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__WorkshopTimeslot::Timeslot = Timeslot;
		_p->ns1__WorkshopTimeslot::Workshops = Workshops;
	}
	return _p;
}

inline int soap_write_ns1__WorkshopTimeslot(struct soap *soap, ns1__WorkshopTimeslot const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WorkshopTimeslot", p->soap_type() == SOAP_TYPE_ns1__WorkshopTimeslot ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__WorkshopTimeslot(struct soap *soap, const char *URL, ns1__WorkshopTimeslot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WorkshopTimeslot", p->soap_type() == SOAP_TYPE_ns1__WorkshopTimeslot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__WorkshopTimeslot(struct soap *soap, const char *URL, ns1__WorkshopTimeslot const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WorkshopTimeslot", p->soap_type() == SOAP_TYPE_ns1__WorkshopTimeslot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__WorkshopTimeslot(struct soap *soap, const char *URL, ns1__WorkshopTimeslot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:WorkshopTimeslot", p->soap_type() == SOAP_TYPE_ns1__WorkshopTimeslot ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__WorkshopTimeslot * SOAP_FMAC4 soap_get_ns1__WorkshopTimeslot(struct soap*, ns1__WorkshopTimeslot *, const char*, const char*);

inline int soap_read_ns1__WorkshopTimeslot(struct soap *soap, ns1__WorkshopTimeslot *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__WorkshopTimeslot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__WorkshopTimeslot(struct soap *soap, const char *URL, ns1__WorkshopTimeslot *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__WorkshopTimeslot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__WorkshopTimeslot(struct soap *soap, ns1__WorkshopTimeslot *p)
{
	if (::soap_read_ns1__WorkshopTimeslot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Address_DEFINED
#define SOAP_TYPE_ns1__Address_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Address(struct soap*, const char*, int, const ns1__Address *, const char*);
SOAP_FMAC3 ns1__Address * SOAP_FMAC4 soap_in_ns1__Address(struct soap*, const char*, ns1__Address *, const char*);
SOAP_FMAC1 ns1__Address * SOAP_FMAC2 soap_instantiate_ns1__Address(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Address * soap_new_ns1__Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Address(soap, n, NULL, NULL, NULL);
}

inline ns1__Address * soap_new_req_ns1__Address(
	struct soap *soap,
	std::string *Name,
	std::string *Street,
	std::string *Zip,
	std::string *City,
	std::string *Contact,
	std::string *Phone,
	std::string *Fax,
	std::string *MobilePhone,
	std::string *EMail)
{
	ns1__Address *_p = ::soap_new_ns1__Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Address::Name = Name;
		_p->ns1__Address::Street = Street;
		_p->ns1__Address::Zip = Zip;
		_p->ns1__Address::City = City;
		_p->ns1__Address::Contact = Contact;
		_p->ns1__Address::Phone = Phone;
		_p->ns1__Address::Fax = Fax;
		_p->ns1__Address::MobilePhone = MobilePhone;
		_p->ns1__Address::EMail = EMail;
	}
	return _p;
}

inline ns1__Address * soap_new_set_ns1__Address(
	struct soap *soap,
	std::string *Name,
	std::string *Street,
	std::string *Zip,
	std::string *City,
	std::string *Contact,
	std::string *Phone,
	std::string *Fax,
	std::string *MobilePhone,
	std::string *EMail)
{
	ns1__Address *_p = ::soap_new_ns1__Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Address::Name = Name;
		_p->ns1__Address::Street = Street;
		_p->ns1__Address::Zip = Zip;
		_p->ns1__Address::City = City;
		_p->ns1__Address::Contact = Contact;
		_p->ns1__Address::Phone = Phone;
		_p->ns1__Address::Fax = Fax;
		_p->ns1__Address::MobilePhone = MobilePhone;
		_p->ns1__Address::EMail = EMail;
	}
	return _p;
}

inline int soap_write_ns1__Address(struct soap *soap, ns1__Address const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Address", p->soap_type() == SOAP_TYPE_ns1__Address ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Address(struct soap *soap, const char *URL, ns1__Address const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Address", p->soap_type() == SOAP_TYPE_ns1__Address ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Address(struct soap *soap, const char *URL, ns1__Address const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Address", p->soap_type() == SOAP_TYPE_ns1__Address ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Address(struct soap *soap, const char *URL, ns1__Address const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Address", p->soap_type() == SOAP_TYPE_ns1__Address ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Address * SOAP_FMAC4 soap_get_ns1__Address(struct soap*, ns1__Address *, const char*, const char*);

inline int soap_read_ns1__Address(struct soap *soap, ns1__Address *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Address(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Address(struct soap *soap, const char *URL, ns1__Address *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Address(struct soap *soap, ns1__Address *p)
{
	if (::soap_read_ns1__Address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EventFee_DEFINED
#define SOAP_TYPE_ns1__EventFee_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventFee(struct soap*, const char*, int, const ns1__EventFee *, const char*);
SOAP_FMAC3 ns1__EventFee * SOAP_FMAC4 soap_in_ns1__EventFee(struct soap*, const char*, ns1__EventFee *, const char*);
SOAP_FMAC1 ns1__EventFee * SOAP_FMAC2 soap_instantiate_ns1__EventFee(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EventFee * soap_new_ns1__EventFee(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EventFee(soap, n, NULL, NULL, NULL);
}

inline ns1__EventFee * soap_new_req_ns1__EventFee(
	struct soap *soap,
	const std::string& fee)
{
	ns1__EventFee *_p = ::soap_new_ns1__EventFee(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventFee::fee = fee;
	}
	return _p;
}

inline ns1__EventFee * soap_new_set_ns1__EventFee(
	struct soap *soap,
	std::string *name,
	const std::string& fee)
{
	ns1__EventFee *_p = ::soap_new_ns1__EventFee(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventFee::name = name;
		_p->ns1__EventFee::fee = fee;
	}
	return _p;
}

inline int soap_write_ns1__EventFee(struct soap *soap, ns1__EventFee const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventFee", p->soap_type() == SOAP_TYPE_ns1__EventFee ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EventFee(struct soap *soap, const char *URL, ns1__EventFee const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventFee", p->soap_type() == SOAP_TYPE_ns1__EventFee ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EventFee(struct soap *soap, const char *URL, ns1__EventFee const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventFee", p->soap_type() == SOAP_TYPE_ns1__EventFee ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EventFee(struct soap *soap, const char *URL, ns1__EventFee const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventFee", p->soap_type() == SOAP_TYPE_ns1__EventFee ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EventFee * SOAP_FMAC4 soap_get_ns1__EventFee(struct soap*, ns1__EventFee *, const char*, const char*);

inline int soap_read_ns1__EventFee(struct soap *soap, ns1__EventFee *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EventFee(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EventFee(struct soap *soap, const char *URL, ns1__EventFee *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EventFee(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EventFee(struct soap *soap, ns1__EventFee *p)
{
	if (::soap_read_ns1__EventFee(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Event_DEFINED
#define SOAP_TYPE_ns1__Event_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Event(struct soap*, const char*, int, const ns1__Event *, const char*);
SOAP_FMAC3 ns1__Event * SOAP_FMAC4 soap_in_ns1__Event(struct soap*, const char*, ns1__Event *, const char*);
SOAP_FMAC1 ns1__Event * SOAP_FMAC2 soap_instantiate_ns1__Event(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Event * soap_new_ns1__Event(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Event(soap, n, NULL, NULL, NULL);
}

inline ns1__Event * soap_new_req_ns1__Event(
	struct soap *soap,
	std::string *Profile,
	std::string *Acknowledgement,
	std::string *TargetGroup,
	unsigned int NumberOfLearnUnits,
	bool VenueIsHandicappedAccessible,
	ns1__Address *Organizer,
	std::string *InfoText,
	std::string *InfoText2,
	std::string *InfoText3,
	std::string *InfoText4,
	std::string *InfoURL,
	unsigned int *MaxNumberOfWorkshopRegistrations,
	std::string *Title__1,
	std::string *TitleAddition__1,
	std::string *Subtitle__1,
	std::string *SubtitleAddition__1,
	std::string *Category__1,
	std::string *SubCategory__1,
	std::string *Type__1,
	std::string *VenueCity__1,
	unsigned char OccupancyPercentage__1,
	bool EducationalLeave__1,
	bool Hidden__2,
	unsigned int Id__2,
	std::string *Number__2,
	std::string *KSBNumber__2,
	std::string *LSBNumber__2,
	unsigned int *SportRegion__2,
	std::string *Date__2)
{
	ns1__Event *_p = ::soap_new_ns1__Event(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Event::Profile = Profile;
		_p->ns1__Event::Acknowledgement = Acknowledgement;
		_p->ns1__Event::TargetGroup = TargetGroup;
		_p->ns1__Event::NumberOfLearnUnits = NumberOfLearnUnits;
		_p->ns1__Event::VenueIsHandicappedAccessible = VenueIsHandicappedAccessible;
		_p->ns1__Event::Organizer = Organizer;
		_p->ns1__Event::InfoText = InfoText;
		_p->ns1__Event::InfoText2 = InfoText2;
		_p->ns1__Event::InfoText3 = InfoText3;
		_p->ns1__Event::InfoText4 = InfoText4;
		_p->ns1__Event::InfoURL = InfoURL;
		_p->ns1__Event::MaxNumberOfWorkshopRegistrations = MaxNumberOfWorkshopRegistrations;
		_p->ns1__EventMini::Title = Title__1;
		_p->ns1__EventMini::TitleAddition = TitleAddition__1;
		_p->ns1__EventMini::Subtitle = Subtitle__1;
		_p->ns1__EventMini::SubtitleAddition = SubtitleAddition__1;
		_p->ns1__EventMini::Category = Category__1;
		_p->ns1__EventMini::SubCategory = SubCategory__1;
		_p->ns1__EventMini::Type = Type__1;
		_p->ns1__EventMini::VenueCity = VenueCity__1;
		_p->ns1__EventMini::OccupancyPercentage = OccupancyPercentage__1;
		_p->ns1__EventMini::EducationalLeave = EducationalLeave__1;
		_p->ns1__EventBase::Hidden = Hidden__2;
		_p->ns1__EventBase::Id = Id__2;
		_p->ns1__EventBase::Number = Number__2;
		_p->ns1__EventBase::KSBNumber = KSBNumber__2;
		_p->ns1__EventBase::LSBNumber = LSBNumber__2;
		_p->ns1__EventBase::SportRegion = SportRegion__2;
		_p->ns1__EventBase::Date = Date__2;
	}
	return _p;
}

inline ns1__Event * soap_new_set_ns1__Event(
	struct soap *soap,
	const std::vector<ns1__EventFee *> & EventFees,
	std::string *Profile,
	std::string *Acknowledgement,
	std::string *TargetGroup,
	unsigned int NumberOfLearnUnits,
	ns1__Address *Venue,
	bool VenueIsHandicappedAccessible,
	ns1__Address *Organizer,
	std::string *InfoText,
	std::string *InfoText2,
	std::string *InfoText3,
	std::string *InfoText4,
	std::string *InfoURL,
	unsigned int *MaxNumberOfWorkshopRegistrations,
	const std::vector<ns1__WorkshopTimeslot *> & WorkshopTimeslots,
	std::string *Title__1,
	std::string *TitleAddition__1,
	std::string *Subtitle__1,
	std::string *SubtitleAddition__1,
	std::string *Category__1,
	std::string *SubCategory__1,
	std::string *Type__1,
	std::string *VenueCity__1,
	unsigned char OccupancyPercentage__1,
	bool EducationalLeave__1,
	const std::vector<ns1__EventBase *> & SubEvents__1,
	bool Hidden__2,
	unsigned int Id__2,
	std::string *Number__2,
	std::string *KSBNumber__2,
	std::string *LSBNumber__2,
	unsigned int *SportRegion__2,
	std::string *Date__2)
{
	ns1__Event *_p = ::soap_new_ns1__Event(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Event::EventFees = EventFees;
		_p->ns1__Event::Profile = Profile;
		_p->ns1__Event::Acknowledgement = Acknowledgement;
		_p->ns1__Event::TargetGroup = TargetGroup;
		_p->ns1__Event::NumberOfLearnUnits = NumberOfLearnUnits;
		_p->ns1__Event::Venue = Venue;
		_p->ns1__Event::VenueIsHandicappedAccessible = VenueIsHandicappedAccessible;
		_p->ns1__Event::Organizer = Organizer;
		_p->ns1__Event::InfoText = InfoText;
		_p->ns1__Event::InfoText2 = InfoText2;
		_p->ns1__Event::InfoText3 = InfoText3;
		_p->ns1__Event::InfoText4 = InfoText4;
		_p->ns1__Event::InfoURL = InfoURL;
		_p->ns1__Event::MaxNumberOfWorkshopRegistrations = MaxNumberOfWorkshopRegistrations;
		_p->ns1__Event::WorkshopTimeslots = WorkshopTimeslots;
		_p->ns1__EventMini::Title = Title__1;
		_p->ns1__EventMini::TitleAddition = TitleAddition__1;
		_p->ns1__EventMini::Subtitle = Subtitle__1;
		_p->ns1__EventMini::SubtitleAddition = SubtitleAddition__1;
		_p->ns1__EventMini::Category = Category__1;
		_p->ns1__EventMini::SubCategory = SubCategory__1;
		_p->ns1__EventMini::Type = Type__1;
		_p->ns1__EventMini::VenueCity = VenueCity__1;
		_p->ns1__EventMini::OccupancyPercentage = OccupancyPercentage__1;
		_p->ns1__EventMini::EducationalLeave = EducationalLeave__1;
		_p->ns1__EventMini::SubEvents = SubEvents__1;
		_p->ns1__EventBase::Hidden = Hidden__2;
		_p->ns1__EventBase::Id = Id__2;
		_p->ns1__EventBase::Number = Number__2;
		_p->ns1__EventBase::KSBNumber = KSBNumber__2;
		_p->ns1__EventBase::LSBNumber = LSBNumber__2;
		_p->ns1__EventBase::SportRegion = SportRegion__2;
		_p->ns1__EventBase::Date = Date__2;
	}
	return _p;
}

inline int soap_write_ns1__Event(struct soap *soap, ns1__Event const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Event", p->soap_type() == SOAP_TYPE_ns1__Event ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Event(struct soap *soap, const char *URL, ns1__Event const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Event", p->soap_type() == SOAP_TYPE_ns1__Event ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Event(struct soap *soap, const char *URL, ns1__Event const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Event", p->soap_type() == SOAP_TYPE_ns1__Event ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Event(struct soap *soap, const char *URL, ns1__Event const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Event", p->soap_type() == SOAP_TYPE_ns1__Event ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Event * SOAP_FMAC4 soap_get_ns1__Event(struct soap*, ns1__Event *, const char*, const char*);

inline int soap_read_ns1__Event(struct soap *soap, ns1__Event *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Event(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Event(struct soap *soap, const char *URL, ns1__Event *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Event(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Event(struct soap *soap, ns1__Event *p)
{
	if (::soap_read_ns1__Event(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EventBase_DEFINED
#define SOAP_TYPE_ns1__EventBase_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventBase(struct soap*, const char*, int, const ns1__EventBase *, const char*);
SOAP_FMAC3 ns1__EventBase * SOAP_FMAC4 soap_in_ns1__EventBase(struct soap*, const char*, ns1__EventBase *, const char*);
SOAP_FMAC1 ns1__EventBase * SOAP_FMAC2 soap_instantiate_ns1__EventBase(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EventBase * soap_new_ns1__EventBase(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EventBase(soap, n, NULL, NULL, NULL);
}

inline ns1__EventBase * soap_new_req_ns1__EventBase(
	struct soap *soap,
	bool Hidden,
	unsigned int Id,
	std::string *Number,
	std::string *KSBNumber,
	std::string *LSBNumber,
	unsigned int *SportRegion,
	std::string *Date)
{
	ns1__EventBase *_p = ::soap_new_ns1__EventBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventBase::Hidden = Hidden;
		_p->ns1__EventBase::Id = Id;
		_p->ns1__EventBase::Number = Number;
		_p->ns1__EventBase::KSBNumber = KSBNumber;
		_p->ns1__EventBase::LSBNumber = LSBNumber;
		_p->ns1__EventBase::SportRegion = SportRegion;
		_p->ns1__EventBase::Date = Date;
	}
	return _p;
}

inline ns1__EventBase * soap_new_set_ns1__EventBase(
	struct soap *soap,
	bool Hidden,
	unsigned int Id,
	std::string *Number,
	std::string *KSBNumber,
	std::string *LSBNumber,
	unsigned int *SportRegion,
	std::string *Date)
{
	ns1__EventBase *_p = ::soap_new_ns1__EventBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventBase::Hidden = Hidden;
		_p->ns1__EventBase::Id = Id;
		_p->ns1__EventBase::Number = Number;
		_p->ns1__EventBase::KSBNumber = KSBNumber;
		_p->ns1__EventBase::LSBNumber = LSBNumber;
		_p->ns1__EventBase::SportRegion = SportRegion;
		_p->ns1__EventBase::Date = Date;
	}
	return _p;
}

inline int soap_write_ns1__EventBase(struct soap *soap, ns1__EventBase const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventBase", p->soap_type() == SOAP_TYPE_ns1__EventBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EventBase(struct soap *soap, const char *URL, ns1__EventBase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventBase", p->soap_type() == SOAP_TYPE_ns1__EventBase ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EventBase(struct soap *soap, const char *URL, ns1__EventBase const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventBase", p->soap_type() == SOAP_TYPE_ns1__EventBase ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EventBase(struct soap *soap, const char *URL, ns1__EventBase const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventBase", p->soap_type() == SOAP_TYPE_ns1__EventBase ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EventBase * SOAP_FMAC4 soap_get_ns1__EventBase(struct soap*, ns1__EventBase *, const char*, const char*);

inline int soap_read_ns1__EventBase(struct soap *soap, ns1__EventBase *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EventBase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EventBase(struct soap *soap, const char *URL, ns1__EventBase *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EventBase(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EventBase(struct soap *soap, ns1__EventBase *p)
{
	if (::soap_read_ns1__EventBase(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EventMini_DEFINED
#define SOAP_TYPE_ns1__EventMini_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventMini(struct soap*, const char*, int, const ns1__EventMini *, const char*);
SOAP_FMAC3 ns1__EventMini * SOAP_FMAC4 soap_in_ns1__EventMini(struct soap*, const char*, ns1__EventMini *, const char*);
SOAP_FMAC1 ns1__EventMini * SOAP_FMAC2 soap_instantiate_ns1__EventMini(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EventMini * soap_new_ns1__EventMini(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EventMini(soap, n, NULL, NULL, NULL);
}

inline ns1__EventMini * soap_new_req_ns1__EventMini(
	struct soap *soap,
	std::string *Title,
	std::string *TitleAddition,
	std::string *Subtitle,
	std::string *SubtitleAddition,
	std::string *Category,
	std::string *SubCategory,
	std::string *Type,
	std::string *VenueCity,
	unsigned char OccupancyPercentage,
	bool EducationalLeave,
	bool Hidden__1,
	unsigned int Id__1,
	std::string *Number__1,
	std::string *KSBNumber__1,
	std::string *LSBNumber__1,
	unsigned int *SportRegion__1,
	std::string *Date__1)
{
	ns1__EventMini *_p = ::soap_new_ns1__EventMini(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventMini::Title = Title;
		_p->ns1__EventMini::TitleAddition = TitleAddition;
		_p->ns1__EventMini::Subtitle = Subtitle;
		_p->ns1__EventMini::SubtitleAddition = SubtitleAddition;
		_p->ns1__EventMini::Category = Category;
		_p->ns1__EventMini::SubCategory = SubCategory;
		_p->ns1__EventMini::Type = Type;
		_p->ns1__EventMini::VenueCity = VenueCity;
		_p->ns1__EventMini::OccupancyPercentage = OccupancyPercentage;
		_p->ns1__EventMini::EducationalLeave = EducationalLeave;
		_p->ns1__EventBase::Hidden = Hidden__1;
		_p->ns1__EventBase::Id = Id__1;
		_p->ns1__EventBase::Number = Number__1;
		_p->ns1__EventBase::KSBNumber = KSBNumber__1;
		_p->ns1__EventBase::LSBNumber = LSBNumber__1;
		_p->ns1__EventBase::SportRegion = SportRegion__1;
		_p->ns1__EventBase::Date = Date__1;
	}
	return _p;
}

inline ns1__EventMini * soap_new_set_ns1__EventMini(
	struct soap *soap,
	std::string *Title,
	std::string *TitleAddition,
	std::string *Subtitle,
	std::string *SubtitleAddition,
	std::string *Category,
	std::string *SubCategory,
	std::string *Type,
	std::string *VenueCity,
	unsigned char OccupancyPercentage,
	bool EducationalLeave,
	const std::vector<ns1__EventBase *> & SubEvents,
	bool Hidden__1,
	unsigned int Id__1,
	std::string *Number__1,
	std::string *KSBNumber__1,
	std::string *LSBNumber__1,
	unsigned int *SportRegion__1,
	std::string *Date__1)
{
	ns1__EventMini *_p = ::soap_new_ns1__EventMini(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventMini::Title = Title;
		_p->ns1__EventMini::TitleAddition = TitleAddition;
		_p->ns1__EventMini::Subtitle = Subtitle;
		_p->ns1__EventMini::SubtitleAddition = SubtitleAddition;
		_p->ns1__EventMini::Category = Category;
		_p->ns1__EventMini::SubCategory = SubCategory;
		_p->ns1__EventMini::Type = Type;
		_p->ns1__EventMini::VenueCity = VenueCity;
		_p->ns1__EventMini::OccupancyPercentage = OccupancyPercentage;
		_p->ns1__EventMini::EducationalLeave = EducationalLeave;
		_p->ns1__EventMini::SubEvents = SubEvents;
		_p->ns1__EventBase::Hidden = Hidden__1;
		_p->ns1__EventBase::Id = Id__1;
		_p->ns1__EventBase::Number = Number__1;
		_p->ns1__EventBase::KSBNumber = KSBNumber__1;
		_p->ns1__EventBase::LSBNumber = LSBNumber__1;
		_p->ns1__EventBase::SportRegion = SportRegion__1;
		_p->ns1__EventBase::Date = Date__1;
	}
	return _p;
}

inline int soap_write_ns1__EventMini(struct soap *soap, ns1__EventMini const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventMini", p->soap_type() == SOAP_TYPE_ns1__EventMini ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EventMini(struct soap *soap, const char *URL, ns1__EventMini const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventMini", p->soap_type() == SOAP_TYPE_ns1__EventMini ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EventMini(struct soap *soap, const char *URL, ns1__EventMini const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventMini", p->soap_type() == SOAP_TYPE_ns1__EventMini ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EventMini(struct soap *soap, const char *URL, ns1__EventMini const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventMini", p->soap_type() == SOAP_TYPE_ns1__EventMini ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EventMini * SOAP_FMAC4 soap_get_ns1__EventMini(struct soap*, ns1__EventMini *, const char*, const char*);

inline int soap_read_ns1__EventMini(struct soap *soap, ns1__EventMini *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EventMini(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EventMini(struct soap *soap, const char *URL, ns1__EventMini *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EventMini(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EventMini(struct soap *soap, ns1__EventMini *p)
{
	if (::soap_read_ns1__EventMini(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EventFilter_DEFINED
#define SOAP_TYPE_ns1__EventFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventFilter(struct soap*, const char*, int, const ns1__EventFilter *, const char*);
SOAP_FMAC3 ns1__EventFilter * SOAP_FMAC4 soap_in_ns1__EventFilter(struct soap*, const char*, ns1__EventFilter *, const char*);
SOAP_FMAC1 ns1__EventFilter * SOAP_FMAC2 soap_instantiate_ns1__EventFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EventFilter * soap_new_ns1__EventFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EventFilter(soap, n, NULL, NULL, NULL);
}

inline ns1__EventFilter * soap_new_req_ns1__EventFilter(
	struct soap *soap)
{
	ns1__EventFilter *_p = ::soap_new_ns1__EventFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__EventFilter * soap_new_set_ns1__EventFilter(
	struct soap *soap,
	unsigned int *OrganizerId,
	unsigned int *VenueId,
	std::string *KSBNumber,
	std::string *LSBNumber,
	unsigned int *SportRegion,
	bool *OnlyVisible,
	bool *OnlyWithEducationalLeave,
	std::string *Title,
	enum ns1__SearchType *TitleSearchType,
	std::string *TitleAddition,
	enum ns1__SearchType *TitleAdditionSearchType,
	std::string *Subtitle,
	enum ns1__SearchType *SubtitleSearchType,
	std::string *SubtitleAddition,
	enum ns1__SearchType *SubtitleAdditionSearchType,
	std::string *Category,
	enum ns1__SearchType *CategorySearchType,
	std::string *SubCategory,
	enum ns1__SearchType *SubCategorySearchType)
{
	ns1__EventFilter *_p = ::soap_new_ns1__EventFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EventFilter::OrganizerId = OrganizerId;
		_p->ns1__EventFilter::VenueId = VenueId;
		_p->ns1__EventFilter::KSBNumber = KSBNumber;
		_p->ns1__EventFilter::LSBNumber = LSBNumber;
		_p->ns1__EventFilter::SportRegion = SportRegion;
		_p->ns1__EventFilter::OnlyVisible = OnlyVisible;
		_p->ns1__EventFilter::OnlyWithEducationalLeave = OnlyWithEducationalLeave;
		_p->ns1__EventFilter::Title = Title;
		_p->ns1__EventFilter::TitleSearchType = TitleSearchType;
		_p->ns1__EventFilter::TitleAddition = TitleAddition;
		_p->ns1__EventFilter::TitleAdditionSearchType = TitleAdditionSearchType;
		_p->ns1__EventFilter::Subtitle = Subtitle;
		_p->ns1__EventFilter::SubtitleSearchType = SubtitleSearchType;
		_p->ns1__EventFilter::SubtitleAddition = SubtitleAddition;
		_p->ns1__EventFilter::SubtitleAdditionSearchType = SubtitleAdditionSearchType;
		_p->ns1__EventFilter::Category = Category;
		_p->ns1__EventFilter::CategorySearchType = CategorySearchType;
		_p->ns1__EventFilter::SubCategory = SubCategory;
		_p->ns1__EventFilter::SubCategorySearchType = SubCategorySearchType;
	}
	return _p;
}

inline int soap_write_ns1__EventFilter(struct soap *soap, ns1__EventFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventFilter", p->soap_type() == SOAP_TYPE_ns1__EventFilter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EventFilter(struct soap *soap, const char *URL, ns1__EventFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventFilter", p->soap_type() == SOAP_TYPE_ns1__EventFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EventFilter(struct soap *soap, const char *URL, ns1__EventFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventFilter", p->soap_type() == SOAP_TYPE_ns1__EventFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EventFilter(struct soap *soap, const char *URL, ns1__EventFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EventFilter", p->soap_type() == SOAP_TYPE_ns1__EventFilter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EventFilter * SOAP_FMAC4 soap_get_ns1__EventFilter(struct soap*, ns1__EventFilter *, const char*, const char*);

inline int soap_read_ns1__EventFilter(struct soap *soap, ns1__EventFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EventFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EventFilter(struct soap *soap, const char *URL, ns1__EventFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EventFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EventFilter(struct soap *soap, ns1__EventFilter *p)
{
	if (::soap_read_ns1__EventFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__register__DEFINED
#define SOAP_TYPE___ns1__register__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__register_(struct soap*, struct __ns1__register_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__register_(struct soap*, const struct __ns1__register_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__register_(struct soap*, const char*, int, const struct __ns1__register_ *, const char*);
SOAP_FMAC3 struct __ns1__register_ * SOAP_FMAC4 soap_in___ns1__register_(struct soap*, const char*, struct __ns1__register_ *, const char*);
SOAP_FMAC1 struct __ns1__register_ * SOAP_FMAC2 soap_instantiate___ns1__register_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__register_ * soap_new___ns1__register_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__register_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__register_ * soap_new_req___ns1__register_(
	struct soap *soap)
{
	struct __ns1__register_ *_p = ::soap_new___ns1__register_(soap);
	if (_p)
	{	::soap_default___ns1__register_(soap, _p);
	}
	return _p;
}

inline struct __ns1__register_ * soap_new_set___ns1__register_(
	struct soap *soap,
	_ns1__register *ns1__register)
{
	struct __ns1__register_ *_p = ::soap_new___ns1__register_(soap);
	if (_p)
	{	::soap_default___ns1__register_(soap, _p);
		_p->ns1__register = ns1__register;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__register_(struct soap*, const struct __ns1__register_ *, const char*, const char*);

inline int soap_write___ns1__register_(struct soap *soap, struct __ns1__register_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__register_(soap, p), 0) || ::soap_put___ns1__register_(soap, p, "-ns1:register", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__register_(struct soap *soap, const char *URL, struct __ns1__register_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__register_(soap, p), 0) || ::soap_put___ns1__register_(soap, p, "-ns1:register", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__register_(struct soap *soap, const char *URL, struct __ns1__register_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__register_(soap, p), 0) || ::soap_put___ns1__register_(soap, p, "-ns1:register", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__register_(struct soap *soap, const char *URL, struct __ns1__register_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__register_(soap, p), 0) || ::soap_put___ns1__register_(soap, p, "-ns1:register", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__register_ * SOAP_FMAC4 soap_get___ns1__register_(struct soap*, struct __ns1__register_ *, const char*, const char*);

inline int soap_read___ns1__register_(struct soap *soap, struct __ns1__register_ *p)
{
	if (p)
	{	::soap_default___ns1__register_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__register_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__register_(struct soap *soap, const char *URL, struct __ns1__register_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__register_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__register_(struct soap *soap, struct __ns1__register_ *p)
{
	if (::soap_read___ns1__register_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getSingleEvent__DEFINED
#define SOAP_TYPE___ns1__getSingleEvent__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSingleEvent_(struct soap*, struct __ns1__getSingleEvent_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSingleEvent_(struct soap*, const struct __ns1__getSingleEvent_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSingleEvent_(struct soap*, const char*, int, const struct __ns1__getSingleEvent_ *, const char*);
SOAP_FMAC3 struct __ns1__getSingleEvent_ * SOAP_FMAC4 soap_in___ns1__getSingleEvent_(struct soap*, const char*, struct __ns1__getSingleEvent_ *, const char*);
SOAP_FMAC1 struct __ns1__getSingleEvent_ * SOAP_FMAC2 soap_instantiate___ns1__getSingleEvent_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSingleEvent_ * soap_new___ns1__getSingleEvent_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSingleEvent_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSingleEvent_ * soap_new_req___ns1__getSingleEvent_(
	struct soap *soap)
{
	struct __ns1__getSingleEvent_ *_p = ::soap_new___ns1__getSingleEvent_(soap);
	if (_p)
	{	::soap_default___ns1__getSingleEvent_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSingleEvent_ * soap_new_set___ns1__getSingleEvent_(
	struct soap *soap,
	_ns1__getSingleEvent *ns1__getSingleEvent)
{
	struct __ns1__getSingleEvent_ *_p = ::soap_new___ns1__getSingleEvent_(soap);
	if (_p)
	{	::soap_default___ns1__getSingleEvent_(soap, _p);
		_p->ns1__getSingleEvent = ns1__getSingleEvent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSingleEvent_(struct soap*, const struct __ns1__getSingleEvent_ *, const char*, const char*);

inline int soap_write___ns1__getSingleEvent_(struct soap *soap, struct __ns1__getSingleEvent_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSingleEvent_(soap, p), 0) || ::soap_put___ns1__getSingleEvent_(soap, p, "-ns1:getSingleEvent", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSingleEvent_(struct soap *soap, const char *URL, struct __ns1__getSingleEvent_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSingleEvent_(soap, p), 0) || ::soap_put___ns1__getSingleEvent_(soap, p, "-ns1:getSingleEvent", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getSingleEvent_(struct soap *soap, const char *URL, struct __ns1__getSingleEvent_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSingleEvent_(soap, p), 0) || ::soap_put___ns1__getSingleEvent_(soap, p, "-ns1:getSingleEvent", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSingleEvent_(struct soap *soap, const char *URL, struct __ns1__getSingleEvent_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSingleEvent_(soap, p), 0) || ::soap_put___ns1__getSingleEvent_(soap, p, "-ns1:getSingleEvent", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSingleEvent_ * SOAP_FMAC4 soap_get___ns1__getSingleEvent_(struct soap*, struct __ns1__getSingleEvent_ *, const char*, const char*);

inline int soap_read___ns1__getSingleEvent_(struct soap *soap, struct __ns1__getSingleEvent_ *p)
{
	if (p)
	{	::soap_default___ns1__getSingleEvent_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSingleEvent_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSingleEvent_(struct soap *soap, const char *URL, struct __ns1__getSingleEvent_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSingleEvent_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getSingleEvent_(struct soap *soap, struct __ns1__getSingleEvent_ *p)
{
	if (::soap_read___ns1__getSingleEvent_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getAllEvents__DEFINED
#define SOAP_TYPE___ns1__getAllEvents__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAllEvents_(struct soap*, struct __ns1__getAllEvents_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAllEvents_(struct soap*, const struct __ns1__getAllEvents_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAllEvents_(struct soap*, const char*, int, const struct __ns1__getAllEvents_ *, const char*);
SOAP_FMAC3 struct __ns1__getAllEvents_ * SOAP_FMAC4 soap_in___ns1__getAllEvents_(struct soap*, const char*, struct __ns1__getAllEvents_ *, const char*);
SOAP_FMAC1 struct __ns1__getAllEvents_ * SOAP_FMAC2 soap_instantiate___ns1__getAllEvents_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAllEvents_ * soap_new___ns1__getAllEvents_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getAllEvents_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getAllEvents_ * soap_new_req___ns1__getAllEvents_(
	struct soap *soap)
{
	struct __ns1__getAllEvents_ *_p = ::soap_new___ns1__getAllEvents_(soap);
	if (_p)
	{	::soap_default___ns1__getAllEvents_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getAllEvents_ * soap_new_set___ns1__getAllEvents_(
	struct soap *soap,
	_ns1__getAllEvents *ns1__getAllEvents)
{
	struct __ns1__getAllEvents_ *_p = ::soap_new___ns1__getAllEvents_(soap);
	if (_p)
	{	::soap_default___ns1__getAllEvents_(soap, _p);
		_p->ns1__getAllEvents = ns1__getAllEvents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAllEvents_(struct soap*, const struct __ns1__getAllEvents_ *, const char*, const char*);

inline int soap_write___ns1__getAllEvents_(struct soap *soap, struct __ns1__getAllEvents_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getAllEvents_(soap, p), 0) || ::soap_put___ns1__getAllEvents_(soap, p, "-ns1:getAllEvents", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getAllEvents_(struct soap *soap, const char *URL, struct __ns1__getAllEvents_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getAllEvents_(soap, p), 0) || ::soap_put___ns1__getAllEvents_(soap, p, "-ns1:getAllEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getAllEvents_(struct soap *soap, const char *URL, struct __ns1__getAllEvents_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getAllEvents_(soap, p), 0) || ::soap_put___ns1__getAllEvents_(soap, p, "-ns1:getAllEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getAllEvents_(struct soap *soap, const char *URL, struct __ns1__getAllEvents_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getAllEvents_(soap, p), 0) || ::soap_put___ns1__getAllEvents_(soap, p, "-ns1:getAllEvents", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getAllEvents_ * SOAP_FMAC4 soap_get___ns1__getAllEvents_(struct soap*, struct __ns1__getAllEvents_ *, const char*, const char*);

inline int soap_read___ns1__getAllEvents_(struct soap *soap, struct __ns1__getAllEvents_ *p)
{
	if (p)
	{	::soap_default___ns1__getAllEvents_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getAllEvents_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getAllEvents_(struct soap *soap, const char *URL, struct __ns1__getAllEvents_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getAllEvents_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getAllEvents_(struct soap *soap, struct __ns1__getAllEvents_ *p)
{
	if (::soap_read___ns1__getAllEvents_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__dumpTableFields__DEFINED
#define SOAP_TYPE___ns1__dumpTableFields__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__dumpTableFields_(struct soap*, struct __ns1__dumpTableFields_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__dumpTableFields_(struct soap*, const struct __ns1__dumpTableFields_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__dumpTableFields_(struct soap*, const char*, int, const struct __ns1__dumpTableFields_ *, const char*);
SOAP_FMAC3 struct __ns1__dumpTableFields_ * SOAP_FMAC4 soap_in___ns1__dumpTableFields_(struct soap*, const char*, struct __ns1__dumpTableFields_ *, const char*);
SOAP_FMAC1 struct __ns1__dumpTableFields_ * SOAP_FMAC2 soap_instantiate___ns1__dumpTableFields_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__dumpTableFields_ * soap_new___ns1__dumpTableFields_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__dumpTableFields_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__dumpTableFields_ * soap_new_req___ns1__dumpTableFields_(
	struct soap *soap)
{
	struct __ns1__dumpTableFields_ *_p = ::soap_new___ns1__dumpTableFields_(soap);
	if (_p)
	{	::soap_default___ns1__dumpTableFields_(soap, _p);
	}
	return _p;
}

inline struct __ns1__dumpTableFields_ * soap_new_set___ns1__dumpTableFields_(
	struct soap *soap,
	_ns1__dumpTableFields *ns1__dumpTableFields)
{
	struct __ns1__dumpTableFields_ *_p = ::soap_new___ns1__dumpTableFields_(soap);
	if (_p)
	{	::soap_default___ns1__dumpTableFields_(soap, _p);
		_p->ns1__dumpTableFields = ns1__dumpTableFields;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__dumpTableFields_(struct soap*, const struct __ns1__dumpTableFields_ *, const char*, const char*);

inline int soap_write___ns1__dumpTableFields_(struct soap *soap, struct __ns1__dumpTableFields_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__dumpTableFields_(soap, p), 0) || ::soap_put___ns1__dumpTableFields_(soap, p, "-ns1:dumpTableFields", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__dumpTableFields_(struct soap *soap, const char *URL, struct __ns1__dumpTableFields_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__dumpTableFields_(soap, p), 0) || ::soap_put___ns1__dumpTableFields_(soap, p, "-ns1:dumpTableFields", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__dumpTableFields_(struct soap *soap, const char *URL, struct __ns1__dumpTableFields_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__dumpTableFields_(soap, p), 0) || ::soap_put___ns1__dumpTableFields_(soap, p, "-ns1:dumpTableFields", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__dumpTableFields_(struct soap *soap, const char *URL, struct __ns1__dumpTableFields_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__dumpTableFields_(soap, p), 0) || ::soap_put___ns1__dumpTableFields_(soap, p, "-ns1:dumpTableFields", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__dumpTableFields_ * SOAP_FMAC4 soap_get___ns1__dumpTableFields_(struct soap*, struct __ns1__dumpTableFields_ *, const char*, const char*);

inline int soap_read___ns1__dumpTableFields_(struct soap *soap, struct __ns1__dumpTableFields_ *p)
{
	if (p)
	{	::soap_default___ns1__dumpTableFields_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__dumpTableFields_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__dumpTableFields_(struct soap *soap, const char *URL, struct __ns1__dumpTableFields_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__dumpTableFields_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__dumpTableFields_(struct soap *soap, struct __ns1__dumpTableFields_ *p)
{
	if (::soap_read___ns1__dumpTableFields_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__register_DEFINED
#define SOAP_TYPE___ns1__register_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__register(struct soap*, struct __ns1__register *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__register(struct soap*, const struct __ns1__register *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__register(struct soap*, const char*, int, const struct __ns1__register *, const char*);
SOAP_FMAC3 struct __ns1__register * SOAP_FMAC4 soap_in___ns1__register(struct soap*, const char*, struct __ns1__register *, const char*);
SOAP_FMAC1 struct __ns1__register * SOAP_FMAC2 soap_instantiate___ns1__register(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__register * soap_new___ns1__register(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__register(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__register * soap_new_req___ns1__register(
	struct soap *soap)
{
	struct __ns1__register *_p = ::soap_new___ns1__register(soap);
	if (_p)
	{	::soap_default___ns1__register(soap, _p);
	}
	return _p;
}

inline struct __ns1__register * soap_new_set___ns1__register(
	struct soap *soap,
	_ns1__register *ns1__register)
{
	struct __ns1__register *_p = ::soap_new___ns1__register(soap);
	if (_p)
	{	::soap_default___ns1__register(soap, _p);
		_p->ns1__register = ns1__register;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__register(struct soap*, const struct __ns1__register *, const char*, const char*);

inline int soap_write___ns1__register(struct soap *soap, struct __ns1__register const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__register(soap, p), 0) || ::soap_put___ns1__register(soap, p, "-ns1:register", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__register(struct soap *soap, const char *URL, struct __ns1__register const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__register(soap, p), 0) || ::soap_put___ns1__register(soap, p, "-ns1:register", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__register(struct soap *soap, const char *URL, struct __ns1__register const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__register(soap, p), 0) || ::soap_put___ns1__register(soap, p, "-ns1:register", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__register(struct soap *soap, const char *URL, struct __ns1__register const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__register(soap, p), 0) || ::soap_put___ns1__register(soap, p, "-ns1:register", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__register * SOAP_FMAC4 soap_get___ns1__register(struct soap*, struct __ns1__register *, const char*, const char*);

inline int soap_read___ns1__register(struct soap *soap, struct __ns1__register *p)
{
	if (p)
	{	::soap_default___ns1__register(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__register(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__register(struct soap *soap, const char *URL, struct __ns1__register *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__register(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__register(struct soap *soap, struct __ns1__register *p)
{
	if (::soap_read___ns1__register(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getSingleEvent_DEFINED
#define SOAP_TYPE___ns1__getSingleEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSingleEvent(struct soap*, struct __ns1__getSingleEvent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSingleEvent(struct soap*, const struct __ns1__getSingleEvent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSingleEvent(struct soap*, const char*, int, const struct __ns1__getSingleEvent *, const char*);
SOAP_FMAC3 struct __ns1__getSingleEvent * SOAP_FMAC4 soap_in___ns1__getSingleEvent(struct soap*, const char*, struct __ns1__getSingleEvent *, const char*);
SOAP_FMAC1 struct __ns1__getSingleEvent * SOAP_FMAC2 soap_instantiate___ns1__getSingleEvent(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSingleEvent * soap_new___ns1__getSingleEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSingleEvent(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSingleEvent * soap_new_req___ns1__getSingleEvent(
	struct soap *soap)
{
	struct __ns1__getSingleEvent *_p = ::soap_new___ns1__getSingleEvent(soap);
	if (_p)
	{	::soap_default___ns1__getSingleEvent(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSingleEvent * soap_new_set___ns1__getSingleEvent(
	struct soap *soap,
	_ns1__getSingleEvent *ns1__getSingleEvent)
{
	struct __ns1__getSingleEvent *_p = ::soap_new___ns1__getSingleEvent(soap);
	if (_p)
	{	::soap_default___ns1__getSingleEvent(soap, _p);
		_p->ns1__getSingleEvent = ns1__getSingleEvent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSingleEvent(struct soap*, const struct __ns1__getSingleEvent *, const char*, const char*);

inline int soap_write___ns1__getSingleEvent(struct soap *soap, struct __ns1__getSingleEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSingleEvent(soap, p), 0) || ::soap_put___ns1__getSingleEvent(soap, p, "-ns1:getSingleEvent", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSingleEvent(struct soap *soap, const char *URL, struct __ns1__getSingleEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSingleEvent(soap, p), 0) || ::soap_put___ns1__getSingleEvent(soap, p, "-ns1:getSingleEvent", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getSingleEvent(struct soap *soap, const char *URL, struct __ns1__getSingleEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSingleEvent(soap, p), 0) || ::soap_put___ns1__getSingleEvent(soap, p, "-ns1:getSingleEvent", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSingleEvent(struct soap *soap, const char *URL, struct __ns1__getSingleEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSingleEvent(soap, p), 0) || ::soap_put___ns1__getSingleEvent(soap, p, "-ns1:getSingleEvent", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSingleEvent * SOAP_FMAC4 soap_get___ns1__getSingleEvent(struct soap*, struct __ns1__getSingleEvent *, const char*, const char*);

inline int soap_read___ns1__getSingleEvent(struct soap *soap, struct __ns1__getSingleEvent *p)
{
	if (p)
	{	::soap_default___ns1__getSingleEvent(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSingleEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSingleEvent(struct soap *soap, const char *URL, struct __ns1__getSingleEvent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSingleEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getSingleEvent(struct soap *soap, struct __ns1__getSingleEvent *p)
{
	if (::soap_read___ns1__getSingleEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getAllEvents_DEFINED
#define SOAP_TYPE___ns1__getAllEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAllEvents(struct soap*, struct __ns1__getAllEvents *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAllEvents(struct soap*, const struct __ns1__getAllEvents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAllEvents(struct soap*, const char*, int, const struct __ns1__getAllEvents *, const char*);
SOAP_FMAC3 struct __ns1__getAllEvents * SOAP_FMAC4 soap_in___ns1__getAllEvents(struct soap*, const char*, struct __ns1__getAllEvents *, const char*);
SOAP_FMAC1 struct __ns1__getAllEvents * SOAP_FMAC2 soap_instantiate___ns1__getAllEvents(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAllEvents * soap_new___ns1__getAllEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getAllEvents(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getAllEvents * soap_new_req___ns1__getAllEvents(
	struct soap *soap)
{
	struct __ns1__getAllEvents *_p = ::soap_new___ns1__getAllEvents(soap);
	if (_p)
	{	::soap_default___ns1__getAllEvents(soap, _p);
	}
	return _p;
}

inline struct __ns1__getAllEvents * soap_new_set___ns1__getAllEvents(
	struct soap *soap,
	_ns1__getAllEvents *ns1__getAllEvents)
{
	struct __ns1__getAllEvents *_p = ::soap_new___ns1__getAllEvents(soap);
	if (_p)
	{	::soap_default___ns1__getAllEvents(soap, _p);
		_p->ns1__getAllEvents = ns1__getAllEvents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAllEvents(struct soap*, const struct __ns1__getAllEvents *, const char*, const char*);

inline int soap_write___ns1__getAllEvents(struct soap *soap, struct __ns1__getAllEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getAllEvents(soap, p), 0) || ::soap_put___ns1__getAllEvents(soap, p, "-ns1:getAllEvents", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getAllEvents(struct soap *soap, const char *URL, struct __ns1__getAllEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getAllEvents(soap, p), 0) || ::soap_put___ns1__getAllEvents(soap, p, "-ns1:getAllEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getAllEvents(struct soap *soap, const char *URL, struct __ns1__getAllEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getAllEvents(soap, p), 0) || ::soap_put___ns1__getAllEvents(soap, p, "-ns1:getAllEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getAllEvents(struct soap *soap, const char *URL, struct __ns1__getAllEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getAllEvents(soap, p), 0) || ::soap_put___ns1__getAllEvents(soap, p, "-ns1:getAllEvents", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getAllEvents * SOAP_FMAC4 soap_get___ns1__getAllEvents(struct soap*, struct __ns1__getAllEvents *, const char*, const char*);

inline int soap_read___ns1__getAllEvents(struct soap *soap, struct __ns1__getAllEvents *p)
{
	if (p)
	{	::soap_default___ns1__getAllEvents(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getAllEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getAllEvents(struct soap *soap, const char *URL, struct __ns1__getAllEvents *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getAllEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getAllEvents(struct soap *soap, struct __ns1__getAllEvents *p)
{
	if (::soap_read___ns1__getAllEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__dumpTableFields_DEFINED
#define SOAP_TYPE___ns1__dumpTableFields_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__dumpTableFields(struct soap*, struct __ns1__dumpTableFields *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__dumpTableFields(struct soap*, const struct __ns1__dumpTableFields *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__dumpTableFields(struct soap*, const char*, int, const struct __ns1__dumpTableFields *, const char*);
SOAP_FMAC3 struct __ns1__dumpTableFields * SOAP_FMAC4 soap_in___ns1__dumpTableFields(struct soap*, const char*, struct __ns1__dumpTableFields *, const char*);
SOAP_FMAC1 struct __ns1__dumpTableFields * SOAP_FMAC2 soap_instantiate___ns1__dumpTableFields(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__dumpTableFields * soap_new___ns1__dumpTableFields(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__dumpTableFields(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__dumpTableFields * soap_new_req___ns1__dumpTableFields(
	struct soap *soap)
{
	struct __ns1__dumpTableFields *_p = ::soap_new___ns1__dumpTableFields(soap);
	if (_p)
	{	::soap_default___ns1__dumpTableFields(soap, _p);
	}
	return _p;
}

inline struct __ns1__dumpTableFields * soap_new_set___ns1__dumpTableFields(
	struct soap *soap,
	_ns1__dumpTableFields *ns1__dumpTableFields)
{
	struct __ns1__dumpTableFields *_p = ::soap_new___ns1__dumpTableFields(soap);
	if (_p)
	{	::soap_default___ns1__dumpTableFields(soap, _p);
		_p->ns1__dumpTableFields = ns1__dumpTableFields;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__dumpTableFields(struct soap*, const struct __ns1__dumpTableFields *, const char*, const char*);

inline int soap_write___ns1__dumpTableFields(struct soap *soap, struct __ns1__dumpTableFields const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__dumpTableFields(soap, p), 0) || ::soap_put___ns1__dumpTableFields(soap, p, "-ns1:dumpTableFields", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__dumpTableFields(struct soap *soap, const char *URL, struct __ns1__dumpTableFields const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__dumpTableFields(soap, p), 0) || ::soap_put___ns1__dumpTableFields(soap, p, "-ns1:dumpTableFields", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__dumpTableFields(struct soap *soap, const char *URL, struct __ns1__dumpTableFields const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__dumpTableFields(soap, p), 0) || ::soap_put___ns1__dumpTableFields(soap, p, "-ns1:dumpTableFields", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__dumpTableFields(struct soap *soap, const char *URL, struct __ns1__dumpTableFields const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__dumpTableFields(soap, p), 0) || ::soap_put___ns1__dumpTableFields(soap, p, "-ns1:dumpTableFields", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__dumpTableFields * SOAP_FMAC4 soap_get___ns1__dumpTableFields(struct soap*, struct __ns1__dumpTableFields *, const char*, const char*);

inline int soap_read___ns1__dumpTableFields(struct soap *soap, struct __ns1__dumpTableFields *p)
{
	if (p)
	{	::soap_default___ns1__dumpTableFields(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__dumpTableFields(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__dumpTableFields(struct soap *soap, const char *URL, struct __ns1__dumpTableFields *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__dumpTableFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__dumpTableFields(struct soap *soap, struct __ns1__dumpTableFields *p)
{
	if (::soap_read___ns1__dumpTableFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__register_DEFINED
#define SOAP_TYPE_PointerTo_ns1__register_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__register(struct soap*, _ns1__register *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__register(struct soap*, const char *, int, _ns1__register *const*, const char *);
SOAP_FMAC3 _ns1__register ** SOAP_FMAC4 soap_in_PointerTo_ns1__register(struct soap*, const char*, _ns1__register **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__register(struct soap*, _ns1__register *const*, const char*, const char*);
SOAP_FMAC3 _ns1__register ** SOAP_FMAC4 soap_get_PointerTo_ns1__register(struct soap*, _ns1__register **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSingleEvent_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSingleEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSingleEvent(struct soap*, _ns1__getSingleEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSingleEvent(struct soap*, const char *, int, _ns1__getSingleEvent *const*, const char *);
SOAP_FMAC3 _ns1__getSingleEvent ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSingleEvent(struct soap*, const char*, _ns1__getSingleEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSingleEvent(struct soap*, _ns1__getSingleEvent *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSingleEvent ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSingleEvent(struct soap*, _ns1__getSingleEvent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getAllEvents_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getAllEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getAllEvents(struct soap*, _ns1__getAllEvents *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getAllEvents(struct soap*, const char *, int, _ns1__getAllEvents *const*, const char *);
SOAP_FMAC3 _ns1__getAllEvents ** SOAP_FMAC4 soap_in_PointerTo_ns1__getAllEvents(struct soap*, const char*, _ns1__getAllEvents **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getAllEvents(struct soap*, _ns1__getAllEvents *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getAllEvents ** SOAP_FMAC4 soap_get_PointerTo_ns1__getAllEvents(struct soap*, _ns1__getAllEvents **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__dumpTableFields_DEFINED
#define SOAP_TYPE_PointerTo_ns1__dumpTableFields_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__dumpTableFields(struct soap*, _ns1__dumpTableFields *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__dumpTableFields(struct soap*, const char *, int, _ns1__dumpTableFields *const*, const char *);
SOAP_FMAC3 _ns1__dumpTableFields ** SOAP_FMAC4 soap_in_PointerTo_ns1__dumpTableFields(struct soap*, const char*, _ns1__dumpTableFields **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__dumpTableFields(struct soap*, _ns1__dumpTableFields *const*, const char*, const char*);
SOAP_FMAC3 _ns1__dumpTableFields ** SOAP_FMAC4 soap_get_PointerTo_ns1__dumpTableFields(struct soap*, _ns1__dumpTableFields **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__WorkshopTimeslot_DEFINED
#define SOAP_TYPE_PointerTons1__WorkshopTimeslot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__WorkshopTimeslot(struct soap*, ns1__WorkshopTimeslot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__WorkshopTimeslot(struct soap*, const char *, int, ns1__WorkshopTimeslot *const*, const char *);
SOAP_FMAC3 ns1__WorkshopTimeslot ** SOAP_FMAC4 soap_in_PointerTons1__WorkshopTimeslot(struct soap*, const char*, ns1__WorkshopTimeslot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__WorkshopTimeslot(struct soap*, ns1__WorkshopTimeslot *const*, const char*, const char*);
SOAP_FMAC3 ns1__WorkshopTimeslot ** SOAP_FMAC4 soap_get_PointerTons1__WorkshopTimeslot(struct soap*, ns1__WorkshopTimeslot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Address_DEFINED
#define SOAP_TYPE_PointerTons1__Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Address(struct soap*, ns1__Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Address(struct soap*, const char *, int, ns1__Address *const*, const char *);
SOAP_FMAC3 ns1__Address ** SOAP_FMAC4 soap_in_PointerTons1__Address(struct soap*, const char*, ns1__Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Address(struct soap*, ns1__Address *const*, const char*, const char*);
SOAP_FMAC3 ns1__Address ** SOAP_FMAC4 soap_get_PointerTons1__Address(struct soap*, ns1__Address **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EventFee_DEFINED
#define SOAP_TYPE_PointerTons1__EventFee_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventFee(struct soap*, ns1__EventFee *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventFee(struct soap*, const char *, int, ns1__EventFee *const*, const char *);
SOAP_FMAC3 ns1__EventFee ** SOAP_FMAC4 soap_in_PointerTons1__EventFee(struct soap*, const char*, ns1__EventFee **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventFee(struct soap*, ns1__EventFee *const*, const char*, const char*);
SOAP_FMAC3 ns1__EventFee ** SOAP_FMAC4 soap_get_PointerTons1__EventFee(struct soap*, ns1__EventFee **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EventBase_DEFINED
#define SOAP_TYPE_PointerTons1__EventBase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventBase(struct soap*, ns1__EventBase *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventBase(struct soap*, const char *, int, ns1__EventBase *const*, const char *);
SOAP_FMAC3 ns1__EventBase ** SOAP_FMAC4 soap_in_PointerTons1__EventBase(struct soap*, const char*, ns1__EventBase **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventBase(struct soap*, ns1__EventBase *const*, const char*, const char*);
SOAP_FMAC3 ns1__EventBase ** SOAP_FMAC4 soap_get_PointerTons1__EventBase(struct soap*, ns1__EventBase **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EventRegistrationWarning_DEFINED
#define SOAP_TYPE_PointerTons1__EventRegistrationWarning_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventRegistrationWarning(struct soap*, ns1__EventRegistrationWarning *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventRegistrationWarning(struct soap*, const char *, int, ns1__EventRegistrationWarning *const*, const char *);
SOAP_FMAC3 ns1__EventRegistrationWarning ** SOAP_FMAC4 soap_in_PointerTons1__EventRegistrationWarning(struct soap*, const char*, ns1__EventRegistrationWarning **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventRegistrationWarning(struct soap*, ns1__EventRegistrationWarning *const*, const char*, const char*);
SOAP_FMAC3 ns1__EventRegistrationWarning ** SOAP_FMAC4 soap_get_PointerTons1__EventRegistrationWarning(struct soap*, ns1__EventRegistrationWarning **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EventRegistration_DEFINED
#define SOAP_TYPE_PointerTons1__EventRegistration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventRegistration(struct soap*, ns1__EventRegistration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventRegistration(struct soap*, const char *, int, ns1__EventRegistration *const*, const char *);
SOAP_FMAC3 ns1__EventRegistration ** SOAP_FMAC4 soap_in_PointerTons1__EventRegistration(struct soap*, const char*, ns1__EventRegistration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventRegistration(struct soap*, ns1__EventRegistration *const*, const char*, const char*);
SOAP_FMAC3 ns1__EventRegistration ** SOAP_FMAC4 soap_get_PointerTons1__EventRegistration(struct soap*, ns1__EventRegistration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Event_DEFINED
#define SOAP_TYPE_PointerTons1__Event_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Event(struct soap*, ns1__Event *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Event(struct soap*, const char *, int, ns1__Event *const*, const char *);
SOAP_FMAC3 ns1__Event ** SOAP_FMAC4 soap_in_PointerTons1__Event(struct soap*, const char*, ns1__Event **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Event(struct soap*, ns1__Event *const*, const char*, const char*);
SOAP_FMAC3 ns1__Event ** SOAP_FMAC4 soap_get_PointerTons1__Event(struct soap*, ns1__Event **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EventMini_DEFINED
#define SOAP_TYPE_PointerTons1__EventMini_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventMini(struct soap*, ns1__EventMini *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventMini(struct soap*, const char *, int, ns1__EventMini *const*, const char *);
SOAP_FMAC3 ns1__EventMini ** SOAP_FMAC4 soap_in_PointerTons1__EventMini(struct soap*, const char*, ns1__EventMini **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventMini(struct soap*, ns1__EventMini *const*, const char*, const char*);
SOAP_FMAC3 ns1__EventMini ** SOAP_FMAC4 soap_get_PointerTons1__EventMini(struct soap*, ns1__EventMini **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EventFilter_DEFINED
#define SOAP_TYPE_PointerTons1__EventFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventFilter(struct soap*, ns1__EventFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventFilter(struct soap*, const char *, int, ns1__EventFilter *const*, const char *);
SOAP_FMAC3 ns1__EventFilter ** SOAP_FMAC4 soap_in_PointerTons1__EventFilter(struct soap*, const char*, ns1__EventFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventFilter(struct soap*, ns1__EventFilter *const*, const char*, const char*);
SOAP_FMAC3 ns1__EventFilter ** SOAP_FMAC4 soap_get_PointerTons1__EventFilter(struct soap*, ns1__EventFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__KeyValue_DEFINED
#define SOAP_TYPE_PointerTons1__KeyValue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__KeyValue(struct soap*, ns1__KeyValue *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__KeyValue(struct soap*, const char *, int, ns1__KeyValue *const*, const char *);
SOAP_FMAC3 ns1__KeyValue ** SOAP_FMAC4 soap_in_PointerTons1__KeyValue(struct soap*, const char*, ns1__KeyValue **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__KeyValue(struct soap*, ns1__KeyValue *const*, const char*, const char*);
SOAP_FMAC3 ns1__KeyValue ** SOAP_FMAC4 soap_get_PointerTons1__KeyValue(struct soap*, ns1__KeyValue **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EventRegistrationEvent_DEFINED
#define SOAP_TYPE_PointerTons1__EventRegistrationEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventRegistrationEvent(struct soap*, ns1__EventRegistrationEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventRegistrationEvent(struct soap*, const char *, int, ns1__EventRegistrationEvent *const*, const char *);
SOAP_FMAC3 ns1__EventRegistrationEvent ** SOAP_FMAC4 soap_in_PointerTons1__EventRegistrationEvent(struct soap*, const char*, ns1__EventRegistrationEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventRegistrationEvent(struct soap*, ns1__EventRegistrationEvent *const*, const char*, const char*);
SOAP_FMAC3 ns1__EventRegistrationEvent ** SOAP_FMAC4 soap_get_PointerTons1__EventRegistrationEvent(struct soap*, ns1__EventRegistrationEvent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Workshop_DEFINED
#define SOAP_TYPE_PointerTons1__Workshop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Workshop(struct soap*, ns1__Workshop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Workshop(struct soap*, const char *, int, ns1__Workshop *const*, const char *);
SOAP_FMAC3 ns1__Workshop ** SOAP_FMAC4 soap_in_PointerTons1__Workshop(struct soap*, const char*, ns1__Workshop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Workshop(struct soap*, ns1__Workshop *const*, const char*, const char*);
SOAP_FMAC3 ns1__Workshop ** SOAP_FMAC4 soap_get_PointerTons1__Workshop(struct soap*, ns1__Workshop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SearchType_DEFINED
#define SOAP_TYPE_PointerTons1__SearchType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SearchType(struct soap*, enum ns1__SearchType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SearchType(struct soap*, const char *, int, enum ns1__SearchType *const*, const char *);
SOAP_FMAC3 enum ns1__SearchType ** SOAP_FMAC4 soap_in_PointerTons1__SearchType(struct soap*, const char*, enum ns1__SearchType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SearchType(struct soap*, enum ns1__SearchType *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__SearchType ** SOAP_FMAC4 soap_get_PointerTons1__SearchType(struct soap*, enum ns1__SearchType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedInt_DEFINED
#define SOAP_TYPE_PointerTounsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap*, unsigned int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap*, const char *, int, unsigned int *const*, const char *);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap*, const char*, unsigned int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap*, unsigned int *const*, const char*, const char*);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap*, unsigned int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkshopTimeslot_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__WorkshopTimeslot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap*, std::vector<ns1__WorkshopTimeslot *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap*, const std::vector<ns1__WorkshopTimeslot *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap*, const char*, int, const std::vector<ns1__WorkshopTimeslot *> *, const char*);
SOAP_FMAC3 std::vector<ns1__WorkshopTimeslot *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap*, const char*, std::vector<ns1__WorkshopTimeslot *> *, const char*);
SOAP_FMAC1 std::vector<ns1__WorkshopTimeslot *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__WorkshopTimeslot *>  * soap_new_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__WorkshopTimeslot(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventFee_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventFee_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventFee(struct soap*, std::vector<ns1__EventFee *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventFee(struct soap*, const std::vector<ns1__EventFee *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventFee(struct soap*, const char*, int, const std::vector<ns1__EventFee *> *, const char*);
SOAP_FMAC3 std::vector<ns1__EventFee *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventFee(struct soap*, const char*, std::vector<ns1__EventFee *> *, const char*);
SOAP_FMAC1 std::vector<ns1__EventFee *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventFee(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__EventFee *>  * soap_new_std__vectorTemplateOfPointerTons1__EventFee(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__EventFee(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventBase_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventBase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventBase(struct soap*, std::vector<ns1__EventBase *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventBase(struct soap*, const std::vector<ns1__EventBase *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventBase(struct soap*, const char*, int, const std::vector<ns1__EventBase *> *, const char*);
SOAP_FMAC3 std::vector<ns1__EventBase *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventBase(struct soap*, const char*, std::vector<ns1__EventBase *> *, const char*);
SOAP_FMAC1 std::vector<ns1__EventBase *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventBase(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__EventBase *>  * soap_new_std__vectorTemplateOfPointerTons1__EventBase(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__EventBase(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationWarning_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationWarning_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap*, std::vector<ns1__EventRegistrationWarning *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap*, const std::vector<ns1__EventRegistrationWarning *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap*, const char*, int, const std::vector<ns1__EventRegistrationWarning *> *, const char*);
SOAP_FMAC3 std::vector<ns1__EventRegistrationWarning *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap*, const char*, std::vector<ns1__EventRegistrationWarning *> *, const char*);
SOAP_FMAC1 std::vector<ns1__EventRegistrationWarning *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__EventRegistrationWarning *>  * soap_new_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationWarning(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventMini_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventMini_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventMini(struct soap*, std::vector<ns1__EventMini *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventMini(struct soap*, const std::vector<ns1__EventMini *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventMini(struct soap*, const char*, int, const std::vector<ns1__EventMini *> *, const char*);
SOAP_FMAC3 std::vector<ns1__EventMini *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventMini(struct soap*, const char*, std::vector<ns1__EventMini *> *, const char*);
SOAP_FMAC1 std::vector<ns1__EventMini *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventMini(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__EventMini *>  * soap_new_std__vectorTemplateOfPointerTons1__EventMini(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__EventMini(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__KeyValue_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__KeyValue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__KeyValue(struct soap*, std::vector<ns1__KeyValue *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__KeyValue(struct soap*, const std::vector<ns1__KeyValue *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__KeyValue(struct soap*, const char*, int, const std::vector<ns1__KeyValue *> *, const char*);
SOAP_FMAC3 std::vector<ns1__KeyValue *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__KeyValue(struct soap*, const char*, std::vector<ns1__KeyValue *> *, const char*);
SOAP_FMAC1 std::vector<ns1__KeyValue *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__KeyValue(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__KeyValue *>  * soap_new_std__vectorTemplateOfPointerTons1__KeyValue(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__KeyValue(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfunsignedInt_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfunsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfunsignedInt(struct soap*, std::vector<unsigned int> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfunsignedInt(struct soap*, const std::vector<unsigned int> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfunsignedInt(struct soap*, const char*, int, const std::vector<unsigned int> *, const char*);
SOAP_FMAC3 std::vector<unsigned int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfunsignedInt(struct soap*, const char*, std::vector<unsigned int> *, const char*);
SOAP_FMAC1 std::vector<unsigned int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfunsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<unsigned int>  * soap_new_std__vectorTemplateOfunsignedInt(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfunsignedInt(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationEvent_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__EventRegistrationEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap*, std::vector<ns1__EventRegistrationEvent *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap*, const std::vector<ns1__EventRegistrationEvent *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap*, const char*, int, const std::vector<ns1__EventRegistrationEvent *> *, const char*);
SOAP_FMAC3 std::vector<ns1__EventRegistrationEvent *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap*, const char*, std::vector<ns1__EventRegistrationEvent *> *, const char*);
SOAP_FMAC1 std::vector<ns1__EventRegistrationEvent *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__EventRegistrationEvent *>  * soap_new_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__EventRegistrationEvent(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Workshop_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Workshop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Workshop(struct soap*, std::vector<ns1__Workshop *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Workshop(struct soap*, const std::vector<ns1__Workshop *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Workshop(struct soap*, const char*, int, const std::vector<ns1__Workshop *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Workshop *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Workshop(struct soap*, const char*, std::vector<ns1__Workshop *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Workshop *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Workshop(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Workshop *>  * soap_new_std__vectorTemplateOfPointerTons1__Workshop(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Workshop(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
