// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* bildung.h
   Generated by wsdl2h 2.8.104 from bildung_test_wsdl.xml and typemap.dat
   2020-07-01 11:11:57 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on bildung.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.lsb-niedersachsen.de/bildungsportal/api/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://www.lsb-niedersachsen.de/bildungsportal/api/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.lsb-niedersachsen.de/bildungsportal/api/"
//gsoap ns1   schema namespace:	http://www.lsb-niedersachsen.de/bildungsportal/api/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class ns1__EventFilter;

class ns1__EventMini;

class ns1__EventBase;

class ns1__Event;

class ns1__EventFee;

class ns1__Address;

class ns1__WorkshopTimeslot;

class ns1__Workshop;

class ns1__EventRegistration;

class ns1__EventRegistrationEvent;

class ns1__EventRegistrationWarning;

class ns1__KeyValue;

class _ns1__dumpTableFields;

class _ns1__dumpTableFieldsResponse;

class _ns1__getAllEvents;

class _ns1__getAllEventsResponse;

class _ns1__getSingleEvent;

class _ns1__getSingleEventResponse;

class _ns1__register;

class _ns1__registerResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.lsb-niedersachsen.de/bildungsportal/api/                      *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":SearchType is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__SearchType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__SearchType
{
	ns1__SearchType__Exact,	///< xs:string value="Exact"
	ns1__SearchType__Start,	///< xs:string value="Start"
	ns1__SearchType__Middle,	///< xs:string value="Middle"
	ns1__SearchType__End,	///< xs:string value="End"
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.lsb-niedersachsen.de/bildungsportal/api/                      *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventFilter is a complexType.
///
/// @note class ns1__EventFilter operations:
/// - ns1__EventFilter* soap_new_ns1__EventFilter(soap*) allocate and default initialize
/// - ns1__EventFilter* soap_new_ns1__EventFilter(soap*, int num) allocate and default initialize an array
/// - ns1__EventFilter* soap_new_req_ns1__EventFilter(soap*, ...) allocate, set required members
/// - ns1__EventFilter* soap_new_set_ns1__EventFilter(soap*, ...) allocate, set all public members
/// - ns1__EventFilter::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EventFilter(soap*, ns1__EventFilter*) deserialize from a stream
/// - int soap_write_ns1__EventFilter(soap*, ns1__EventFilter*) serialize to a stream
/// - ns1__EventFilter* ns1__EventFilter::soap_dup(soap*) returns deep copy of ns1__EventFilter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EventFilter::soap_del() deep deletes ns1__EventFilter data members, use only after ns1__EventFilter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__EventFilter::soap_type() returns SOAP_TYPE_ns1__EventFilter or derived type identifier
class ns1__EventFilter
{ public:
/// Element "OrganizerId" of type xs:unsignedInt.
    unsigned int*                        OrganizerId                    0;	///< Optional element.
/// Element "VenueId" of type xs:unsignedInt.
    unsigned int*                        VenueId                        0;	///< Optional element.
/// Element "KSBNumber" of type xs:string.
    std::string*                         KSBNumber                      0;	///< Optional element.
/// Element "LSBNumber" of type xs:string.
    std::string*                         LSBNumber                      0;	///< Optional element.
/// Element "SportRegion" of type xs:unsignedInt.
    unsigned int*                        SportRegion                    0;	///< Optional element.
/// Element "OnlyVisible" of type xs:boolean.
    bool*                                OnlyVisible                    0;	///< Optional element.
/// Element "OnlyWithEducationalLeave" of type xs:boolean.
    bool*                                OnlyWithEducationalLeave       0;	///< Optional element.
/// Element "Title" of type xs:string.
    std::string*                         Title                          0;	///< Optional element.
/// Element "TitleSearchType" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":SearchType.
    enum ns1__SearchType*                TitleSearchType                0;	///< Optional element.
/// Element "TitleAddition" of type xs:string.
    std::string*                         TitleAddition                  0;	///< Optional element.
/// Element "TitleAdditionSearchType" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":SearchType.
    enum ns1__SearchType*                TitleAdditionSearchType        0;	///< Optional element.
/// Element "Subtitle" of type xs:string.
    std::string*                         Subtitle                       0;	///< Optional element.
/// Element "SubtitleSearchType" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":SearchType.
    enum ns1__SearchType*                SubtitleSearchType             0;	///< Optional element.
/// Element "SubtitleAddition" of type xs:string.
    std::string*                         SubtitleAddition               0;	///< Optional element.
/// Element "SubtitleAdditionSearchType" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":SearchType.
    enum ns1__SearchType*                SubtitleAdditionSearchType     0;	///< Optional element.
/// Element "Category" of type xs:string.
    std::string*                         Category                       0;	///< Optional element.
/// Element "CategorySearchType" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":SearchType.
    enum ns1__SearchType*                CategorySearchType             0;	///< Optional element.
/// Element "SubCategory" of type xs:string.
    std::string*                         SubCategory                    0;	///< Optional element.
/// Element "SubCategorySearchType" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":SearchType.
    enum ns1__SearchType*                SubCategorySearchType          0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventBase is a complexType.
///
/// This type is extended by:
/// - "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventMini as ns1__EventMini
///
/// @note class ns1__EventBase operations:
/// - ns1__EventBase* soap_new_ns1__EventBase(soap*) allocate and default initialize
/// - ns1__EventBase* soap_new_ns1__EventBase(soap*, int num) allocate and default initialize an array
/// - ns1__EventBase* soap_new_req_ns1__EventBase(soap*, ...) allocate, set required members
/// - ns1__EventBase* soap_new_set_ns1__EventBase(soap*, ...) allocate, set all public members
/// - ns1__EventBase::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EventBase(soap*, ns1__EventBase*) deserialize from a stream
/// - int soap_write_ns1__EventBase(soap*, ns1__EventBase*) serialize to a stream
/// - ns1__EventBase* ns1__EventBase::soap_dup(soap*) returns deep copy of ns1__EventBase, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EventBase::soap_del() deep deletes ns1__EventBase data members, use only after ns1__EventBase::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__EventBase::soap_type() returns SOAP_TYPE_ns1__EventBase or derived type identifier
class ns1__EventBase
{ public:
/// Element "Hidden" of type xs:boolean.
    bool                                 Hidden                         1;	///< Required element.
/// Element "Id" of type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Element "Number" of type xs:string.
    std::string*                         Number                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "KSBNumber" of type xs:string.
    std::string*                         KSBNumber                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "LSBNumber" of type xs:string.
    std::string*                         LSBNumber                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "SportRegion" of type xs:unsignedInt.
    unsigned int*                        SportRegion                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Date" of type xs:string.
    std::string*                         Date                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventFee is a complexType.
///
/// @note class ns1__EventFee operations:
/// - ns1__EventFee* soap_new_ns1__EventFee(soap*) allocate and default initialize
/// - ns1__EventFee* soap_new_ns1__EventFee(soap*, int num) allocate and default initialize an array
/// - ns1__EventFee* soap_new_req_ns1__EventFee(soap*, ...) allocate, set required members
/// - ns1__EventFee* soap_new_set_ns1__EventFee(soap*, ...) allocate, set all public members
/// - ns1__EventFee::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EventFee(soap*, ns1__EventFee*) deserialize from a stream
/// - int soap_write_ns1__EventFee(soap*, ns1__EventFee*) serialize to a stream
/// - ns1__EventFee* ns1__EventFee::soap_dup(soap*) returns deep copy of ns1__EventFee, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EventFee::soap_del() deep deletes ns1__EventFee data members, use only after ns1__EventFee::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__EventFee::soap_type() returns SOAP_TYPE_ns1__EventFee or derived type identifier
class ns1__EventFee
{ public:
/// Element "name" of type xs:string.
    std::string*                         name                           0;	///< Optional element.
/// Element "fee" of type xs:decimal.
    xsd__decimal                         fee                            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":Address is a complexType.
///
/// @note class ns1__Address operations:
/// - ns1__Address* soap_new_ns1__Address(soap*) allocate and default initialize
/// - ns1__Address* soap_new_ns1__Address(soap*, int num) allocate and default initialize an array
/// - ns1__Address* soap_new_req_ns1__Address(soap*, ...) allocate, set required members
/// - ns1__Address* soap_new_set_ns1__Address(soap*, ...) allocate, set all public members
/// - ns1__Address::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Address(soap*, ns1__Address*) deserialize from a stream
/// - int soap_write_ns1__Address(soap*, ns1__Address*) serialize to a stream
/// - ns1__Address* ns1__Address::soap_dup(soap*) returns deep copy of ns1__Address, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Address::soap_del() deep deletes ns1__Address data members, use only after ns1__Address::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Address::soap_type() returns SOAP_TYPE_ns1__Address or derived type identifier
class ns1__Address
{ public:
/// Element "Name" of type xs:string.
    std::string*                         Name                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Street" of type xs:string.
    std::string*                         Street                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Zip" of type xs:string.
    std::string*                         Zip                            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "City" of type xs:string.
    std::string*                         City                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Contact" of type xs:string.
    std::string*                         Contact                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Phone" of type xs:string.
    std::string*                         Phone                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Fax" of type xs:string.
    std::string*                         Fax                            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "MobilePhone" of type xs:string.
    std::string*                         MobilePhone                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "EMail" of type xs:string.
    std::string*                         EMail                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":WorkshopTimeslot is a complexType.
///
/// @note class ns1__WorkshopTimeslot operations:
/// - ns1__WorkshopTimeslot* soap_new_ns1__WorkshopTimeslot(soap*) allocate and default initialize
/// - ns1__WorkshopTimeslot* soap_new_ns1__WorkshopTimeslot(soap*, int num) allocate and default initialize an array
/// - ns1__WorkshopTimeslot* soap_new_req_ns1__WorkshopTimeslot(soap*, ...) allocate, set required members
/// - ns1__WorkshopTimeslot* soap_new_set_ns1__WorkshopTimeslot(soap*, ...) allocate, set all public members
/// - ns1__WorkshopTimeslot::soap_default(soap*) default initialize members
/// - int soap_read_ns1__WorkshopTimeslot(soap*, ns1__WorkshopTimeslot*) deserialize from a stream
/// - int soap_write_ns1__WorkshopTimeslot(soap*, ns1__WorkshopTimeslot*) serialize to a stream
/// - ns1__WorkshopTimeslot* ns1__WorkshopTimeslot::soap_dup(soap*) returns deep copy of ns1__WorkshopTimeslot, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__WorkshopTimeslot::soap_del() deep deletes ns1__WorkshopTimeslot data members, use only after ns1__WorkshopTimeslot::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__WorkshopTimeslot::soap_type() returns SOAP_TYPE_ns1__WorkshopTimeslot or derived type identifier
class ns1__WorkshopTimeslot
{ public:
/// Element "Timeslot" of type xs:string.
    std::string*                         Timeslot                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Vector of ns1__Workshop* of length 0..unbounded.
    std::vector<ns1__Workshop*         > Workshops                      0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":Workshop is a complexType.
///
/// @note class ns1__Workshop operations:
/// - ns1__Workshop* soap_new_ns1__Workshop(soap*) allocate and default initialize
/// - ns1__Workshop* soap_new_ns1__Workshop(soap*, int num) allocate and default initialize an array
/// - ns1__Workshop* soap_new_req_ns1__Workshop(soap*, ...) allocate, set required members
/// - ns1__Workshop* soap_new_set_ns1__Workshop(soap*, ...) allocate, set all public members
/// - ns1__Workshop::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Workshop(soap*, ns1__Workshop*) deserialize from a stream
/// - int soap_write_ns1__Workshop(soap*, ns1__Workshop*) serialize to a stream
/// - ns1__Workshop* ns1__Workshop::soap_dup(soap*) returns deep copy of ns1__Workshop, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Workshop::soap_del() deep deletes ns1__Workshop data members, use only after ns1__Workshop::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Workshop::soap_type() returns SOAP_TYPE_ns1__Workshop or derived type identifier
class ns1__Workshop
{ public:
/// Element "Id" of type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Element "Number" of type xs:string.
    std::string*                         Number                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Title" of type xs:string.
    std::string*                         Title                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "AdditionalInfo" of type xs:string.
    std::string*                         AdditionalInfo                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Date" of type xs:string.
    std::string*                         Date                           0;	///< Optional element.
/// Element "TimeFrom" of type xs:string.
    std::string*                         TimeFrom                       0;	///< Optional element.
/// Element "TimeTo" of type xs:string.
    std::string*                         TimeTo                         0;	///< Optional element.
/// Element "OccupancyPercentage" of type xs:unsignedByte.
    xsd__unsignedByte                    OccupancyPercentage            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventRegistration is a complexType.
///
/// @note class ns1__EventRegistration operations:
/// - ns1__EventRegistration* soap_new_ns1__EventRegistration(soap*) allocate and default initialize
/// - ns1__EventRegistration* soap_new_ns1__EventRegistration(soap*, int num) allocate and default initialize an array
/// - ns1__EventRegistration* soap_new_req_ns1__EventRegistration(soap*, ...) allocate, set required members
/// - ns1__EventRegistration* soap_new_set_ns1__EventRegistration(soap*, ...) allocate, set all public members
/// - ns1__EventRegistration::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EventRegistration(soap*, ns1__EventRegistration*) deserialize from a stream
/// - int soap_write_ns1__EventRegistration(soap*, ns1__EventRegistration*) serialize to a stream
/// - ns1__EventRegistration* ns1__EventRegistration::soap_dup(soap*) returns deep copy of ns1__EventRegistration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EventRegistration::soap_del() deep deletes ns1__EventRegistration data members, use only after ns1__EventRegistration::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__EventRegistration::soap_type() returns SOAP_TYPE_ns1__EventRegistration or derived type identifier
class ns1__EventRegistration
{ public:
/// Vector of ns1__EventRegistrationEvent* of length 0..unbounded.
    std::vector<ns1__EventRegistrationEvent*> Events                         0;	///< Multiple elements.
/// Element "Salutation" of type xs:string.
    std::string*                         Salutation                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Title" of type xs:string.
    std::string*                         Title                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Firstname" of type xs:string.
    std::string*                         Firstname                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Lastname" of type xs:string.
    std::string*                         Lastname                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Street" of type xs:string.
    std::string*                         Street                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Zip" of type xs:string.
    std::string*                         Zip                            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "City" of type xs:string.
    std::string*                         City                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "DateOfBirth" of type xs:string.
    std::string*                         DateOfBirth                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "AccountHolder" of type xs:string.
    std::string*                         AccountHolder                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "IBAN" of type xs:string.
    std::string*                         IBAN                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "BIC" of type xs:string.
    std::string*                         BIC                            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "EMail" of type xs:string.
    std::string*                         EMail                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Phone" of type xs:string.
    std::string*                         Phone                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "MobilePhone" of type xs:string.
    std::string*                         MobilePhone                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "AssociationNumber" of type xs:string.
    std::string*                         AssociationNumber              nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Association" of type xs:string.
    std::string*                         Association                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "YouthLeaderCard" of type xs:string.
    std::string*                         YouthLeaderCard                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "YouthLeaderCardValidity" of type xs:string.
    std::string*                         YouthLeaderCardValidity        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Comment" of type xs:string.
    std::string*                         Comment                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Overnight" of type xs:boolean.
    bool                                 Overnight                      1;	///< Required element.
/// Element "SingleRoom" of type xs:boolean.
    bool                                 SingleRoom                     1;	///< Required element.
/// Element "Vegetarian" of type xs:boolean.
    bool                                 Vegetarian                     1;	///< Required element.
/// Element "AddressDisclosure" of type xs:boolean.
    bool                                 AddressDisclosure              1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventRegistrationEvent is a complexType.
///
/// @note class ns1__EventRegistrationEvent operations:
/// - ns1__EventRegistrationEvent* soap_new_ns1__EventRegistrationEvent(soap*) allocate and default initialize
/// - ns1__EventRegistrationEvent* soap_new_ns1__EventRegistrationEvent(soap*, int num) allocate and default initialize an array
/// - ns1__EventRegistrationEvent* soap_new_req_ns1__EventRegistrationEvent(soap*, ...) allocate, set required members
/// - ns1__EventRegistrationEvent* soap_new_set_ns1__EventRegistrationEvent(soap*, ...) allocate, set all public members
/// - ns1__EventRegistrationEvent::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EventRegistrationEvent(soap*, ns1__EventRegistrationEvent*) deserialize from a stream
/// - int soap_write_ns1__EventRegistrationEvent(soap*, ns1__EventRegistrationEvent*) serialize to a stream
/// - ns1__EventRegistrationEvent* ns1__EventRegistrationEvent::soap_dup(soap*) returns deep copy of ns1__EventRegistrationEvent, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EventRegistrationEvent::soap_del() deep deletes ns1__EventRegistrationEvent data members, use only after ns1__EventRegistrationEvent::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__EventRegistrationEvent::soap_type() returns SOAP_TYPE_ns1__EventRegistrationEvent or derived type identifier
class ns1__EventRegistrationEvent
{ public:
/// Element "Id" of type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Vector of unsigned int of length 0..unbounded.
    std::vector<unsigned int           > WorkshopIds                    0;	///< Multiple elements.
/// Element "WorkshopComment" of type xs:string.
    std::string*                         WorkshopComment                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventRegistrationWarning is a complexType.
///
/// @note class ns1__EventRegistrationWarning operations:
/// - ns1__EventRegistrationWarning* soap_new_ns1__EventRegistrationWarning(soap*) allocate and default initialize
/// - ns1__EventRegistrationWarning* soap_new_ns1__EventRegistrationWarning(soap*, int num) allocate and default initialize an array
/// - ns1__EventRegistrationWarning* soap_new_req_ns1__EventRegistrationWarning(soap*, ...) allocate, set required members
/// - ns1__EventRegistrationWarning* soap_new_set_ns1__EventRegistrationWarning(soap*, ...) allocate, set all public members
/// - ns1__EventRegistrationWarning::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EventRegistrationWarning(soap*, ns1__EventRegistrationWarning*) deserialize from a stream
/// - int soap_write_ns1__EventRegistrationWarning(soap*, ns1__EventRegistrationWarning*) serialize to a stream
/// - ns1__EventRegistrationWarning* ns1__EventRegistrationWarning::soap_dup(soap*) returns deep copy of ns1__EventRegistrationWarning, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EventRegistrationWarning::soap_del() deep deletes ns1__EventRegistrationWarning data members, use only after ns1__EventRegistrationWarning::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__EventRegistrationWarning::soap_type() returns SOAP_TYPE_ns1__EventRegistrationWarning or derived type identifier
class ns1__EventRegistrationWarning
{ public:
/// Element "eventId" of type xs:unsignedInt.
    unsigned int                         eventId                        1;	///< Required element.
/// Element "code" of type xs:string.
    std::string*                         code                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "warningMessage" of type xs:string.
    std::string*                         warningMessage                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Vector of ns1__KeyValue* of length 0..unbounded.
    std::vector<ns1__KeyValue*         > additionalData                 0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":KeyValue is a complexType.
///
/// @note class ns1__KeyValue operations:
/// - ns1__KeyValue* soap_new_ns1__KeyValue(soap*) allocate and default initialize
/// - ns1__KeyValue* soap_new_ns1__KeyValue(soap*, int num) allocate and default initialize an array
/// - ns1__KeyValue* soap_new_req_ns1__KeyValue(soap*, ...) allocate, set required members
/// - ns1__KeyValue* soap_new_set_ns1__KeyValue(soap*, ...) allocate, set all public members
/// - ns1__KeyValue::soap_default(soap*) default initialize members
/// - int soap_read_ns1__KeyValue(soap*, ns1__KeyValue*) deserialize from a stream
/// - int soap_write_ns1__KeyValue(soap*, ns1__KeyValue*) serialize to a stream
/// - ns1__KeyValue* ns1__KeyValue::soap_dup(soap*) returns deep copy of ns1__KeyValue, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__KeyValue::soap_del() deep deletes ns1__KeyValue data members, use only after ns1__KeyValue::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__KeyValue::soap_type() returns SOAP_TYPE_ns1__KeyValue or derived type identifier
class ns1__KeyValue
{ public:
/// Element "key" of type xs:string.
    std::string*                         key                            0;	///< Optional element.
/// Element "value" of type xs:string.
    std::string*                         value                          0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.lsb-niedersachsen.de/bildungsportal/api/":dumpTableFields
/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":dumpTableFields is a complexType.
///
/// @note class _ns1__dumpTableFields operations:
/// - _ns1__dumpTableFields* soap_new__ns1__dumpTableFields(soap*) allocate and default initialize
/// - _ns1__dumpTableFields* soap_new__ns1__dumpTableFields(soap*, int num) allocate and default initialize an array
/// - _ns1__dumpTableFields* soap_new_req__ns1__dumpTableFields(soap*, ...) allocate, set required members
/// - _ns1__dumpTableFields* soap_new_set__ns1__dumpTableFields(soap*, ...) allocate, set all public members
/// - _ns1__dumpTableFields::soap_default(soap*) default initialize members
/// - int soap_read__ns1__dumpTableFields(soap*, _ns1__dumpTableFields*) deserialize from a stream
/// - int soap_write__ns1__dumpTableFields(soap*, _ns1__dumpTableFields*) serialize to a stream
/// - _ns1__dumpTableFields* _ns1__dumpTableFields::soap_dup(soap*) returns deep copy of _ns1__dumpTableFields, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__dumpTableFields::soap_del() deep deletes _ns1__dumpTableFields data members, use only after _ns1__dumpTableFields::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__dumpTableFields::soap_type() returns SOAP_TYPE__ns1__dumpTableFields or derived type identifier
class _ns1__dumpTableFields
{ public:
/// Element "tableName" of type xs:string.
    std::string*                         tableName                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.lsb-niedersachsen.de/bildungsportal/api/":dumpTableFieldsResponse
/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":dumpTableFieldsResponse is a complexType.
///
/// @note class _ns1__dumpTableFieldsResponse operations:
/// - _ns1__dumpTableFieldsResponse* soap_new__ns1__dumpTableFieldsResponse(soap*) allocate and default initialize
/// - _ns1__dumpTableFieldsResponse* soap_new__ns1__dumpTableFieldsResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__dumpTableFieldsResponse* soap_new_req__ns1__dumpTableFieldsResponse(soap*, ...) allocate, set required members
/// - _ns1__dumpTableFieldsResponse* soap_new_set__ns1__dumpTableFieldsResponse(soap*, ...) allocate, set all public members
/// - _ns1__dumpTableFieldsResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__dumpTableFieldsResponse(soap*, _ns1__dumpTableFieldsResponse*) deserialize from a stream
/// - int soap_write__ns1__dumpTableFieldsResponse(soap*, _ns1__dumpTableFieldsResponse*) serialize to a stream
/// - _ns1__dumpTableFieldsResponse* _ns1__dumpTableFieldsResponse::soap_dup(soap*) returns deep copy of _ns1__dumpTableFieldsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__dumpTableFieldsResponse::soap_del() deep deletes _ns1__dumpTableFieldsResponse data members, use only after _ns1__dumpTableFieldsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__dumpTableFieldsResponse::soap_type() returns SOAP_TYPE__ns1__dumpTableFieldsResponse or derived type identifier
class _ns1__dumpTableFieldsResponse
{ public:
/// Element "dumpTableFieldsResult" of type xs:string.
    std::string*                         dumpTableFieldsResult          0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.lsb-niedersachsen.de/bildungsportal/api/":getAllEvents
/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":getAllEvents is a complexType.
///
/// @note class _ns1__getAllEvents operations:
/// - _ns1__getAllEvents* soap_new__ns1__getAllEvents(soap*) allocate and default initialize
/// - _ns1__getAllEvents* soap_new__ns1__getAllEvents(soap*, int num) allocate and default initialize an array
/// - _ns1__getAllEvents* soap_new_req__ns1__getAllEvents(soap*, ...) allocate, set required members
/// - _ns1__getAllEvents* soap_new_set__ns1__getAllEvents(soap*, ...) allocate, set all public members
/// - _ns1__getAllEvents::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getAllEvents(soap*, _ns1__getAllEvents*) deserialize from a stream
/// - int soap_write__ns1__getAllEvents(soap*, _ns1__getAllEvents*) serialize to a stream
/// - _ns1__getAllEvents* _ns1__getAllEvents::soap_dup(soap*) returns deep copy of _ns1__getAllEvents, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAllEvents::soap_del() deep deletes _ns1__getAllEvents data members, use only after _ns1__getAllEvents::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getAllEvents::soap_type() returns SOAP_TYPE__ns1__getAllEvents or derived type identifier
class _ns1__getAllEvents
{ public:
/// Element "filter" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventFilter.
    ns1__EventFilter*                    filter                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.lsb-niedersachsen.de/bildungsportal/api/":getAllEventsResponse
/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":getAllEventsResponse is a complexType.
///
/// @note class _ns1__getAllEventsResponse operations:
/// - _ns1__getAllEventsResponse* soap_new__ns1__getAllEventsResponse(soap*) allocate and default initialize
/// - _ns1__getAllEventsResponse* soap_new__ns1__getAllEventsResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__getAllEventsResponse* soap_new_req__ns1__getAllEventsResponse(soap*, ...) allocate, set required members
/// - _ns1__getAllEventsResponse* soap_new_set__ns1__getAllEventsResponse(soap*, ...) allocate, set all public members
/// - _ns1__getAllEventsResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getAllEventsResponse(soap*, _ns1__getAllEventsResponse*) deserialize from a stream
/// - int soap_write__ns1__getAllEventsResponse(soap*, _ns1__getAllEventsResponse*) serialize to a stream
/// - _ns1__getAllEventsResponse* _ns1__getAllEventsResponse::soap_dup(soap*) returns deep copy of _ns1__getAllEventsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAllEventsResponse::soap_del() deep deletes _ns1__getAllEventsResponse data members, use only after _ns1__getAllEventsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getAllEventsResponse::soap_type() returns SOAP_TYPE__ns1__getAllEventsResponse or derived type identifier
class _ns1__getAllEventsResponse
{ public:
/// Vector of ns1__EventMini* of length 0..unbounded.
    std::vector<ns1__EventMini*        > getAllEventsResult             0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.lsb-niedersachsen.de/bildungsportal/api/":getSingleEvent
/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":getSingleEvent is a complexType.
///
/// @note class _ns1__getSingleEvent operations:
/// - _ns1__getSingleEvent* soap_new__ns1__getSingleEvent(soap*) allocate and default initialize
/// - _ns1__getSingleEvent* soap_new__ns1__getSingleEvent(soap*, int num) allocate and default initialize an array
/// - _ns1__getSingleEvent* soap_new_req__ns1__getSingleEvent(soap*, ...) allocate, set required members
/// - _ns1__getSingleEvent* soap_new_set__ns1__getSingleEvent(soap*, ...) allocate, set all public members
/// - _ns1__getSingleEvent::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getSingleEvent(soap*, _ns1__getSingleEvent*) deserialize from a stream
/// - int soap_write__ns1__getSingleEvent(soap*, _ns1__getSingleEvent*) serialize to a stream
/// - _ns1__getSingleEvent* _ns1__getSingleEvent::soap_dup(soap*) returns deep copy of _ns1__getSingleEvent, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getSingleEvent::soap_del() deep deletes _ns1__getSingleEvent data members, use only after _ns1__getSingleEvent::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getSingleEvent::soap_type() returns SOAP_TYPE__ns1__getSingleEvent or derived type identifier
class _ns1__getSingleEvent
{ public:
/// Element "id" of type xs:unsignedInt.
    unsigned int                         id                             1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.lsb-niedersachsen.de/bildungsportal/api/":getSingleEventResponse
/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":getSingleEventResponse is a complexType.
///
/// @note class _ns1__getSingleEventResponse operations:
/// - _ns1__getSingleEventResponse* soap_new__ns1__getSingleEventResponse(soap*) allocate and default initialize
/// - _ns1__getSingleEventResponse* soap_new__ns1__getSingleEventResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__getSingleEventResponse* soap_new_req__ns1__getSingleEventResponse(soap*, ...) allocate, set required members
/// - _ns1__getSingleEventResponse* soap_new_set__ns1__getSingleEventResponse(soap*, ...) allocate, set all public members
/// - _ns1__getSingleEventResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getSingleEventResponse(soap*, _ns1__getSingleEventResponse*) deserialize from a stream
/// - int soap_write__ns1__getSingleEventResponse(soap*, _ns1__getSingleEventResponse*) serialize to a stream
/// - _ns1__getSingleEventResponse* _ns1__getSingleEventResponse::soap_dup(soap*) returns deep copy of _ns1__getSingleEventResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getSingleEventResponse::soap_del() deep deletes _ns1__getSingleEventResponse data members, use only after _ns1__getSingleEventResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getSingleEventResponse::soap_type() returns SOAP_TYPE__ns1__getSingleEventResponse or derived type identifier
class _ns1__getSingleEventResponse
{ public:
/// Element "getSingleEventResult" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":Event.
    ns1__Event*                          getSingleEventResult           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.lsb-niedersachsen.de/bildungsportal/api/":register
/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":register is a complexType.
///
/// @note class _ns1__register operations:
/// - _ns1__register* soap_new__ns1__register(soap*) allocate and default initialize
/// - _ns1__register* soap_new__ns1__register(soap*, int num) allocate and default initialize an array
/// - _ns1__register* soap_new_req__ns1__register(soap*, ...) allocate, set required members
/// - _ns1__register* soap_new_set__ns1__register(soap*, ...) allocate, set all public members
/// - _ns1__register::soap_default(soap*) default initialize members
/// - int soap_read__ns1__register(soap*, _ns1__register*) deserialize from a stream
/// - int soap_write__ns1__register(soap*, _ns1__register*) serialize to a stream
/// - _ns1__register* _ns1__register::soap_dup(soap*) returns deep copy of _ns1__register, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__register::soap_del() deep deletes _ns1__register data members, use only after _ns1__register::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__register::soap_type() returns SOAP_TYPE__ns1__register or derived type identifier
class _ns1__register
{ public:
/// Element "registrationData" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventRegistration.
    ns1__EventRegistration*              registrationData               0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.lsb-niedersachsen.de/bildungsportal/api/":registerResponse
/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":registerResponse is a complexType.
///
/// @note class _ns1__registerResponse operations:
/// - _ns1__registerResponse* soap_new__ns1__registerResponse(soap*) allocate and default initialize
/// - _ns1__registerResponse* soap_new__ns1__registerResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__registerResponse* soap_new_req__ns1__registerResponse(soap*, ...) allocate, set required members
/// - _ns1__registerResponse* soap_new_set__ns1__registerResponse(soap*, ...) allocate, set all public members
/// - _ns1__registerResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__registerResponse(soap*, _ns1__registerResponse*) deserialize from a stream
/// - int soap_write__ns1__registerResponse(soap*, _ns1__registerResponse*) serialize to a stream
/// - _ns1__registerResponse* _ns1__registerResponse::soap_dup(soap*) returns deep copy of _ns1__registerResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__registerResponse::soap_del() deep deletes _ns1__registerResponse data members, use only after _ns1__registerResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__registerResponse::soap_type() returns SOAP_TYPE__ns1__registerResponse or derived type identifier
class _ns1__registerResponse
{ public:
/// Vector of ns1__EventRegistrationWarning* of length 0..unbounded.
    std::vector<ns1__EventRegistrationWarning*> registerResult                 0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventMini is a complexType with complexContent extension of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventBase.
///
/// @note class ns1__EventMini operations:
/// - ns1__EventMini* soap_new_ns1__EventMini(soap*) allocate and default initialize
/// - ns1__EventMini* soap_new_ns1__EventMini(soap*, int num) allocate and default initialize an array
/// - ns1__EventMini* soap_new_req_ns1__EventMini(soap*, ...) allocate, set required members
/// - ns1__EventMini* soap_new_set_ns1__EventMini(soap*, ...) allocate, set all public members
/// - ns1__EventMini::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EventMini(soap*, ns1__EventMini*) deserialize from a stream
/// - int soap_write_ns1__EventMini(soap*, ns1__EventMini*) serialize to a stream
/// - ns1__EventMini* ns1__EventMini::soap_dup(soap*) returns deep copy of ns1__EventMini, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EventMini::soap_del() deep deletes ns1__EventMini data members, use only after ns1__EventMini::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__EventMini::soap_type() returns SOAP_TYPE_ns1__EventMini or derived type identifier
class ns1__EventMini : public ns1__EventBase
{ public:
/*  INHERITED FROM ns1__EventBase:
/// Element "Hidden" of type xs:boolean.
    bool                                 Hidden                         1;	///< Required element.
/// Element "Id" of type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Element "Number" of type xs:string.
    std::string*                         Number                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "KSBNumber" of type xs:string.
    std::string*                         KSBNumber                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "LSBNumber" of type xs:string.
    std::string*                         LSBNumber                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "SportRegion" of type xs:unsignedInt.
    unsigned int*                        SportRegion                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Date" of type xs:string.
    std::string*                         Date                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    END OF INHERITED FROM ns1__EventBase */
/// Element "Title" of type xs:string.
    std::string*                         Title                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "TitleAddition" of type xs:string.
    std::string*                         TitleAddition                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Subtitle" of type xs:string.
    std::string*                         Subtitle                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "SubtitleAddition" of type xs:string.
    std::string*                         SubtitleAddition               nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Category" of type xs:string.
    std::string*                         Category                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "SubCategory" of type xs:string.
    std::string*                         SubCategory                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Type" of type xs:string.
    std::string*                         Type                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "VenueCity" of type xs:string.
    std::string*                         VenueCity                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "OccupancyPercentage" of type xs:unsignedByte.
    xsd__unsignedByte                    OccupancyPercentage            1;	///< Required element.
/// Element "EducationalLeave" of type xs:boolean.
    bool                                 EducationalLeave               1;	///< Required element.
/// Vector of ns1__EventBase* of length 0..unbounded.
    std::vector<ns1__EventBase*        > SubEvents                      0;	///< Multiple elements.
};

/// @brief "http://www.lsb-niedersachsen.de/bildungsportal/api/":Event is a complexType with complexContent extension of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":EventMini.
///
/// @note class ns1__Event operations:
/// - ns1__Event* soap_new_ns1__Event(soap*) allocate and default initialize
/// - ns1__Event* soap_new_ns1__Event(soap*, int num) allocate and default initialize an array
/// - ns1__Event* soap_new_req_ns1__Event(soap*, ...) allocate, set required members
/// - ns1__Event* soap_new_set_ns1__Event(soap*, ...) allocate, set all public members
/// - ns1__Event::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Event(soap*, ns1__Event*) deserialize from a stream
/// - int soap_write_ns1__Event(soap*, ns1__Event*) serialize to a stream
/// - ns1__Event* ns1__Event::soap_dup(soap*) returns deep copy of ns1__Event, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Event::soap_del() deep deletes ns1__Event data members, use only after ns1__Event::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Event::soap_type() returns SOAP_TYPE_ns1__Event or derived type identifier
class ns1__Event : public ns1__EventMini
{ public:
/*  INHERITED FROM ns1__EventBase:
/// Element "Hidden" of type xs:boolean.
    bool                                 Hidden                         1;	///< Required element.
/// Element "Id" of type xs:unsignedInt.
    unsigned int                         Id                             1;	///< Required element.
/// Element "Number" of type xs:string.
    std::string*                         Number                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "KSBNumber" of type xs:string.
    std::string*                         KSBNumber                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "LSBNumber" of type xs:string.
    std::string*                         LSBNumber                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "SportRegion" of type xs:unsignedInt.
    unsigned int*                        SportRegion                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Date" of type xs:string.
    std::string*                         Date                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    END OF INHERITED FROM ns1__EventBase */
/*  INHERITED FROM ns1__EventMini:
/// Element "Title" of type xs:string.
    std::string*                         Title                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "TitleAddition" of type xs:string.
    std::string*                         TitleAddition                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Subtitle" of type xs:string.
    std::string*                         Subtitle                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "SubtitleAddition" of type xs:string.
    std::string*                         SubtitleAddition               nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Category" of type xs:string.
    std::string*                         Category                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "SubCategory" of type xs:string.
    std::string*                         SubCategory                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Type" of type xs:string.
    std::string*                         Type                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "VenueCity" of type xs:string.
    std::string*                         VenueCity                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "OccupancyPercentage" of type xs:unsignedByte.
    xsd__unsignedByte                    OccupancyPercentage            1;	///< Required element.
/// Element "EducationalLeave" of type xs:boolean.
    bool                                 EducationalLeave               1;	///< Required element.
/// Vector of ns1__EventBase* of length 0..unbounded.
    std::vector<ns1__EventBase*        > SubEvents                      0;	///< Multiple elements.
    END OF INHERITED FROM ns1__EventMini */
/// Vector of ns1__EventFee* of length 0..unbounded.
    std::vector<ns1__EventFee*         > EventFees                      0;	///< Multiple elements.
/// Element "Profile" of type xs:string.
    std::string*                         Profile                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Acknowledgement" of type xs:string.
    std::string*                         Acknowledgement                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "TargetGroup" of type xs:string.
    std::string*                         TargetGroup                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "NumberOfLearnUnits" of type xs:unsignedInt.
    unsigned int                         NumberOfLearnUnits             1;	///< Required element.
/// Element "Venue" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":Address.
    ns1__Address*                        Venue                          0;	///< Optional element.
/// Element "VenueIsHandicappedAccessible" of type xs:boolean.
    bool                                 VenueIsHandicappedAccessible   1;	///< Required element.
/// Element "Organizer" of type "http://www.lsb-niedersachsen.de/bildungsportal/api/":Address.
    ns1__Address*                        Organizer                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "InfoText" of type xs:string.
    std::string*                         InfoText                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "InfoText2" of type xs:string.
    std::string*                         InfoText2                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "InfoText3" of type xs:string.
    std::string*                         InfoText3                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "InfoText4" of type xs:string.
    std::string*                         InfoText4                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "InfoURL" of type xs:string.
    std::string*                         InfoURL                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "MaxNumberOfWorkshopRegistrations" of type xs:unsignedInt.
    unsigned int*                        MaxNumberOfWorkshopRegistrations nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Vector of ns1__WorkshopTimeslot* of length 0..unbounded.
    std::vector<ns1__WorkshopTimeslot* > WorkshopTimeslots              0;	///< Multiple elements.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.lsb-niedersachsen.de/bildungsportal/api/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.lsb-niedersachsen.de/bildungsportal/api/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	APIBildungsPortalSoap 
//gsoap ns1  service type:	APIBildungsPortalSoap 
//gsoap ns1  service port:	http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx 
//gsoap ns1  service namespace:	http://www.lsb-niedersachsen.de/bildungsportal/api/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref APIBildungsPortalSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page APIBildungsPortalSoap Binding "APIBildungsPortalSoap"

@section APIBildungsPortalSoap_operations Operations of Binding "APIBildungsPortalSoap"

  - @ref __ns1__dumpTableFields

  - @ref __ns1__getAllEvents

  - @ref __ns1__getSingleEvent

  - @ref __ns1__register

  - @ref __ns1__dumpTableFields_

  - @ref __ns1__getAllEvents_

  - @ref __ns1__getSingleEvent_

  - @ref __ns1__register_

@section APIBildungsPortalSoap_ports Default endpoints of Binding "APIBildungsPortalSoap"

  - http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   APIBildungsPortalSoap                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__dumpTableFields                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__dumpTableFields" of service binding "APIBildungsPortalSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx

  - Default SOAP action or REST location path:
    - "http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFields"

  - Addressing input action: "http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFields"

  - Addressing output action: "http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFieldsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__dumpTableFields(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__dumpTableFields*              ns1__dumpTableFields,
    // output parameters:
    _ns1__dumpTableFieldsResponse      &ns1__dumpTableFieldsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__dumpTableFields(
    struct soap *soap,
    // input parameters:
    _ns1__dumpTableFields*              ns1__dumpTableFields,
    // output parameters:
    _ns1__dumpTableFieldsResponse      &ns1__dumpTableFieldsResponse
  );
@endcode

C++ proxy class (defined in soapAPIBildungsPortalSoapProxy.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAPIBildungsPortalSoapService.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	dumpTableFields SOAP
//gsoap ns1  service method-style:	dumpTableFields document
//gsoap ns1  service method-encoding:	dumpTableFields literal
//gsoap ns1  service method-input-action:	dumpTableFields http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFields
//gsoap ns1  service method-output-action:	dumpTableFields http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFieldsResponse
int __ns1__dumpTableFields(
    _ns1__dumpTableFields*              ns1__dumpTableFields,	///< Input parameter
    _ns1__dumpTableFieldsResponse      &ns1__dumpTableFieldsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAllEvents                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAllEvents" of service binding "APIBildungsPortalSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx

  - Default SOAP action or REST location path:
    - "http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEvents"

  - Addressing input action: "http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEvents"

  - Addressing output action: "http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEventsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAllEvents(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAllEvents*                 ns1__getAllEvents,
    // output parameters:
    _ns1__getAllEventsResponse         &ns1__getAllEventsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAllEvents(
    struct soap *soap,
    // input parameters:
    _ns1__getAllEvents*                 ns1__getAllEvents,
    // output parameters:
    _ns1__getAllEventsResponse         &ns1__getAllEventsResponse
  );
@endcode

C++ proxy class (defined in soapAPIBildungsPortalSoapProxy.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAPIBildungsPortalSoapService.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAllEvents SOAP
//gsoap ns1  service method-style:	getAllEvents document
//gsoap ns1  service method-encoding:	getAllEvents literal
//gsoap ns1  service method-input-action:	getAllEvents http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEvents
//gsoap ns1  service method-output-action:	getAllEvents http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEventsResponse
int __ns1__getAllEvents(
    _ns1__getAllEvents*                 ns1__getAllEvents,	///< Input parameter
    _ns1__getAllEventsResponse         &ns1__getAllEventsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSingleEvent                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSingleEvent" of service binding "APIBildungsPortalSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx

  - Default SOAP action or REST location path:
    - "http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEvent"

  - Addressing input action: "http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEvent"

  - Addressing output action: "http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEventResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSingleEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSingleEvent*               ns1__getSingleEvent,
    // output parameters:
    _ns1__getSingleEventResponse       &ns1__getSingleEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSingleEvent(
    struct soap *soap,
    // input parameters:
    _ns1__getSingleEvent*               ns1__getSingleEvent,
    // output parameters:
    _ns1__getSingleEventResponse       &ns1__getSingleEventResponse
  );
@endcode

C++ proxy class (defined in soapAPIBildungsPortalSoapProxy.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAPIBildungsPortalSoapService.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSingleEvent SOAP
//gsoap ns1  service method-style:	getSingleEvent document
//gsoap ns1  service method-encoding:	getSingleEvent literal
//gsoap ns1  service method-input-action:	getSingleEvent http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEvent
//gsoap ns1  service method-output-action:	getSingleEvent http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEventResponse
int __ns1__getSingleEvent(
    _ns1__getSingleEvent*               ns1__getSingleEvent,	///< Input parameter
    _ns1__getSingleEventResponse       &ns1__getSingleEventResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__register                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__register" of service binding "APIBildungsPortalSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx

  - Default SOAP action or REST location path:
    - "http://www.lsb-niedersachsen.de/bildungsportal/api/register"

  - Addressing input action: "http://www.lsb-niedersachsen.de/bildungsportal/api/register"

  - Addressing output action: "http://www.lsb-niedersachsen.de/bildungsportal/api/registerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__register(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__register*                     ns1__register,
    // output parameters:
    _ns1__registerResponse             &ns1__registerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__register(
    struct soap *soap,
    // input parameters:
    _ns1__register*                     ns1__register,
    // output parameters:
    _ns1__registerResponse             &ns1__registerResponse
  );
@endcode

C++ proxy class (defined in soapAPIBildungsPortalSoapProxy.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAPIBildungsPortalSoapService.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	register SOAP
//gsoap ns1  service method-style:	register document
//gsoap ns1  service method-encoding:	register literal
//gsoap ns1  service method-input-action:	register http://www.lsb-niedersachsen.de/bildungsportal/api/register
//gsoap ns1  service method-output-action:	register http://www.lsb-niedersachsen.de/bildungsportal/api/registerResponse
int __ns1__register(
    _ns1__register*                     ns1__register,	///< Input parameter
    _ns1__registerResponse             &ns1__registerResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__dumpTableFields_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__dumpTableFields_" of service binding "APIBildungsPortalSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx

  - Default SOAP action or REST location path:
    - "http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFields"

  - Addressing input action: "http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFields"

  - Addressing output action: "http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFieldsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__dumpTableFields_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__dumpTableFields*              ns1__dumpTableFields,
    // output parameters:
    _ns1__dumpTableFieldsResponse      &ns1__dumpTableFieldsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__dumpTableFields_(
    struct soap *soap,
    // input parameters:
    _ns1__dumpTableFields*              ns1__dumpTableFields,
    // output parameters:
    _ns1__dumpTableFieldsResponse      &ns1__dumpTableFieldsResponse
  );
@endcode

C++ proxy class (defined in soapAPIBildungsPortalSoapProxy.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAPIBildungsPortalSoapService.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	dumpTableFields_ SOAP
//gsoap ns1  service method-style:	dumpTableFields_ document
//gsoap ns1  service method-encoding:	dumpTableFields_ literal
//gsoap ns1  service method-input-action:	dumpTableFields_ http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFields
//gsoap ns1  service method-output-action:	dumpTableFields_ http://www.lsb-niedersachsen.de/bildungsportal/api/dumpTableFieldsResponse
int __ns1__dumpTableFields_(
    _ns1__dumpTableFields*              ns1__dumpTableFields,	///< Input parameter
    _ns1__dumpTableFieldsResponse      &ns1__dumpTableFieldsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAllEvents_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAllEvents_" of service binding "APIBildungsPortalSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx

  - Default SOAP action or REST location path:
    - "http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEvents"

  - Addressing input action: "http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEvents"

  - Addressing output action: "http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEventsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAllEvents_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAllEvents*                 ns1__getAllEvents,
    // output parameters:
    _ns1__getAllEventsResponse         &ns1__getAllEventsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAllEvents_(
    struct soap *soap,
    // input parameters:
    _ns1__getAllEvents*                 ns1__getAllEvents,
    // output parameters:
    _ns1__getAllEventsResponse         &ns1__getAllEventsResponse
  );
@endcode

C++ proxy class (defined in soapAPIBildungsPortalSoapProxy.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAPIBildungsPortalSoapService.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAllEvents_ SOAP
//gsoap ns1  service method-style:	getAllEvents_ document
//gsoap ns1  service method-encoding:	getAllEvents_ literal
//gsoap ns1  service method-input-action:	getAllEvents_ http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEvents
//gsoap ns1  service method-output-action:	getAllEvents_ http://www.lsb-niedersachsen.de/bildungsportal/api/getAllEventsResponse
int __ns1__getAllEvents_(
    _ns1__getAllEvents*                 ns1__getAllEvents,	///< Input parameter
    _ns1__getAllEventsResponse         &ns1__getAllEventsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSingleEvent_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSingleEvent_" of service binding "APIBildungsPortalSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx

  - Default SOAP action or REST location path:
    - "http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEvent"

  - Addressing input action: "http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEvent"

  - Addressing output action: "http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEventResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSingleEvent_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSingleEvent*               ns1__getSingleEvent,
    // output parameters:
    _ns1__getSingleEventResponse       &ns1__getSingleEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSingleEvent_(
    struct soap *soap,
    // input parameters:
    _ns1__getSingleEvent*               ns1__getSingleEvent,
    // output parameters:
    _ns1__getSingleEventResponse       &ns1__getSingleEventResponse
  );
@endcode

C++ proxy class (defined in soapAPIBildungsPortalSoapProxy.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAPIBildungsPortalSoapService.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSingleEvent_ SOAP
//gsoap ns1  service method-style:	getSingleEvent_ document
//gsoap ns1  service method-encoding:	getSingleEvent_ literal
//gsoap ns1  service method-input-action:	getSingleEvent_ http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEvent
//gsoap ns1  service method-output-action:	getSingleEvent_ http://www.lsb-niedersachsen.de/bildungsportal/api/getSingleEventResponse
int __ns1__getSingleEvent_(
    _ns1__getSingleEvent*               ns1__getSingleEvent,	///< Input parameter
    _ns1__getSingleEventResponse       &ns1__getSingleEventResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__register_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__register_" of service binding "APIBildungsPortalSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://10.20.7.90/LSB_Test/APIBildungsPortal.asmx

  - Default SOAP action or REST location path:
    - "http://www.lsb-niedersachsen.de/bildungsportal/api/register"

  - Addressing input action: "http://www.lsb-niedersachsen.de/bildungsportal/api/register"

  - Addressing output action: "http://www.lsb-niedersachsen.de/bildungsportal/api/registerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__register_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__register*                     ns1__register,
    // output parameters:
    _ns1__registerResponse             &ns1__registerResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__register_(
    struct soap *soap,
    // input parameters:
    _ns1__register*                     ns1__register,
    // output parameters:
    _ns1__registerResponse             &ns1__registerResponse
  );
@endcode

C++ proxy class (defined in soapAPIBildungsPortalSoapProxy.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAPIBildungsPortalSoapService.h generated with soapcpp2):
@code
  class APIBildungsPortalSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	register_ SOAP
//gsoap ns1  service method-style:	register_ document
//gsoap ns1  service method-encoding:	register_ literal
//gsoap ns1  service method-input-action:	register_ http://www.lsb-niedersachsen.de/bildungsportal/api/register
//gsoap ns1  service method-output-action:	register_ http://www.lsb-niedersachsen.de/bildungsportal/api/registerResponse
int __ns1__register_(
    _ns1__register*                     ns1__register,	///< Input parameter
    _ns1__registerResponse             &ns1__registerResponse	///< Output parameter
);

/** @page APIBildungsPortalSoap Binding "APIBildungsPortalSoap"

@section APIBildungsPortalSoap_policy_enablers Policy Enablers of Binding "APIBildungsPortalSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "http://www.lsb-niedersachsen.de/bildungsportal/api/"

  - <ns1:dumpTableFields> @ref _ns1__dumpTableFields
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__dumpTableFields(struct soap*, _ns1__dumpTableFields*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__dumpTableFields(struct soap*, _ns1__dumpTableFields*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__dumpTableFields(struct soap*, const char *URL, _ns1__dumpTableFields*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__dumpTableFields(struct soap*, const char *URL, _ns1__dumpTableFields*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__dumpTableFields(struct soap*, const char *URL, _ns1__dumpTableFields*);
    soap_POST_recv__ns1__dumpTableFields(struct soap*, _ns1__dumpTableFields*);
    @endcode

  - <ns1:dumpTableFieldsResponse> @ref _ns1__dumpTableFieldsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__dumpTableFieldsResponse(struct soap*, _ns1__dumpTableFieldsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__dumpTableFieldsResponse(struct soap*, _ns1__dumpTableFieldsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__dumpTableFieldsResponse(struct soap*, const char *URL, _ns1__dumpTableFieldsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__dumpTableFieldsResponse(struct soap*, const char *URL, _ns1__dumpTableFieldsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__dumpTableFieldsResponse(struct soap*, const char *URL, _ns1__dumpTableFieldsResponse*);
    soap_POST_recv__ns1__dumpTableFieldsResponse(struct soap*, _ns1__dumpTableFieldsResponse*);
    @endcode

  - <ns1:getAllEvents> @ref _ns1__getAllEvents
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAllEvents(struct soap*, _ns1__getAllEvents*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAllEvents(struct soap*, _ns1__getAllEvents*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getAllEvents(struct soap*, const char *URL, _ns1__getAllEvents*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getAllEvents(struct soap*, const char *URL, _ns1__getAllEvents*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getAllEvents(struct soap*, const char *URL, _ns1__getAllEvents*);
    soap_POST_recv__ns1__getAllEvents(struct soap*, _ns1__getAllEvents*);
    @endcode

  - <ns1:getAllEventsResponse> @ref _ns1__getAllEventsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAllEventsResponse(struct soap*, _ns1__getAllEventsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAllEventsResponse(struct soap*, _ns1__getAllEventsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getAllEventsResponse(struct soap*, const char *URL, _ns1__getAllEventsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getAllEventsResponse(struct soap*, const char *URL, _ns1__getAllEventsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getAllEventsResponse(struct soap*, const char *URL, _ns1__getAllEventsResponse*);
    soap_POST_recv__ns1__getAllEventsResponse(struct soap*, _ns1__getAllEventsResponse*);
    @endcode

  - <ns1:getSingleEvent> @ref _ns1__getSingleEvent
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSingleEvent(struct soap*, _ns1__getSingleEvent*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSingleEvent(struct soap*, _ns1__getSingleEvent*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getSingleEvent(struct soap*, const char *URL, _ns1__getSingleEvent*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getSingleEvent(struct soap*, const char *URL, _ns1__getSingleEvent*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getSingleEvent(struct soap*, const char *URL, _ns1__getSingleEvent*);
    soap_POST_recv__ns1__getSingleEvent(struct soap*, _ns1__getSingleEvent*);
    @endcode

  - <ns1:getSingleEventResponse> @ref _ns1__getSingleEventResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSingleEventResponse(struct soap*, _ns1__getSingleEventResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSingleEventResponse(struct soap*, _ns1__getSingleEventResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getSingleEventResponse(struct soap*, const char *URL, _ns1__getSingleEventResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getSingleEventResponse(struct soap*, const char *URL, _ns1__getSingleEventResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getSingleEventResponse(struct soap*, const char *URL, _ns1__getSingleEventResponse*);
    soap_POST_recv__ns1__getSingleEventResponse(struct soap*, _ns1__getSingleEventResponse*);
    @endcode

  - <ns1:register> @ref _ns1__register
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__register(struct soap*, _ns1__register*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__register(struct soap*, _ns1__register*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__register(struct soap*, const char *URL, _ns1__register*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__register(struct soap*, const char *URL, _ns1__register*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__register(struct soap*, const char *URL, _ns1__register*);
    soap_POST_recv__ns1__register(struct soap*, _ns1__register*);
    @endcode

  - <ns1:registerResponse> @ref _ns1__registerResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__registerResponse(struct soap*, _ns1__registerResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__registerResponse(struct soap*, _ns1__registerResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__registerResponse(struct soap*, const char *URL, _ns1__registerResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__registerResponse(struct soap*, const char *URL, _ns1__registerResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__registerResponse(struct soap*, const char *URL, _ns1__registerResponse*);
    soap_POST_recv__ns1__registerResponse(struct soap*, _ns1__registerResponse*);
    @endcode

*/

/* End of bildung.h */
